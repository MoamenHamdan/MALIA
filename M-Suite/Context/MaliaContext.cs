using System;
using System.Collections.Generic;
using M_Suite.Models;
using Microsoft.EntityFrameworkCore;

namespace M_Suite.Data;

public partial class MSuiteContext : DbContext
{
    public MSuiteContext()
    {
    }

    public MSuiteContext(DbContextOptions<MSuiteContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApiSession> ApiSessions { get; set; }

    public virtual DbSet<ApiSessionLog> ApiSessionLogs { get; set; }

    public virtual DbSet<AppImage> AppImages { get; set; }

    public virtual DbSet<AppMediaSnc> AppMediaSncs { get; set; }

    public virtual DbSet<AppMedium> AppMedia { get; set; }

    public virtual DbSet<AppliSetting> AppliSettings { get; set; }

    public virtual DbSet<ApprovalConfig> ApprovalConfigs { get; set; }

    public virtual DbSet<ApprovalRequest> ApprovalRequests { get; set; }

    public virtual DbSet<ApprovalRequestDetail> ApprovalRequestDetails { get; set; }

    public virtual DbSet<ApprovalRequestDetailSnc> ApprovalRequestDetailSncs { get; set; }

    public virtual DbSet<ApprovalRequestSnc> ApprovalRequestSncs { get; set; }

    public virtual DbSet<ApprovalconfigMember> ApprovalconfigMembers { get; set; }

    public virtual DbSet<ApprovalrequestdetailInfo> ApprovalrequestdetailInfos { get; set; }

    public virtual DbSet<ApprovalrequestdetailInfoSnc> ApprovalrequestdetailInfoSncs { get; set; }

    public virtual DbSet<AuthCredential> AuthCredentials { get; set; }

    public virtual DbSet<BarcodeActionMapping> BarcodeActionMappings { get; set; }

    public virtual DbSet<BeginDay> BeginDays { get; set; }

    public virtual DbSet<BeginDaySnc> BeginDaySncs { get; set; }

    public virtual DbSet<BusinessUnit> BusinessUnits { get; set; }

    public virtual DbSet<BusinessUnitAttribute> BusinessUnitAttributes { get; set; }

    public virtual DbSet<BusinessUnitPlu> BusinessUnitPlus { get; set; }

    public virtual DbSet<BusinessunitApplisetting> BusinessunitApplisettings { get; set; }

    public virtual DbSet<CallCycle> CallCycles { get; set; }

    public virtual DbSet<CallCycleDetail> CallCycleDetails { get; set; }

    public virtual DbSet<CallCycleUserHelper> CallCycleUserHelpers { get; set; }

    public virtual DbSet<CallcycleDetailsSnc> CallcycleDetailsSncs { get; set; }

    public virtual DbSet<ChartsDatum> ChartsData { get; set; }

    public virtual DbSet<CheckLoadDetailsSnc> CheckLoadDetailsSncs { get; set; }

    public virtual DbSet<CheckLoadSnc> CheckLoadSncs { get; set; }

    public virtual DbSet<CodeSequence> CodeSequences { get; set; }

    public virtual DbSet<Codesc> Codescs { get; set; }

    public virtual DbSet<CodescLabel> CodescLabels { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractCondition> ContractConditions { get; set; }

    public virtual DbSet<ContractTerm> ContractTerms { get; set; }

    public virtual DbSet<ContractTermV> ContractTermVs { get; set; }

    public virtual DbSet<Creditdebitnote> Creditdebitnotes { get; set; }

    public virtual DbSet<CreditdebitnoteInvoice> CreditdebitnoteInvoices { get; set; }

    public virtual DbSet<CrossTableId> CrossTableIds { get; set; }

    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }

    public virtual DbSet<CustomProperty> CustomProperties { get; set; }

    public virtual DbSet<CustomerAddressSnc> CustomerAddressSncs { get; set; }

    public virtual DbSet<CustomerAssetSnc> CustomerAssetSncs { get; set; }

    public virtual DbSet<CustomerBillShipSnc> CustomerBillShipSncs { get; set; }

    public virtual DbSet<CustomerFinanceSnc> CustomerFinanceSncs { get; set; }

    public virtual DbSet<CustomerPlu> CustomerPlus { get; set; }

    public virtual DbSet<CustomerPlusSnc> CustomerPlusSncs { get; set; }

    public virtual DbSet<CustomerSnc> CustomerSncs { get; set; }

    public virtual DbSet<CustomerSurveySnc> CustomerSurveySncs { get; set; }

    public virtual DbSet<CustomerTargetSnc> CustomerTargetSncs { get; set; }

    public virtual DbSet<DataCollectionDetailsSnc> DataCollectionDetailsSncs { get; set; }

    public virtual DbSet<DataCollectionSnc> DataCollectionSncs { get; set; }

    public virtual DbSet<DataInfoSnc> DataInfoSncs { get; set; }

    public virtual DbSet<DateHelper> DateHelpers { get; set; }

    public virtual DbSet<DeliveryDetailsSnc> DeliveryDetailsSncs { get; set; }

    public virtual DbSet<DeliveryDetailsToBeDeleted> DeliveryDetailsToBeDeleteds { get; set; }

    public virtual DbSet<DeliverySnc> DeliverySncs { get; set; }

    public virtual DbSet<DeliveryToBeDeleted> DeliveryToBeDeleteds { get; set; }

    public virtual DbSet<Display> Displays { get; set; }

    public virtual DbSet<DownloadLog> DownloadLogs { get; set; }

    public virtual DbSet<DueInvoice> DueInvoices { get; set; }

    public virtual DbSet<DueTransSnc> DueTransSncs { get; set; }

    public virtual DbSet<DynamicQuery> DynamicQueries { get; set; }

    public virtual DbSet<DynamicQueryTemp> DynamicQueryTemps { get; set; }

    public virtual DbSet<EmployeeSnc> EmployeeSncs { get; set; }

    public virtual DbSet<EndOfDaySnc> EndOfDaySncs { get; set; }

    public virtual DbSet<EodExpensesSnc> EodExpensesSncs { get; set; }

    public virtual DbSet<EodGpsSnc> EodGpsSncs { get; set; }

    public virtual DbSet<EodNoneServicedSnc> EodNoneServicedSncs { get; set; }

    public virtual DbSet<ExpClientacc> ExpClientaccs { get; set; }

    public virtual DbSet<ExpClientaccCash> ExpClientaccCashes { get; set; }

    public virtual DbSet<ExpClientaccCheck> ExpClientaccChecks { get; set; }

    public virtual DbSet<ExpFmImportsqlschdatum> ExpFmImportsqlschdata { get; set; }

    public virtual DbSet<ExpImImportsqlSalesAV> ExpImImportsqlSalesAVs { get; set; }

    public virtual DbSet<ExpImImportsqlSalesBV> ExpImImportsqlSalesBVs { get; set; }

    public virtual DbSet<ExpImImportsqlSalesLrqA> ExpImImportsqlSalesLrqAs { get; set; }

    public virtual DbSet<ExpImImportsqlSalesLrqB> ExpImImportsqlSalesLrqBs { get; set; }

    public virtual DbSet<ExpXxVansalsDriverRtnF> ExpXxVansalsDriverRtnFs { get; set; }

    public virtual DbSet<ExpXxVansalsIntgrInvoiceHV> ExpXxVansalsIntgrInvoiceHVs { get; set; }

    public virtual DbSet<ExpXxVansalsIntgrInvoiceLV> ExpXxVansalsIntgrInvoiceLVs { get; set; }

    public virtual DbSet<ExpXxVansalsTrxToDriverV> ExpXxVansalsTrxToDriverVs { get; set; }

    public virtual DbSet<ExpXxkfmVansalsIntgCustInvHV> ExpXxkfmVansalsIntgCustInvHVs { get; set; }

    public virtual DbSet<ExpXxkfmVansalsIntgCustInvLV> ExpXxkfmVansalsIntgCustInvLVs { get; set; }

    public virtual DbSet<ExpmFmImportsqldatum> ExpmFmImportsqldata { get; set; }

    public virtual DbSet<ExpmImImportsqlsalesA> ExpmImImportsqlsalesAs { get; set; }

    public virtual DbSet<ExpmImImportsqlsalesB> ExpmImImportsqlsalesBs { get; set; }

    public virtual DbSet<ExpmImRetVdra> ExpmImRetVdras { get; set; }

    public virtual DbSet<ExpmImRetVdrb> ExpmImRetVdrbs { get; set; }

    public virtual DbSet<ExpmImRetVdrc> ExpmImRetVdrcs { get; set; }

    public virtual DbSet<ExportBatch> ExportBatches { get; set; }

    public virtual DbSet<FamilyCodesc> FamilyCodescs { get; set; }

    public virtual DbSet<FmImportsqlschdatum> FmImportsqlschdata { get; set; }

    public virtual DbSet<GeoFence> GeoFences { get; set; }

    public virtual DbSet<GeoFenceDetail> GeoFenceDetails { get; set; }

    public virtual DbSet<GeoLocation> GeoLocations { get; set; }

    public virtual DbSet<GeoTag> GeoTags { get; set; }

    public virtual DbSet<GeoTagRepV> GeoTagRepVs { get; set; }

    public virtual DbSet<GeoTagSnc> GeoTagSncs { get; set; }

    public virtual DbSet<Geofence1> Geofences { get; set; }

    public virtual DbSet<GeofencePoint> GeofencePoints { get; set; }

    public virtual DbSet<GetSeqFromOperationsV> GetSeqFromOperationsVs { get; set; }

    public virtual DbSet<GlobalInfo> GlobalInfos { get; set; }

    public virtual DbSet<HcustTransSnc> HcustTransSncs { get; set; }

    public virtual DbSet<ImagesLocation> ImagesLocations { get; set; }

    public virtual DbSet<ImpBankV> ImpBankVs { get; set; }

    public virtual DbSet<ImpCurrencyRateV> ImpCurrencyRateVs { get; set; }

    public virtual DbSet<ImpCurrencyV> ImpCurrencyVs { get; set; }

    public virtual DbSet<ImpDriverXl> ImpDriverXls { get; set; }

    public virtual DbSet<ImpDueInvoiceV> ImpDueInvoiceVs { get; set; }

    public virtual DbSet<ImpDueInvoiceV20240709> ImpDueInvoiceV20240709s { get; set; }

    public virtual DbSet<ImpItemFinanceV> ImpItemFinanceVs { get; set; }

    public virtual DbSet<ImpItemUomV> ImpItemUomVs { get; set; }

    public virtual DbSet<ImpItemWarehouseV> ImpItemWarehouseVs { get; set; }

    public virtual DbSet<ImpPriceListV> ImpPriceListVs { get; set; }

    public virtual DbSet<ImpProductV> ImpProductVs { get; set; }

    public virtual DbSet<ImpReceiptInvoiceNbV> ImpReceiptInvoiceNbVs { get; set; }

    public virtual DbSet<ImpRoute> ImpRoutes { get; set; }

    public virtual DbSet<ImpThirdpartyFinanceV> ImpThirdpartyFinanceVs { get; set; }

    public virtual DbSet<ImpThirdpartySiteV> ImpThirdpartySiteVs { get; set; }

    public virtual DbSet<ImpThirdpartyV> ImpThirdpartyVs { get; set; }

    public virtual DbSet<ImpThirdpartycategoryFamilyV> ImpThirdpartycategoryFamilyVs { get; set; }

    public virtual DbSet<ImpThirdpartycategoryFamilyValuesV> ImpThirdpartycategoryFamilyValuesVs { get; set; }

    public virtual DbSet<ImpUomV1> ImpUomV1s { get; set; }

    public virtual DbSet<ImpUserThirdpartySiteV> ImpUserThirdpartySiteVs { get; set; }

    public virtual DbSet<ImpUserWarehouseV> ImpUserWarehouseVs { get; set; }

    public virtual DbSet<ImpUsersV> ImpUsersVs { get; set; }

    public virtual DbSet<ImpWarehouseV> ImpWarehouseVs { get; set; }

    public virtual DbSet<ImpXlsCashvan> ImpXlsCashvans { get; set; }

    public virtual DbSet<ImpXlsCashvanItem> ImpXlsCashvanItems { get; set; }

    public virtual DbSet<ImpXlsCuSalesman> ImpXlsCuSalesmen { get; set; }

    public virtual DbSet<ImpXlsDriver> ImpXlsDrivers { get; set; }

    public virtual DbSet<ImpXlsNespSmItem> ImpXlsNespSmItems { get; set; }

    public virtual DbSet<ImpXlsProductSmItem> ImpXlsProductSmItems { get; set; }

    public virtual DbSet<ImpXlsRogersItem> ImpXlsRogersItems { get; set; }

    public virtual DbSet<ImpXlsSalesman> ImpXlsSalesmen { get; set; }

    public virtual DbSet<Inspection> Inspections { get; set; }

    public virtual DbSet<InspectionEmployeeSnc> InspectionEmployeeSncs { get; set; }

    public virtual DbSet<InspectionList> InspectionLists { get; set; }

    public virtual DbSet<InspectionListSnc> InspectionListSncs { get; set; }

    public virtual DbSet<InspectionSnc> InspectionSncs { get; set; }

    public virtual DbSet<InspectionSurvey> InspectionSurveys { get; set; }

    public virtual DbSet<InspectionSurveySnc> InspectionSurveySncs { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<Inventory1> Inventories1 { get; set; }

    public virtual DbSet<InventoryCriteriaWmsSnc> InventoryCriteriaWmsSncs { get; set; }

    public virtual DbSet<InventoryDetail> InventoryDetails { get; set; }

    public virtual DbSet<InventoryDetailsSnc> InventoryDetailsSncs { get; set; }

    public virtual DbSet<InventoryDetailsWmsSnc> InventoryDetailsWmsSncs { get; set; }

    public virtual DbSet<InventoryHeader> InventoryHeaders { get; set; }

    public virtual DbSet<InventoryItem> InventoryItems { get; set; }

    public virtual DbSet<InventoryLinePhysicallocation> InventoryLinePhysicallocations { get; set; }

    public virtual DbSet<InventoryLineThirdpartySite> InventoryLineThirdpartySites { get; set; }

    public virtual DbSet<InventorySerialLotWmsSnc> InventorySerialLotWmsSncs { get; set; }

    public virtual DbSet<InventorySnc> InventorySncs { get; set; }

    public virtual DbSet<InventoryWmsSnc> InventoryWmsSncs { get; set; }

    public virtual DbSet<InventoryheaderItem> InventoryheaderItems { get; set; }

    public virtual DbSet<InventorystatusTransition> InventorystatusTransitions { get; set; }

    public virtual DbSet<InventorystatusTransitionProfile> InventorystatusTransitionProfiles { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemApi> ItemApis { get; set; }

    public virtual DbSet<ItemCategoryFamilyV> ItemCategoryFamilyVs { get; set; }

    public virtual DbSet<ItemCategoryHierarchyV> ItemCategoryHierarchyVs { get; set; }

    public virtual DbSet<ItemCategoryValue> ItemCategoryValues { get; set; }

    public virtual DbSet<ItemCategoryValueBrand> ItemCategoryValueBrands { get; set; }

    public virtual DbSet<ItemCategoryValueBrandSsfamily> ItemCategoryValueBrandSsfamilies { get; set; }

    public virtual DbSet<ItemCategoryValueCategoryBarcode> ItemCategoryValueCategoryBarcodes { get; set; }

    public virtual DbSet<ItemCategoryValueFamily> ItemCategoryValueFamilies { get; set; }

    public virtual DbSet<ItemCategoryValueGrossWeightBox> ItemCategoryValueGrossWeightBoxes { get; set; }

    public virtual DbSet<ItemCategoryValueGrossWeightPc> ItemCategoryValueGrossWeightPcs { get; set; }

    public virtual DbSet<ItemCategoryValueGroupV> ItemCategoryValueGroupVs { get; set; }

    public virtual DbSet<ItemCategoryValueNetVolumeBox> ItemCategoryValueNetVolumeBoxes { get; set; }

    public virtual DbSet<ItemCategoryValueNetVolumePc> ItemCategoryValueNetVolumePcs { get; set; }

    public virtual DbSet<ItemCategoryValueNetWeightBox> ItemCategoryValueNetWeightBoxes { get; set; }

    public virtual DbSet<ItemCategoryValueNetWeightPc> ItemCategoryValueNetWeightPcs { get; set; }

    public virtual DbSet<ItemCategoryValueProductionInfo> ItemCategoryValueProductionInfos { get; set; }

    public virtual DbSet<ItemCategoryValueSsfamily> ItemCategoryValueSsfamilies { get; set; }

    public virtual DbSet<ItemCategoryValueSstype> ItemCategoryValueSstypes { get; set; }

    public virtual DbSet<ItemCategoryValueSubfamily> ItemCategoryValueSubfamilies { get; set; }

    public virtual DbSet<ItemCategoryValueSubtype> ItemCategoryValueSubtypes { get; set; }

    public virtual DbSet<ItemCategoryValueType> ItemCategoryValueTypes { get; set; }

    public virtual DbSet<ItemFinance> ItemFinances { get; set; }

    public virtual DbSet<ItemList> ItemLists { get; set; }

    public virtual DbSet<ItemListDetail> ItemListDetails { get; set; }

    public virtual DbSet<ItemListDetailSnc> ItemListDetailSncs { get; set; }

    public virtual DbSet<ItemListSnc> ItemListSncs { get; set; }

    public virtual DbSet<ItemLotDate> ItemLotDates { get; set; }

    public virtual DbSet<ItemMsl> ItemMsls { get; set; }

    public virtual DbSet<ItemMslDetail> ItemMslDetails { get; set; }

    public virtual DbSet<ItemMslGl> ItemMslGls { get; set; }

    public virtual DbSet<ItemMslThp> ItemMslThps { get; set; }

    public virtual DbSet<ItemPhoto> ItemPhotos { get; set; }

    public virtual DbSet<ItemQuotaGroup> ItemQuotaGroups { get; set; }

    public virtual DbSet<ItemTax> ItemTaxes { get; set; }

    public virtual DbSet<ItemUom> ItemUoms { get; set; }

    public virtual DbSet<ItemUomAdditionalInfo> ItemUomAdditionalInfos { get; set; }

    public virtual DbSet<ItemUomBarcode> ItemUomBarcodes { get; set; }

    public virtual DbSet<ItemWarehouse> ItemWarehouses { get; set; }

    public virtual DbSet<ItemWarehouseCalculated> ItemWarehouseCalculateds { get; set; }

    public virtual DbSet<ItemWarehouseDetail> ItemWarehouseDetails { get; set; }

    public virtual DbSet<ItemWarehouseHistory> ItemWarehouseHistories { get; set; }

    public virtual DbSet<ItemcategoryFamily> ItemcategoryFamilies { get; set; }

    public virtual DbSet<ItemcategoryFamilyValue> ItemcategoryFamilyValues { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueBrand> ItemcategoryFamilyValueBrands { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueBrandSsfamily> ItemcategoryFamilyValueBrandSsfamilies { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueBrandSsfamilyOld> ItemcategoryFamilyValueBrandSsfamilyOlds { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueCategoryBarcode> ItemcategoryFamilyValueCategoryBarcodes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueFamily> ItemcategoryFamilyValueFamilies { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueGrossWeightBox> ItemcategoryFamilyValueGrossWeightBoxes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueGrossWeightPc> ItemcategoryFamilyValueGrossWeightPcs { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueNetVolumeBox> ItemcategoryFamilyValueNetVolumeBoxes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueNetVolumePc> ItemcategoryFamilyValueNetVolumePcs { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueNetWeightBox> ItemcategoryFamilyValueNetWeightBoxes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueNetWeightPc> ItemcategoryFamilyValueNetWeightPcs { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueProductionInfo> ItemcategoryFamilyValueProductionInfos { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueSsfamily> ItemcategoryFamilyValueSsfamilies { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueSstype> ItemcategoryFamilyValueSstypes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueSubfamily> ItemcategoryFamilyValueSubfamilies { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueSubtype> ItemcategoryFamilyValueSubtypes { get; set; }

    public virtual DbSet<ItemcategoryFamilyValueType> ItemcategoryFamilyValueTypes { get; set; }

    public virtual DbSet<ItemcategoryGroup> ItemcategoryGroups { get; set; }

    public virtual DbSet<ItemcategoryTypeTreeV> ItemcategoryTypeTreeVs { get; set; }

    public virtual DbSet<ItemcategoryTypeV> ItemcategoryTypeVs { get; set; }

    public virtual DbSet<ItemcategoryValueLink> ItemcategoryValueLinks { get; set; }

    public virtual DbSet<ItemcategoryValueLinkV> ItemcategoryValueLinkVs { get; set; }

    public virtual DbSet<Itemcontainer> Itemcontainers { get; set; }

    public virtual DbSet<ItemcontainerDetail> ItemcontainerDetails { get; set; }

    public virtual DbSet<ItemcontainerThpCategoryValue> ItemcontainerThpCategoryValues { get; set; }

    public virtual DbSet<ItmThpTransactiontype> ItmThpTransactiontypes { get; set; }

    public virtual DbSet<ItmThpsUomTransactiontype> ItmThpsUomTransactiontypes { get; set; }

    public virtual DbSet<ItmThpsUomTransactiontypeException> ItmThpsUomTransactiontypeExceptions { get; set; }

    public virtual DbSet<ItmThpsUomTransactiontypeV> ItmThpsUomTransactiontypeVs { get; set; }

    public virtual DbSet<JsonQueryLog> JsonQueryLogs { get; set; }

    public virtual DbSet<Listprice> Listprices { get; set; }

    public virtual DbSet<ListpriceItem> ListpriceItems { get; set; }

    public virtual DbSet<ListpriceItemException> ListpriceItemExceptions { get; set; }

    public virtual DbSet<ListpriceThirdpartyGroup> ListpriceThirdpartyGroups { get; set; }

    public virtual DbSet<ListpriceThirdpartySite> ListpriceThirdpartySites { get; set; }

    public virtual DbSet<ListpriceUser> ListpriceUsers { get; set; }

    public virtual DbSet<LoadRequest190af438eba847d3> LoadRequest190af438eba847d3s { get; set; }

    public virtual DbSet<LoadRequestDetailsSnc> LoadRequestDetailsSncs { get; set; }

    public virtual DbSet<LoadRequestSnc> LoadRequestSncs { get; set; }

    public virtual DbSet<MapMarkersType> MapMarkersTypes { get; set; }

    public virtual DbSet<MarketAlert> MarketAlerts { get; set; }

    public virtual DbSet<MarketAlertDetail> MarketAlertDetails { get; set; }

    public virtual DbSet<MarketAlertDetailsSnc> MarketAlertDetailsSncs { get; set; }

    public virtual DbSet<MarketAlertSnc> MarketAlertSncs { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<MenuActionLog> MenuActionLogs { get; set; }

    public virtual DbSet<MenuActionLogV> MenuActionLogVs { get; set; }

    public virtual DbSet<MenuDetail> MenuDetails { get; set; }

    public virtual DbSet<MenuFavorite> MenuFavorites { get; set; }

    public virtual DbSet<MenuPage> MenuPages { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MobileChart> MobileCharts { get; set; }

    public virtual DbSet<MobileChart1> MobileCharts1 { get; set; }

    public virtual DbSet<MobileGrid> MobileGrids { get; set; }

    public virtual DbSet<MobileJob> MobileJobs { get; set; }

    public virtual DbSet<MobileLog> MobileLogs { get; set; }

    public virtual DbSet<MobileMenu> MobileMenus { get; set; }

    public virtual DbSet<MobileProfile> MobileProfiles { get; set; }

    public virtual DbSet<MobileStoredProcedure> MobileStoredProcedures { get; set; }

    public virtual DbSet<MobileStyle> MobileStyles { get; set; }

    public virtual DbSet<MobilemenusProfile> MobilemenusProfiles { get; set; }

    public virtual DbSet<ModifiedField> ModifiedFields { get; set; }

    public virtual DbSet<ModifierLineElligible> ModifierLineElligibles { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<Movement> Movements { get; set; }

    public virtual DbSet<MovementItem> MovementItems { get; set; }

    public virtual DbSet<MovementItemDetail> MovementItemDetails { get; set; }

    public virtual DbSet<MovementItemHistory> MovementItemHistories { get; set; }

    public virtual DbSet<MovementLink> MovementLinks { get; set; }

    public virtual DbSet<MovementSequence> MovementSequences { get; set; }

    public virtual DbSet<MovementStatusHistory> MovementStatusHistories { get; set; }

    public virtual DbSet<MovementSummary> MovementSummaries { get; set; }

    public virtual DbSet<MovementType> MovementTypes { get; set; }

    public virtual DbSet<MovementitemquotaMvt> MovementitemquotaMvts { get; set; }

    public virtual DbSet<Movementitemquotum> Movementitemquota { get; set; }

    public virtual DbSet<Movementstatus> Movementstatuses { get; set; }

    public virtual DbSet<MovementstatusTransition> MovementstatusTransitions { get; set; }

    public virtual DbSet<MovementstatusTransitionBu> MovementstatusTransitionBus { get; set; }

    public virtual DbSet<MovementstatusTransitionProfile> MovementstatusTransitionProfiles { get; set; }

    public virtual DbSet<MovementstatusUiGenericpage> MovementstatusUiGenericpages { get; set; }

    public virtual DbSet<Movementtype1> Movementtypes { get; set; }

    public virtual DbSet<Movementtype2> Movementtypes1 { get; set; }

    public virtual DbSet<MovementtypeOption> MovementtypeOptions { get; set; }

    public virtual DbSet<MovementtypeUiGenericpage> MovementtypeUiGenericpages { get; set; }

    public virtual DbSet<NetSale> NetSales { get; set; }

    public virtual DbSet<Newmenu> Newmenus { get; set; }

    public virtual DbSet<NoDeliveryReasonSnc> NoDeliveryReasonSncs { get; set; }

    public virtual DbSet<NoReasonsSnc> NoReasonsSncs { get; set; }

    public virtual DbSet<NoVisit> NoVisits { get; set; }

    public virtual DbSet<NotifyDevice> NotifyDevices { get; set; }

    public virtual DbSet<Operation> Operations { get; set; }

    public virtual DbSet<OperationBatch> OperationBatches { get; set; }

    public virtual DbSet<OperationBatchItem> OperationBatchItems { get; set; }

    public virtual DbSet<OperationBatchItemDetail> OperationBatchItemDetails { get; set; }

    public virtual DbSet<OperationItem> OperationItems { get; set; }

    public virtual DbSet<OperationItemDetail> OperationItemDetails { get; set; }

    public virtual DbSet<OperationPackaging> OperationPackagings { get; set; }

    public virtual DbSet<OperationTransaction> OperationTransactions { get; set; }

    public virtual DbSet<Operationstatus> Operationstatuses { get; set; }

    public virtual DbSet<Operationtype> Operationtypes { get; set; }

    public virtual DbSet<OperationtypeOption> OperationtypeOptions { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }

    public virtual DbSet<PaymentDetailsSnc> PaymentDetailsSncs { get; set; }

    public virtual DbSet<PaymentHist> PaymentHists { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<PaymentImage> PaymentImages { get; set; }

    public virtual DbSet<PaymentImagesSnc> PaymentImagesSncs { get; set; }

    public virtual DbSet<PaymentInvoice> PaymentInvoices { get; set; }

    public virtual DbSet<PaymentSnc> PaymentSncs { get; set; }

    public virtual DbSet<PaymentStatusHistory> PaymentStatusHistories { get; set; }

    public virtual DbSet<PaymentTransHist> PaymentTransHists { get; set; }

    public virtual DbSet<PaymentTransHistory> PaymentTransHistories { get; set; }

    public virtual DbSet<PaymentTransSnc> PaymentTransSncs { get; set; }

    public virtual DbSet<Paymentstatus> Paymentstatuses { get; set; }

    public virtual DbSet<Paymentterm> Paymentterms { get; set; }

    public virtual DbSet<PaymenttermDetail> PaymenttermDetails { get; set; }

    public virtual DbSet<Paymenttype> Paymenttypes { get; set; }

    public virtual DbSet<PaymenttypeSequence> PaymenttypeSequences { get; set; }

    public virtual DbSet<PhysicalLocation> PhysicalLocations { get; set; }

    public virtual DbSet<PhysicalLocationAdditionalInfo> PhysicalLocationAdditionalInfos { get; set; }

    public virtual DbSet<PhysicalLocationOdometer> PhysicalLocationOdometers { get; set; }

    public virtual DbSet<Planogram> Planograms { get; set; }

    public virtual DbSet<PlanogramDetail> PlanogramDetails { get; set; }

    public virtual DbSet<PlanogramThp> PlanogramThps { get; set; }

    public virtual DbSet<PlanogramUser> PlanogramUsers { get; set; }

    public virtual DbSet<PostUpload> PostUploads { get; set; }

    public virtual DbSet<PostUpload1> PostUploads1 { get; set; }

    public virtual DbSet<Printing> Printings { get; set; }

    public virtual DbSet<Printing1> Printings1 { get; set; }

    public virtual DbSet<PrintingLogSnc> PrintingLogSncs { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductBarcodeWmsSnc> ProductBarcodeWmsSncs { get; set; }

    public virtual DbSet<ProductCategoryFamilyValue> ProductCategoryFamilyValues { get; set; }

    public virtual DbSet<ProductCategoryValue> ProductCategoryValues { get; set; }

    public virtual DbSet<ProductTargetSnc> ProductTargetSncs { get; set; }

    public virtual DbSet<ProductUom> ProductUoms { get; set; }

    public virtual DbSet<ProductWmsSnc> ProductWmsSncs { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<ProfileAppliSetting> ProfileAppliSettings { get; set; }

    public virtual DbSet<ProfileBusinessUnit> ProfileBusinessUnits { get; set; }

    public virtual DbSet<ProfileMenu> ProfileMenus { get; set; }

    public virtual DbSet<ProfileMenuDetail> ProfileMenuDetails { get; set; }

    public virtual DbSet<PromotionCustomersSnc> PromotionCustomersSncs { get; set; }

    public virtual DbSet<PromotionDetail> PromotionDetails { get; set; }

    public virtual DbSet<PromotionDetailQualifier> PromotionDetailQualifiers { get; set; }

    public virtual DbSet<PromotionGive> PromotionGives { get; set; }

    public virtual DbSet<PromotionLine> PromotionLines { get; set; }

    public virtual DbSet<PromotionMaster> PromotionMasters { get; set; }

    public virtual DbSet<PromotionMasterQualifier> PromotionMasterQualifiers { get; set; }

    public virtual DbSet<PromotionQualifier> PromotionQualifiers { get; set; }

    public virtual DbSet<PromotionsliceBuy> PromotionsliceBuys { get; set; }

    public virtual DbSet<PromotionsliceBuyDetail> PromotionsliceBuyDetails { get; set; }

    public virtual DbSet<PromotionsliceGet> PromotionsliceGets { get; set; }

    public virtual DbSet<PromotionsliceGetDetail> PromotionsliceGetDetails { get; set; }

    public virtual DbSet<ProspectThirdpartysite> ProspectThirdpartysites { get; set; }

    public virtual DbSet<PushNotification> PushNotifications { get; set; }

    public virtual DbSet<QlikDashboard> QlikDashboards { get; set; }

    public virtual DbSet<QlikDashboardUser> QlikDashboardUsers { get; set; }

    public virtual DbSet<QlikReload> QlikReloads { get; set; }

    public virtual DbSet<QueryDesign> QueryDesigns { get; set; }

    public virtual DbSet<QueryDesignDetail> QueryDesignDetails { get; set; }

    public virtual DbSet<RebuildIndexesV> RebuildIndexesVs { get; set; }

    public virtual DbSet<ReceiptInvoiceNb> ReceiptInvoiceNbs { get; set; }

    public virtual DbSet<ReceiptInvoiceNbSnc> ReceiptInvoiceNbSncs { get; set; }

    public virtual DbSet<Reconciliation2ef4aa2268b94cbb> Reconciliation2ef4aa2268b94cbbs { get; set; }

    public virtual DbSet<Reconciliation5e56f08ace6f4af2> Reconciliation5e56f08ace6f4af2s { get; set; }

    public virtual DbSet<Reconciliation66192a342182445e> Reconciliation66192a342182445es { get; set; }

    public virtual DbSet<Reconciliation6dbda6e61c9c4dc6> Reconciliation6dbda6e61c9c4dc6s { get; set; }

    public virtual DbSet<Reconciliation76e14e50e9b54fe6> Reconciliation76e14e50e9b54fe6s { get; set; }

    public virtual DbSet<Reconciliation83b5b75428f64129> Reconciliation83b5b75428f64129s { get; set; }

    public virtual DbSet<Reconciliation840d3606df3e4329> Reconciliation840d3606df3e4329s { get; set; }

    public virtual DbSet<Reconciliation88ea321c891241ca> Reconciliation88ea321c891241cas { get; set; }

    public virtual DbSet<Reconciliation9a7537ec870941b7> Reconciliation9a7537ec870941b7s { get; set; }

    public virtual DbSet<ReconciliationDetailSnc> ReconciliationDetailSncs { get; set; }

    public virtual DbSet<ReconciliationSnc> ReconciliationSncs { get; set; }

    public virtual DbSet<Reconciliationa5b639d4c6c34e6d> Reconciliationa5b639d4c6c34e6ds { get; set; }

    public virtual DbSet<Reconciliationb5f2cfb5dffd45d1> Reconciliationb5f2cfb5dffd45d1s { get; set; }

    public virtual DbSet<Reconciliatione9a2987d9d1f40b1> Reconciliatione9a2987d9d1f40b1s { get; set; }

    public virtual DbSet<Reconciliationfb0c36cd3d5d4244> Reconciliationfb0c36cd3d5d4244s { get; set; }

    public virtual DbSet<RegisteredDevice> RegisteredDevices { get; set; }

    public virtual DbSet<RegisteredDevicesSnc> RegisteredDevicesSncs { get; set; }

    public virtual DbSet<ReleaseVersion> ReleaseVersions { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportMail> ReportMails { get; set; }

    public virtual DbSet<ReportRequest> ReportRequests { get; set; }

    public virtual DbSet<ReportSchedule> ReportSchedules { get; set; }

    public virtual DbSet<Models.Route> Routes { get; set; }

    public virtual DbSet<Route1> Routes1 { get; set; }

    public virtual DbSet<RouteGeoLocation> RouteGeoLocations { get; set; }

    public virtual DbSet<RouteTask> RouteTasks { get; set; }

    public virtual DbSet<RouteTaskSnc> RouteTaskSncs { get; set; }

    public virtual DbSet<RouteThirdpartySite> RouteThirdpartySites { get; set; }

    public virtual DbSet<RouteTransaction> RouteTransactions { get; set; }

    public virtual DbSet<RouteWarehouse> RouteWarehouses { get; set; }

    public virtual DbSet<Routestatus> Routestatuses { get; set; }

    public virtual DbSet<RoutestatusTransition> RoutestatusTransitions { get; set; }

    public virtual DbSet<SalesAdjustmentSnc> SalesAdjustmentSncs { get; set; }

    public virtual DbSet<SalesAsset> SalesAssets { get; set; }

    public virtual DbSet<SalesAssetSnc> SalesAssetSncs { get; set; }

    public virtual DbSet<SalesDetailsCfrSnc> SalesDetailsCfrSncs { get; set; }

    public virtual DbSet<SalesDetailsHistory> SalesDetailsHistories { get; set; }

    public virtual DbSet<SalesDetailsSnc> SalesDetailsSncs { get; set; }

    public virtual DbSet<SalesDetailsWrk> SalesDetailsWrks { get; set; }

    public virtual DbSet<SalesDetailsWrkSnc> SalesDetailsWrkSncs { get; set; }

    public virtual DbSet<SalesHistory> SalesHistories { get; set; }

    public virtual DbSet<SalesHistory1> SalesHistories1 { get; set; }

    public virtual DbSet<SalesHistoryDetail> SalesHistoryDetails { get; set; }

    public virtual DbSet<SalesPromotion> SalesPromotions { get; set; }

    public virtual DbSet<SalesPromotionSnc> SalesPromotionSncs { get; set; }

    public virtual DbSet<SalesSnc> SalesSncs { get; set; }

    public virtual DbSet<SalesWrk> SalesWrks { get; set; }

    public virtual DbSet<SalesassetAtiPicture> SalesassetAtiPictures { get; set; }

    public virtual DbSet<SalesassetAtiPictureSnc> SalesassetAtiPictureSncs { get; set; }

    public virtual DbSet<SalesassetAtidPicture> SalesassetAtidPictures { get; set; }

    public virtual DbSet<SalesassetAtidPictureSnc> SalesassetAtidPictureSncs { get; set; }

    public virtual DbSet<SalesassetCategoryFamily> SalesassetCategoryFamilies { get; set; }

    public virtual DbSet<SalesassetCategoryFamilyValue> SalesassetCategoryFamilyValues { get; set; }

    public virtual DbSet<SalesassetCategoryGroup> SalesassetCategoryGroups { get; set; }

    public virtual DbSet<SalesassetCategoryValue> SalesassetCategoryValues { get; set; }

    public virtual DbSet<SalesassetHistory> SalesassetHistories { get; set; }

    public virtual DbSet<SalesassetHistorySnc> SalesassetHistorySncs { get; set; }

    public virtual DbSet<SalesassetInventory> SalesassetInventories { get; set; }

    public virtual DbSet<SalesassetInventoryDetail> SalesassetInventoryDetails { get; set; }

    public virtual DbSet<SalesassetInventoryDetailSnc> SalesassetInventoryDetailSncs { get; set; }

    public virtual DbSet<SalesassetInventorySnc> SalesassetInventorySncs { get; set; }

    public virtual DbSet<Salesman> Salesmen { get; set; }

    public virtual DbSet<SalesmanSnc> SalesmanSncs { get; set; }

    public virtual DbSet<SalesmanTargetSnc> SalesmanTargetSncs { get; set; }

    public virtual DbSet<ScreenConfig> ScreenConfigs { get; set; }

    public virtual DbSet<SdfCleanAction> SdfCleanActions { get; set; }

    public virtual DbSet<SearchCriterion> SearchCriteria { get; set; }

    public virtual DbSet<Sequence> Sequences { get; set; }

    public virtual DbSet<ServiceTicket> ServiceTickets { get; set; }

    public virtual DbSet<ServiceTicketDetail> ServiceTicketDetails { get; set; }

    public virtual DbSet<ServiceTicketDetailSnc> ServiceTicketDetailSncs { get; set; }

    public virtual DbSet<ServiceTicketSnc> ServiceTicketSncs { get; set; }

    public virtual DbSet<ServiceTicketStatusHistory> ServiceTicketStatusHistories { get; set; }

    public virtual DbSet<ServiceTicketStatusHistorySnc> ServiceTicketStatusHistorySncs { get; set; }

    public virtual DbSet<SignatureConfig> SignatureConfigs { get; set; }

    public virtual DbSet<SignatureConfigLine> SignatureConfigLines { get; set; }

    public virtual DbSet<SignatureDetail> SignatureDetails { get; set; }

    public virtual DbSet<SignatureDetailsSnc> SignatureDetailsSncs { get; set; }

    public virtual DbSet<SignatureInfoSnc> SignatureInfoSncs { get; set; }

    public virtual DbSet<Stand> Stands { get; set; }

    public virtual DbSet<StandsSnc> StandsSncs { get; set; }

    public virtual DbSet<Survey> Surveys { get; set; }

    public virtual DbSet<Survey2> Survey2s { get; set; }

    public virtual DbSet<Survey2BusinessUnit> Survey2BusinessUnits { get; set; }

    public virtual DbSet<Survey2Detail> Survey2Details { get; set; }

    public virtual DbSet<Survey2DetailStatusHistory> Survey2DetailStatusHistories { get; set; }

    public virtual DbSet<Survey2Question> Survey2Questions { get; set; }

    public virtual DbSet<Survey2Result> Survey2Results { get; set; }

    public virtual DbSet<Survey2ResultAnswer> Survey2ResultAnswers { get; set; }

    public virtual DbSet<Survey2ResultAnswerMulti> Survey2ResultAnswerMultis { get; set; }

    public virtual DbSet<Survey2ResultAnswerMultiSnc> Survey2ResultAnswerMultiSncs { get; set; }

    public virtual DbSet<Survey2ResultAnswerSnc> Survey2ResultAnswerSncs { get; set; }

    public virtual DbSet<Survey2ResultSnc> Survey2ResultSncs { get; set; }

    public virtual DbSet<Survey2Status> Survey2Statuses { get; set; }

    public virtual DbSet<Survey2answer> Survey2answers { get; set; }

    public virtual DbSet<Survey2answerDetail> Survey2answerDetails { get; set; }

    public virtual DbSet<Survey2detailPromotionType> Survey2detailPromotionTypes { get; set; }

    public virtual DbSet<Survey2exeanswerImage> Survey2exeanswerImages { get; set; }

    public virtual DbSet<Survey2exeanswerImageSnc> Survey2exeanswerImageSncs { get; set; }

    public virtual DbSet<Survey2questionDetail> Survey2questionDetails { get; set; }

    public virtual DbSet<SurveyCategorySnc> SurveyCategorySncs { get; set; }

    public virtual DbSet<SurveyItemSnc> SurveyItemSncs { get; set; }

    public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }

    public virtual DbSet<SurveyResult> SurveyResults { get; set; }

    public virtual DbSet<SurveyResultAnswer> SurveyResultAnswers { get; set; }

    public virtual DbSet<SurveyThirdparty> SurveyThirdparties { get; set; }

    public virtual DbSet<SurveyUser> SurveyUsers { get; set; }

    public virtual DbSet<Surveyanswer> Surveyanswers { get; set; }

    public virtual DbSet<SurveyanswerDetail> SurveyanswerDetails { get; set; }

    public virtual DbSet<SyncInfo> SyncInfos { get; set; }

    public virtual DbSet<SyncInfoSnc> SyncInfoSncs { get; set; }

    public virtual DbSet<SyncLog> SyncLogs { get; set; }

    public virtual DbSet<SyncReturntable> SyncReturntables { get; set; }

    public virtual DbSet<SystemOperator> SystemOperators { get; set; }

    public virtual DbSet<TableLock> TableLocks { get; set; }

    public virtual DbSet<Target> Targets { get; set; }

    public virtual DbSet<TargetAchieved> TargetAchieveds { get; set; }

    public virtual DbSet<TargetDatum> TargetData { get; set; }

    public virtual DbSet<TargetDetail> TargetDetails { get; set; }

    public virtual DbSet<TargetDetailspvt> TargetDetailspvts { get; set; }

    public virtual DbSet<TargetDetailspvtRepV> TargetDetailspvtRepVs { get; set; }

    public virtual DbSet<TargetDetailspvtYmvV> TargetDetailspvtYmvVs { get; set; }

    public virtual DbSet<Models.Task> Tasks { get; set; }

    public virtual DbSet<TaskDetail> TaskDetails { get; set; }

    public virtual DbSet<TaskMessageSnc> TaskMessageSncs { get; set; }

    public virtual DbSet<Tax> Taxes { get; set; }

    public virtual DbSet<TblItemcategoryCommonTree> TblItemcategoryCommonTrees { get; set; }

    public virtual DbSet<Template> Templates { get; set; }

    public virtual DbSet<TemplateItem> TemplateItems { get; set; }

    public virtual DbSet<TemplateThp> TemplateThps { get; set; }

    public virtual DbSet<TemplateUser> TemplateUsers { get; set; }

    public virtual DbSet<Thirdparty> Thirdparties { get; set; }

    public virtual DbSet<ThirdpartyAccountV> ThirdpartyAccountVs { get; set; }

    public virtual DbSet<ThirdpartyAdditionalInfo> ThirdpartyAdditionalInfos { get; set; }

    public virtual DbSet<ThirdpartyBillShip> ThirdpartyBillShips { get; set; }

    public virtual DbSet<ThirdpartyClassificationV> ThirdpartyClassificationVs { get; set; }

    public virtual DbSet<ThirdpartyFinance> ThirdpartyFinances { get; set; }

    public virtual DbSet<ThirdpartyGroupCategory> ThirdpartyGroupCategories { get; set; }

    public virtual DbSet<ThirdpartyGroupV> ThirdpartyGroupVs { get; set; }

    public virtual DbSet<ThirdpartyItem> ThirdpartyItems { get; set; }

    public virtual DbSet<ThirdpartyPaymentterm> ThirdpartyPaymentterms { get; set; }

    public virtual DbSet<ThirdpartyPaymethod> ThirdpartyPaymethods { get; set; }

    public virtual DbSet<ThirdpartySite> ThirdpartySites { get; set; }

    public virtual DbSet<ThirdpartySiteAdditionnalinfoKfm> ThirdpartySiteAdditionnalinfoKfms { get; set; }

    public virtual DbSet<ThirdpartySiteComment> ThirdpartySiteComments { get; set; }

    public virtual DbSet<ThirdpartySiteListpriceRoute> ThirdpartySiteListpriceRoutes { get; set; }

    public virtual DbSet<ThirdpartySiteOrdering> ThirdpartySiteOrderings { get; set; }

    public virtual DbSet<ThirdpartySiteVisitSchedule> ThirdpartySiteVisitSchedules { get; set; }

    public virtual DbSet<ThirdpartySiteVisitScheduleSnc> ThirdpartySiteVisitScheduleSncs { get; set; }

    public virtual DbSet<ThirdpartySpecialtiesV> ThirdpartySpecialtiesVs { get; set; }

    public virtual DbSet<ThirdpartycategoryFamily> ThirdpartycategoryFamilies { get; set; }

    public virtual DbSet<ThirdpartycategoryFamilyValue> ThirdpartycategoryFamilyValues { get; set; }

    public virtual DbSet<ThirdpartycategoryFamilyValuesVActivityGroup> ThirdpartycategoryFamilyValuesVActivityGroups { get; set; }

    public virtual DbSet<ThirdpartycategoryFamilyValuesVGroup> ThirdpartycategoryFamilyValuesVGroups { get; set; }

    public virtual DbSet<ThirdpartycategoryFamilyValuesVLine> ThirdpartycategoryFamilyValuesVLines { get; set; }

    public virtual DbSet<ThirdpartycategoryValue> ThirdpartycategoryValues { get; set; }

    public virtual DbSet<ThirdpartycategoryValueCustomerActivity> ThirdpartycategoryValueCustomerActivities { get; set; }

    public virtual DbSet<ThirdpartycategoryValueCustomerActivityGroup> ThirdpartycategoryValueCustomerActivityGroups { get; set; }

    public virtual DbSet<ThirdpartycategoryValueCustomerGroup> ThirdpartycategoryValueCustomerGroups { get; set; }

    public virtual DbSet<ThirdpartycategoryValueCustomerLine> ThirdpartycategoryValueCustomerLines { get; set; }

    public virtual DbSet<ThirdpartysitecategoryValue> ThirdpartysitecategoryValues { get; set; }

    public virtual DbSet<ThirdpartysitefinanceTax> ThirdpartysitefinanceTaxes { get; set; }

    public virtual DbSet<ThpTransactiontype> ThpTransactiontypes { get; set; }

    public virtual DbSet<ThpsInventory> ThpsInventories { get; set; }

    public virtual DbSet<ThpsInventoryDetail> ThpsInventoryDetails { get; set; }

    public virtual DbSet<ThpsInventoryHeader> ThpsInventoryHeaders { get; set; }

    public virtual DbSet<ThpsInventoryheaderGl> ThpsInventoryheaderGls { get; set; }

    public virtual DbSet<ThpsInventoryheaderItem> ThpsInventoryheaderItems { get; set; }

    public virtual DbSet<ThpsInventoryheaderThp> ThpsInventoryheaderThps { get; set; }

    public virtual DbSet<ThpsInventoryheaderUser> ThpsInventoryheaderUsers { get; set; }

    public virtual DbSet<ThpsInventoryheaderstatusTransition> ThpsInventoryheaderstatusTransitions { get; set; }

    public virtual DbSet<ThpsInventorystatusTransition> ThpsInventorystatusTransitions { get; set; }

    public virtual DbSet<ThpsItemcontainer> ThpsItemcontainers { get; set; }

    public virtual DbSet<ThpsIvhsTransitionBu> ThpsIvhsTransitionBus { get; set; }

    public virtual DbSet<ThpsIvhsTransitionProfile> ThpsIvhsTransitionProfiles { get; set; }

    public virtual DbSet<ThpsIvsTransitionBu> ThpsIvsTransitionBus { get; set; }

    public virtual DbSet<ThpsIvsTransitionProfile> ThpsIvsTransitionProfiles { get; set; }

    public virtual DbSet<ThpsSuggestedQtyV> ThpsSuggestedQtyVs { get; set; }

    public virtual DbSet<TmpUom> TmpUoms { get; set; }

    public virtual DbSet<TraceAppActivity> TraceAppActivities { get; set; }

    public virtual DbSet<TraceAppExport> TraceAppExports { get; set; }

    public virtual DbSet<TraceAppSql> TraceAppSqls { get; set; }

    public virtual DbSet<TraceAppWeb> TraceAppWebs { get; set; }

    public virtual DbSet<TraceDex> TraceDices { get; set; }

    public virtual DbSet<TraceSync> TraceSyncs { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransactionAmount> TransactionAmounts { get; set; }

    public virtual DbSet<TransactionBackup> TransactionBackups { get; set; }

    public virtual DbSet<TransactionConfig> TransactionConfigs { get; set; }

    public virtual DbSet<TransactionDelivery> TransactionDeliveries { get; set; }

    public virtual DbSet<TransactionDeliveryItem> TransactionDeliveryItems { get; set; }

    public virtual DbSet<TransactionItem> TransactionItems { get; set; }

    public virtual DbSet<TransactionItemBackup> TransactionItemBackups { get; set; }

    public virtual DbSet<TransactionItemDetail> TransactionItemDetails { get; set; }

    public virtual DbSet<TransactionItemPlu> TransactionItemPlus { get; set; }

    public virtual DbSet<TransactionItemPromotion> TransactionItemPromotions { get; set; }

    public virtual DbSet<TransactionLink> TransactionLinks { get; set; }

    public virtual DbSet<TransactionLinkDetail> TransactionLinkDetails { get; set; }

    public virtual DbSet<TransactionReason> TransactionReasons { get; set; }

    public virtual DbSet<TransactionStatusHistory> TransactionStatusHistories { get; set; }

    public virtual DbSet<TransactionStatusSnc> TransactionStatusSncs { get; set; }

    public virtual DbSet<TransactionTax> TransactionTaxes { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<TransactionTypeOption> TransactionTypeOptions { get; set; }

    public virtual DbSet<TransactionitemTax> TransactionitemTaxes { get; set; }

    public virtual DbSet<Transactionstatus> Transactionstatuses { get; set; }

    public virtual DbSet<TransactionstatusTransition> TransactionstatusTransitions { get; set; }

    public virtual DbSet<TransactionstatusTransitionBu> TransactionstatusTransitionBus { get; set; }

    public virtual DbSet<TransactionstatusTransitionProfile> TransactionstatusTransitionProfiles { get; set; }

    public virtual DbSet<TransactionstatusUiGenericpage> TransactionstatusUiGenericpages { get; set; }

    public virtual DbSet<Transactiontype1> Transactiontypes { get; set; }

    public virtual DbSet<TransactiontypeOption1> TransactiontypeOptions { get; set; }

    public virtual DbSet<TransactiontypeSequence> TransactiontypeSequences { get; set; }

    public virtual DbSet<TransactiontypeTax> TransactiontypeTaxes { get; set; }

    public virtual DbSet<TransactiontypeUiGenericpage> TransactiontypeUiGenericpages { get; set; }

    public virtual DbSet<Transactiontypestatus> Transactiontypestatuses { get; set; }

    public virtual DbSet<TransferDetailSnc> TransferDetailSncs { get; set; }

    public virtual DbSet<TransferOrderDetailsSnc> TransferOrderDetailsSncs { get; set; }

    public virtual DbSet<TransferOrderSnc> TransferOrderSncs { get; set; }

    public virtual DbSet<TransferSnc> TransferSncs { get; set; }

    public virtual DbSet<UiCodesc> UiCodescs { get; set; }

    public virtual DbSet<UiGenericPage> UiGenericPages { get; set; }

    public virtual DbSet<UiGenericPageAction> UiGenericPageActions { get; set; }

    public virtual DbSet<UiGenericPageActionArc> UiGenericPageActionArcs { get; set; }

    public virtual DbSet<UiGenericPageCriterion> UiGenericPageCriteria { get; set; }

    public virtual DbSet<UiInventory> UiInventories { get; set; }

    public virtual DbSet<UiMovement> UiMovements { get; set; }

    public virtual DbSet<UiMovementFunctionNouse> UiMovementFunctionNouses { get; set; }

    public virtual DbSet<UiMovementItem> UiMovementItems { get; set; }

    public virtual DbSet<UiPageHelp> UiPageHelps { get; set; }

    public virtual DbSet<UiTransaction> UiTransactions { get; set; }

    public virtual DbSet<UiTransactionItem> UiTransactionItems { get; set; }

    public virtual DbSet<UnitOfMesure> UnitOfMesures { get; set; }

    public virtual DbSet<Uom> Uoms { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAppliSetting> UserAppliSettings { get; set; }

    public virtual DbSet<UserBusinessUnit> UserBusinessUnits { get; set; }

    public virtual DbSet<UserConnectionInfo> UserConnectionInfos { get; set; }

    public virtual DbSet<UserCoordinate> UserCoordinates { get; set; }

    public virtual DbSet<UserDelegation> UserDelegations { get; set; }

    public virtual DbSet<UserDeviceInfo> UserDeviceInfos { get; set; }

    public virtual DbSet<UserDeviceInfoSnc> UserDeviceInfoSncs { get; set; }

    public virtual DbSet<UserDeviceLock> UserDeviceLocks { get; set; }

    public virtual DbSet<UserFinance> UserFinances { get; set; }

    public virtual DbSet<UserItemQuotaAllV> UserItemQuotaAllVs { get; set; }

    public virtual DbSet<UserItemQuotaDetail> UserItemQuotaDetails { get; set; }

    public virtual DbSet<UserItemQuotaGroup> UserItemQuotaGroups { get; set; }

    public virtual DbSet<UserItemQuotum> UserItemQuota { get; set; }

    public virtual DbSet<UserItemcategory> UserItemcategories { get; set; }

    public virtual DbSet<UserMobileProfile> UserMobileProfiles { get; set; }

    public virtual DbSet<UserPayment> UserPayments { get; set; }

    public virtual DbSet<UserPaymentDetail> UserPaymentDetails { get; set; }

    public virtual DbSet<UserPaymentLine> UserPaymentLines { get; set; }

    public virtual DbSet<UserProfile> UserProfiles { get; set; }

    public virtual DbSet<UserProfileV> UserProfileVs { get; set; }

    public virtual DbSet<UserQlikInfo> UserQlikInfos { get; set; }

    public virtual DbSet<UserSequenceWmsSnc> UserSequenceWmsSncs { get; set; }

    public virtual DbSet<UserThirdparty> UserThirdparties { get; set; }

    public virtual DbSet<UserThirdpartySite> UserThirdpartySites { get; set; }

    public virtual DbSet<UserThpsTransactiontype> UserThpsTransactiontypes { get; set; }

    public virtual DbSet<UserTransactiontype> UserTransactiontypes { get; set; }

    public virtual DbSet<UserWarehouse> UserWarehouses { get; set; }

    public virtual DbSet<UserWebSetting> UserWebSettings { get; set; }

    public virtual DbSet<Userpaymentstatus> Userpaymentstatuses { get; set; }

    public virtual DbSet<UserpaymentstatusHistory> UserpaymentstatusHistories { get; set; }

    public virtual DbSet<UserpaymentstatusTransition> UserpaymentstatusTransitions { get; set; }

    public virtual DbSet<UserpaymentstatusTransitionProfile> UserpaymentstatusTransitionProfiles { get; set; }

    public virtual DbSet<Userpaymenttype> Userpaymenttypes { get; set; }

    public virtual DbSet<UsersCalendar> UsersCalendars { get; set; }

    public virtual DbSet<UsersCalendarSnc> UsersCalendarSncs { get; set; }

    public virtual DbSet<VApiSession> VApiSessions { get; set; }

    public virtual DbSet<VCallCycle> VCallCycles { get; set; }

    public virtual DbSet<VCallCycleDetail> VCallCycleDetails { get; set; }

    public virtual DbSet<VCodescBank> VCodescBanks { get; set; }

    public virtual DbSet<VCodescCur> VCodescCurs { get; set; }

    public virtual DbSet<VCodescIbd> VCodescIbds { get; set; }

    public virtual DbSet<VCodescIgp> VCodescIgps { get; set; }

    public virtual DbSet<VCodescPaqp> VCodescPaqps { get; set; }

    public virtual DbSet<VCodescPlt> VCodescPlts { get; set; }

    public virtual DbSet<VCodescPrtype> VCodescPrtypes { get; set; }

    public virtual DbSet<VCodescPtp> VCodescPtps { get; set; }

    public virtual DbSet<VCodescRit> VCodescRits { get; set; }

    public virtual DbSet<VCodescSrdpt> VCodescSrdpts { get; set; }

    public virtual DbSet<VCollectionview> VCollectionviews { get; set; }

    public virtual DbSet<VCollectionviewForSearch> VCollectionviewForSearches { get; set; }

    public virtual DbSet<VCollectionviewReport> VCollectionviewReports { get; set; }

    public virtual DbSet<VGenerateSyncDownload> VGenerateSyncDownloads { get; set; }

    public virtual DbSet<VGenericSearch> VGenericSearches { get; set; }

    public virtual DbSet<VGenericTarget> VGenericTargets { get; set; }

    public virtual DbSet<VGenericTargetAchieved> VGenericTargetAchieveds { get; set; }

    public virtual DbSet<VGenericTargetAchievedGeo> VGenericTargetAchievedGeos { get; set; }

    public virtual DbSet<VGenericTargetAchievedGeoRtn> VGenericTargetAchievedGeoRtns { get; set; }

    public virtual DbSet<VGenericTargetAchievedItm> VGenericTargetAchievedItms { get; set; }

    public virtual DbSet<VGenericTargetAchievedItmGrp> VGenericTargetAchievedItmGrps { get; set; }

    public virtual DbSet<VGenericTargetAchievedItmIbd> VGenericTargetAchievedItmIbds { get; set; }

    public virtual DbSet<VGenericTargetAchievedItmIbdRtn> VGenericTargetAchievedItmIbdRtns { get; set; }

    public virtual DbSet<VGenericTargetAchievedItmRtn> VGenericTargetAchievedItmRtns { get; set; }

    public virtual DbSet<VGenericTargetAchievedSlr> VGenericTargetAchievedSlrs { get; set; }

    public virtual DbSet<VGenericTargetAchievedSlrCol> VGenericTargetAchievedSlrCols { get; set; }

    public virtual DbSet<VGenericTargetAchievedSlrRtn> VGenericTargetAchievedSlrRtns { get; set; }

    public virtual DbSet<VGenericTargetAchievedThp> VGenericTargetAchievedThps { get; set; }

    public virtual DbSet<VGenericTargetAchievedThpsCol> VGenericTargetAchievedThpsCols { get; set; }

    public virtual DbSet<VGenericTargetAchievedThpsRtn> VGenericTargetAchievedThpsRtns { get; set; }

    public virtual DbSet<VGenericTargetAchievedTryingToImprovePerformance> VGenericTargetAchievedTryingToImprovePerformances { get; set; }

    public virtual DbSet<VGeofenceGeography> VGeofenceGeographies { get; set; }

    public virtual DbSet<VGeolocation> VGeolocations { get; set; }

    public virtual DbSet<VIcfvItembrand> VIcfvItembrands { get; set; }

    public virtual DbSet<VIcfvItemgroup> VIcfvItemgroups { get; set; }

    public virtual DbSet<VItemMovement> VItemMovements { get; set; }

    public virtual DbSet<VItemMovementsByPack> VItemMovementsByPacks { get; set; }

    public virtual DbSet<VItemMovementsDetail> VItemMovementsDetails { get; set; }

    public virtual DbSet<VItemMovementsDetailsByPack> VItemMovementsDetailsByPacks { get; set; }

    public virtual DbSet<VItemPrice> VItemPrices { get; set; }

    public virtual DbSet<VItemUom> VItemUoms { get; set; }

    public virtual DbSet<VItemUomMatrixConv> VItemUomMatrixConvs { get; set; }

    public virtual DbSet<VItemWarehouseAvailable> VItemWarehouseAvailables { get; set; }

    public virtual DbSet<VItemWarehouseAvailable20210313> VItemWarehouseAvailable20210313s { get; set; }

    public virtual DbSet<VItemWarehouseDetail> VItemWarehouseDetails { get; set; }

    public virtual DbSet<VItemcategoryFamilyValueVirtual> VItemcategoryFamilyValueVirtuals { get; set; }

    public virtual DbSet<VItemcategoryFamilyVirtual> VItemcategoryFamilyVirtuals { get; set; }

    public virtual DbSet<VItemcategoryValueVirtual> VItemcategoryValueVirtuals { get; set; }

    public virtual DbSet<VListpriceItem> VListpriceItems { get; set; }

    public virtual DbSet<VLlCycleDetail> VLlCycleDetails { get; set; }

    public virtual DbSet<VMenuItemsAccess> VMenuItemsAccesses { get; set; }

    public virtual DbSet<VMovementstatusTransition> VMovementstatusTransitions { get; set; }

    public virtual DbSet<VMtTripTransactionCountReport> VMtTripTransactionCountReports { get; set; }

    public virtual DbSet<VPaymentHistory> VPaymentHistories { get; set; }

    public virtual DbSet<VPaymentInvoiceHistory> VPaymentInvoiceHistories { get; set; }

    public virtual DbSet<VPhysicalLocation> VPhysicalLocations { get; set; }

    public virtual DbSet<VProfileMenuAccess> VProfileMenuAccesses { get; set; }

    public virtual DbSet<VProfileMenuItem> VProfileMenuItems { get; set; }

    public virtual DbSet<VPromotionDetailMobile> VPromotionDetailMobiles { get; set; }

    public virtual DbSet<VPromotionGiveGroup> VPromotionGiveGroups { get; set; }

    public virtual DbSet<VPromotionGiveInfo> VPromotionGiveInfos { get; set; }

    public virtual DbSet<VPromotionGiveInfoOld> VPromotionGiveInfoOlds { get; set; }

    public virtual DbSet<VPromotionGiveMobile> VPromotionGiveMobiles { get; set; }

    public virtual DbSet<VPromotionInfoRep> VPromotionInfoReps { get; set; }

    public virtual DbSet<VPromotionLineMobile> VPromotionLineMobiles { get; set; }

    public virtual DbSet<VPromotionMasterQualifier> VPromotionMasterQualifiers { get; set; }

    public virtual DbSet<VPromotionPreselection> VPromotionPreselections { get; set; }

    public virtual DbSet<VPromotionPreselection1> VPromotionPreselections1 { get; set; }

    public virtual DbSet<VPromotionPreselectionAll> VPromotionPreselectionAlls { get; set; }

    public virtual DbSet<VPromotionPreselectionBuy> VPromotionPreselectionBuys { get; set; }

    public virtual DbSet<VPromotionPreselectionOld> VPromotionPreselectionOlds { get; set; }

    public virtual DbSet<VPromotionQualifierValue> VPromotionQualifierValues { get; set; }

    public virtual DbSet<VPromotionToSelectItem> VPromotionToSelectItems { get; set; }

    public virtual DbSet<VPromotionToSelectItemsDetail> VPromotionToSelectItemsDetails { get; set; }

    public virtual DbSet<VQlkBusinessUnit> VQlkBusinessUnits { get; set; }

    public virtual DbSet<VQlkCallcycle> VQlkCallcycles { get; set; }

    public virtual DbSet<VQlkDueInvoice> VQlkDueInvoices { get; set; }

    public virtual DbSet<VQlkGeoLocation> VQlkGeoLocations { get; set; }

    public virtual DbSet<VQlkItem> VQlkItems { get; set; }

    public virtual DbSet<VQlkItemProperty> VQlkItemProperties { get; set; }

    public virtual DbSet<VQlkItemWarehouse> VQlkItemWarehouses { get; set; }

    public virtual DbSet<VQlkItemWarehouseDetail> VQlkItemWarehouseDetails { get; set; }

    public virtual DbSet<VQlkKey> VQlkKeys { get; set; }

    public virtual DbSet<VQlkPayment> VQlkPayments { get; set; }

    public virtual DbSet<VQlkPaymentDetail> VQlkPaymentDetails { get; set; }

    public virtual DbSet<VQlkPaymentInvoice> VQlkPaymentInvoices { get; set; }

    public virtual DbSet<VQlkRealUser> VQlkRealUsers { get; set; }

    public virtual DbSet<VQlkSectionAccess> VQlkSectionAccesses { get; set; }

    public virtual DbSet<VQlkSyncLog> VQlkSyncLogs { get; set; }

    public virtual DbSet<VQlkTarget> VQlkTargets { get; set; }

    public virtual DbSet<VQlkTargetDetail> VQlkTargetDetails { get; set; }

    public virtual DbSet<VQlkThirdpartyFinance> VQlkThirdpartyFinances { get; set; }

    public virtual DbSet<VQlkThirdpartySite> VQlkThirdpartySites { get; set; }

    public virtual DbSet<VQlkThpsProperty> VQlkThpsProperties { get; set; }

    public virtual DbSet<VQlkTraceAppActivity> VQlkTraceAppActivities { get; set; }

    public virtual DbSet<VQlkTransaction> VQlkTransactions { get; set; }

    public virtual DbSet<VQlkTransactionItem> VQlkTransactionItems { get; set; }

    public virtual DbSet<VQlkUser> VQlkUsers { get; set; }

    public virtual DbSet<VQlkUserAtt> VQlkUserAtts { get; set; }

    public virtual DbSet<VQlkVisit> VQlkVisits { get; set; }

    public virtual DbSet<VQlkVisitPaymentStat> VQlkVisitPaymentStats { get; set; }

    public virtual DbSet<VQlkVisitReason> VQlkVisitReasons { get; set; }

    public virtual DbSet<VQlkVisitTransactionStat> VQlkVisitTransactionStats { get; set; }

    public virtual DbSet<VQlkWebUsage> VQlkWebUsages { get; set; }

    public virtual DbSet<VSiteandcustomergroup> VSiteandcustomergroups { get; set; }

    public virtual DbSet<VSiteandcustomergroup1> VSiteandcustomergroups1 { get; set; }

    public virtual DbSet<VTarget> VTargets { get; set; }

    public virtual DbSet<VTermHierarchy> VTermHierarchies { get; set; }

    public virtual DbSet<VThirdPartyCustomerCategoryValue> VThirdPartyCustomerCategoryValues { get; set; }

    public virtual DbSet<VThirdpartyBillShipGet> VThirdpartyBillShipGets { get; set; }

    public virtual DbSet<VThirdpartysiteCategoriesValue> VThirdpartysiteCategoriesValues { get; set; }

    public virtual DbSet<VThirdpartysiteCustomer> VThirdpartysiteCustomers { get; set; }

    public virtual DbSet<VThirdpartysiteCustomersBillTo> VThirdpartysiteCustomersBillTos { get; set; }

    public virtual DbSet<VThirdpartysiteCustomersShipTo> VThirdpartysiteCustomersShipTos { get; set; }

    public virtual DbSet<VThpctgFamilyValuesVirtual> VThpctgFamilyValuesVirtuals { get; set; }

    public virtual DbSet<VThpctgFamilyVirtual> VThpctgFamilyVirtuals { get; set; }

    public virtual DbSet<VTransactionDetail> VTransactionDetails { get; set; }

    public virtual DbSet<VTransactionHeader> VTransactionHeaders { get; set; }

    public virtual DbSet<VTransactionHistory> VTransactionHistories { get; set; }

    public virtual DbSet<VTransactionItemHistory> VTransactionItemHistories { get; set; }

    public virtual DbSet<VTransactionItemTotal> VTransactionItemTotals { get; set; }

    public virtual DbSet<VTransactionTotal> VTransactionTotals { get; set; }

    public virtual DbSet<VTransactionType> VTransactionTypes { get; set; }

    public virtual DbSet<VTransactionVolume> VTransactionVolumes { get; set; }

    public virtual DbSet<VTransactionstatusTransition> VTransactionstatusTransitions { get; set; }

    public virtual DbSet<VTransactiontypestatus> VTransactiontypestatuses { get; set; }

    public virtual DbSet<VUiMovement> VUiMovements { get; set; }

    public virtual DbSet<VUiTransaction> VUiTransactions { get; set; }

    public virtual DbSet<VUser> VUsers { get; set; }

    public virtual DbSet<VUserAtt> VUserAtts { get; set; }

    public virtual DbSet<VUserHierarchy> VUserHierarchies { get; set; }

    public virtual DbSet<VUserItemWarehouse> VUserItemWarehouses { get; set; }

    public virtual DbSet<VUserProfile> VUserProfiles { get; set; }

    public virtual DbSet<VUserWarehouse> VUserWarehouses { get; set; }

    public virtual DbSet<VUserWarehouseRole> VUserWarehouseRoles { get; set; }

    public virtual DbSet<VWarehouseProductNolot> VWarehouseProductNolots { get; set; }

    public virtual DbSet<Models.Version> Versions { get; set; }

    public virtual DbSet<Models.Visit> Visits { get; set; }

    public virtual DbSet<Models.VisitReason> VisitReasons { get; set; }

    public virtual DbSet<Models.VisitSnc> VisitSncs { get; set; }

    public virtual DbSet<Models.WarehouseProductSnc> WarehouseProductSncs { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=MOAMEN-HAMDAN\\SQLEXPRESS;Database=MSuite_Malia_Sap;Trusted_Connection=True;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1256_CI_AS");

        modelBuilder.Entity<ApiSession>(entity =>
        {
            entity.HasKey(e => e.ApsId).HasFillFactor(90);

            entity.ToTable("API_SESSION", "sec");

            entity.Property(e => e.ApsId).HasColumnName("aps_id");
            entity.Property(e => e.ApsDateCreate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("aps_date_create");
            entity.Property(e => e.ApsKey)
                .HasMaxLength(128)
                .HasColumnName("aps_key");
            entity.Property(e => e.ApsLastActionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("aps_last_action_date");
            entity.Property(e => e.ApsStatus)
                .HasDefaultValue(-1)
                .HasColumnName("aps_status");
            entity.Property(e => e.ApsToken)
                .HasMaxLength(255)
                .HasColumnName("aps_token");
            entity.Property(e => e.ApsUsId).HasColumnName("aps_us_id");
            entity.Property(e => e.ApsValidityMinutes)
                .HasDefaultValue(3)
                .HasColumnName("aps_validity_minutes");

            entity.HasOne(d => d.ApsUs).WithMany(p => p.ApiSessions)
                .HasForeignKey(d => d.ApsUsId)
                .HasConstraintName("FK_APS_REF_US");
        });

        modelBuilder.Entity<ApiSessionLog>(entity =>
        {
            entity.HasKey(e => e.AslId).HasFillFactor(90);

            entity.ToTable("API_SESSION_LOG", "sec");

            entity.Property(e => e.AslId).HasColumnName("asl_id");
            entity.Property(e => e.AslDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("asl_date");
            entity.Property(e => e.AslKey)
                .HasMaxLength(128)
                .HasColumnName("asl_key");
            entity.Property(e => e.AslToken)
                .HasMaxLength(255)
                .HasColumnName("asl_token");
            entity.Property(e => e.AslUsId).HasColumnName("asl_us_id");
            entity.Property(e => e.AslValidated)
                .HasDefaultValue(-1)
                .HasColumnName("asl_validated");
        });

        modelBuilder.Entity<AppImage>(entity =>
        {
            entity.HasKey(e => e.ImgId).HasFillFactor(90);

            entity.ToTable("APP_IMAGE", "cmn");

            entity.Property(e => e.ImgId)
                .ValueGeneratedNever()
                .HasColumnName("img_id");
            entity.Property(e => e.ImgActive).HasColumnName("img_active");
            entity.Property(e => e.ImgCdIdImgref).HasColumnName("img_cd_id_imgref");
            entity.Property(e => e.ImgDatetime)
                .HasColumnType("datetime")
                .HasColumnName("img_datetime");
            entity.Property(e => e.ImgDevicePath)
                .HasMaxLength(255)
                .HasColumnName("img_device_path");
            entity.Property(e => e.ImgFkValue).HasColumnName("img_fk_value");
            entity.Property(e => e.ImgLatitude)
                .HasMaxLength(32)
                .HasColumnName("img_latitude");
            entity.Property(e => e.ImgLongitude)
                .HasMaxLength(32)
                .HasColumnName("img_longitude");
            entity.Property(e => e.ImgName)
                .HasMaxLength(100)
                .HasColumnName("img_name");
            entity.Property(e => e.ImgNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("img_num1");
            entity.Property(e => e.ImgNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("img_num2");
            entity.Property(e => e.ImgOrder).HasColumnName("img_order");
            entity.Property(e => e.ImgOrgId).HasColumnName("img_org_id");
            entity.Property(e => e.ImgServerPath)
                .HasMaxLength(255)
                .HasColumnName("img_server_path");
            entity.Property(e => e.ImgText1)
                .HasMaxLength(255)
                .HasColumnName("img_text1");
            entity.Property(e => e.ImgText2)
                .HasMaxLength(255)
                .HasColumnName("img_text2");
            entity.Property(e => e.ImgUsId).HasColumnName("img_us_id");

            entity.HasOne(d => d.ImgCdIdImgrefNavigation).WithMany(p => p.AppImages)
                .HasForeignKey(d => d.ImgCdIdImgref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APP_IMAG_FK_IMG_RE_CODESC");

            entity.HasOne(d => d.ImgUs).WithMany(p => p.AppImages)
                .HasForeignKey(d => d.ImgUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APP_IMAG_FK_IMG_RE_USER");
        });

        modelBuilder.Entity<AppMediaSnc>(entity =>
        {
            entity.HasKey(e => new { e.SMedId, e.SMedVersion, e.SMedUsId }).HasFillFactor(90);

            entity.ToTable("APP_MEDIA_SNC", "syn");

            entity.Property(e => e.SMedId).HasColumnName("s_med_id");
            entity.Property(e => e.SMedVersion)
                .HasMaxLength(25)
                .HasColumnName("s_med_version");
            entity.Property(e => e.SMedUsId).HasColumnName("s_med_us_id");
            entity.Property(e => e.SMedActive).HasColumnName("s_med_active");
            entity.Property(e => e.SMedDatetime)
                .HasColumnType("datetime")
                .HasColumnName("s_med_datetime");
            entity.Property(e => e.SMedDevicePath)
                .HasMaxLength(255)
                .HasColumnName("s_med_device_path");
            entity.Property(e => e.SMedFkValue).HasColumnName("s_med_fk_value");
            entity.Property(e => e.SMedFkValueUid)
                .HasMaxLength(128)
                .HasColumnName("s_med_fk_value_uid");
            entity.Property(e => e.SMedLatitude)
                .HasMaxLength(32)
                .HasColumnName("s_med_latitude");
            entity.Property(e => e.SMedLongitude)
                .HasMaxLength(32)
                .HasColumnName("s_med_longitude");
            entity.Property(e => e.SMedName)
                .HasMaxLength(100)
                .HasColumnName("s_med_name");
            entity.Property(e => e.SMedNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_med_num1");
            entity.Property(e => e.SMedNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_med_num2");
            entity.Property(e => e.SMedOrder).HasColumnName("s_med_order");
            entity.Property(e => e.SMedOrgId).HasColumnName("s_med_org_id");
            entity.Property(e => e.SMedRef)
                .HasMaxLength(32)
                .HasColumnName("s_med_ref");
            entity.Property(e => e.SMedServerPath)
                .HasMaxLength(255)
                .HasColumnName("s_med_server_path");
            entity.Property(e => e.SMedText1)
                .HasMaxLength(255)
                .HasColumnName("s_med_text1");
            entity.Property(e => e.SMedText2)
                .HasMaxLength(255)
                .HasColumnName("s_med_text2");
            entity.Property(e => e.SMedType)
                .HasMaxLength(32)
                .HasColumnName("s_med_type");
        });

        modelBuilder.Entity<AppMedium>(entity =>
        {
            entity.HasKey(e => e.MedId).HasFillFactor(90);

            entity.ToTable("APP_MEDIA", "cmn");

            entity.Property(e => e.MedId).HasColumnName("med_id");
            entity.Property(e => e.MedActive).HasColumnName("med_active");
            entity.Property(e => e.MedCdIdMedref).HasColumnName("med_cd_id_medref");
            entity.Property(e => e.MedCdIdMedtype).HasColumnName("med_cd_id_medtype");
            entity.Property(e => e.MedDatetime)
                .HasColumnType("datetime")
                .HasColumnName("med_datetime");
            entity.Property(e => e.MedDevicePath)
                .HasMaxLength(255)
                .HasColumnName("med_device_path");
            entity.Property(e => e.MedFkValue).HasColumnName("med_fk_value");
            entity.Property(e => e.MedLatitude)
                .HasMaxLength(32)
                .HasColumnName("med_latitude");
            entity.Property(e => e.MedLongitude)
                .HasMaxLength(32)
                .HasColumnName("med_longitude");
            entity.Property(e => e.MedName)
                .HasMaxLength(100)
                .HasColumnName("med_name");
            entity.Property(e => e.MedNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("med_num1");
            entity.Property(e => e.MedNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("med_num2");
            entity.Property(e => e.MedOrder).HasColumnName("med_order");
            entity.Property(e => e.MedOrgId).HasColumnName("med_org_id");
            entity.Property(e => e.MedServerPath)
                .HasMaxLength(255)
                .HasColumnName("med_server_path");
            entity.Property(e => e.MedText1)
                .HasMaxLength(255)
                .HasColumnName("med_text1");
            entity.Property(e => e.MedText2)
                .HasMaxLength(255)
                .HasColumnName("med_text2");
            entity.Property(e => e.MedUsId).HasColumnName("med_us_id");

            entity.HasOne(d => d.MedCdIdMedrefNavigation).WithMany(p => p.AppMedia)
                .HasForeignKey(d => d.MedCdIdMedref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APP_MEDIA_FK_MED_RE_CODESC");

            entity.HasOne(d => d.MedUs).WithMany(p => p.AppMedia)
                .HasForeignKey(d => d.MedUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APP_MEDIA_FK_MED_RE_USER");
        });

        modelBuilder.Entity<AppliSetting>(entity =>
        {
            entity.HasKey(e => e.AsId)
                .HasName("PK_APPLI_SETTINGS")
                .HasFillFactor(90);

            entity.ToTable("APPLI_SETTING", "cmn");

            entity.HasIndex(e => new { e.AsCdIdSrc, e.AsMdId, e.AsGroup, e.AsCode }, "as_src_md_group_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AsId).HasColumnName("as_id");
            entity.Property(e => e.AsCdIdSrc).HasColumnName("as_cd_id_src");
            entity.Property(e => e.AsCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("as_code");
            entity.Property(e => e.AsDescription)
                .HasMaxLength(255)
                .HasColumnName("as_description");
            entity.Property(e => e.AsGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("as_group");
            entity.Property(e => e.AsMdId).HasColumnName("as_md_id");
            entity.Property(e => e.AsSystem).HasColumnName("as_system");
            entity.Property(e => e.AsValue)
                .HasMaxLength(255)
                .HasColumnName("as_value");
            entity.Property(e => e.AsValueType)
                .HasMaxLength(20)
                .HasColumnName("as_value_type");

            entity.HasOne(d => d.AsCdIdSrcNavigation).WithMany(p => p.AppliSettings)
                .HasForeignKey(d => d.AsCdIdSrc)
                .HasConstraintName("FK_APPLI_SE_REFERENCE_CODESC");

            entity.HasOne(d => d.AsMd).WithMany(p => p.AppliSettings)
                .HasForeignKey(d => d.AsMdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AS_REF_MD");
        });

        modelBuilder.Entity<ApprovalConfig>(entity =>
        {
            entity.HasKey(e => e.AcId).HasFillFactor(90);

            entity.ToTable("APPROVAL_CONFIG", "cmn");

            entity.Property(e => e.AcId).HasColumnName("ac_id");
            entity.Property(e => e.AcActive).HasColumnName("ac_active");
            entity.Property(e => e.AcBuId).HasColumnName("ac_bu_id");
            entity.Property(e => e.AcCdIdArtd).HasColumnName("ac_cd_id_artd");
            entity.Property(e => e.AcCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ac_creation_date");
            entity.Property(e => e.AcSupervisor).HasColumnName("ac_supervisor");
            entity.Property(e => e.AcUsId).HasColumnName("ac_us_id");
            entity.Property(e => e.AcUsIdCr).HasColumnName("ac_us_id_cr");

            entity.HasOne(d => d.AcBu).WithMany(p => p.ApprovalConfigs)
                .HasForeignKey(d => d.AcBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_REF_BU");

            entity.HasOne(d => d.AcCdIdArtdNavigation).WithMany(p => p.ApprovalConfigs)
                .HasForeignKey(d => d.AcCdIdArtd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_REF_CD");

            entity.HasOne(d => d.AcUs).WithMany(p => p.ApprovalConfigAcUs)
                .HasForeignKey(d => d.AcUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_REF_US");

            entity.HasOne(d => d.AcUsIdCrNavigation).WithMany(p => p.ApprovalConfigAcUsIdCrNavigations)
                .HasForeignKey(d => d.AcUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_REF_USCR");
        });

        modelBuilder.Entity<ApprovalRequest>(entity =>
        {
            entity.HasKey(e => e.ArId).HasFillFactor(90);

            entity.ToTable("APPROVAL_REQUEST", "cmn");

            entity.Property(e => e.ArId).HasColumnName("ar_id");
            entity.Property(e => e.ArActive)
                .HasDefaultValue((short)1)
                .HasColumnName("ar_active");
            entity.Property(e => e.ArBalanceBeforeTs)
                .HasMaxLength(255)
                .HasColumnName("ar_balance_before_ts");
            entity.Property(e => e.ArBatch)
                .HasMaxLength(64)
                .HasColumnName("ar_batch");
            entity.Property(e => e.ArCdIdArsts).HasColumnName("ar_cd_id_arsts");
            entity.Property(e => e.ArCdIdArt).HasColumnName("ar_cd_id_art");
            entity.Property(e => e.ArCdIdArtbl).HasColumnName("ar_cd_id_artbl");
            entity.Property(e => e.ArCode)
                .HasMaxLength(128)
                .HasColumnName("ar_code");
            entity.Property(e => e.ArCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("ar_creation_date");
            entity.Property(e => e.ArCreditLimit)
                .HasMaxLength(255)
                .HasColumnName("ar_credit_limit");
            entity.Property(e => e.ArDescriptionLan1)
                .HasMaxLength(1024)
                .HasColumnName("ar_description_lan1");
            entity.Property(e => e.ArDescriptionLan2)
                .HasMaxLength(1024)
                .HasColumnName("ar_description_lan2");
            entity.Property(e => e.ArDescriptionLan3)
                .HasMaxLength(1024)
                .HasColumnName("ar_description_lan3");
            entity.Property(e => e.ArExceedValue)
                .HasMaxLength(255)
                .HasColumnName("ar_exceed_value");
            entity.Property(e => e.ArFkUid)
                .HasMaxLength(128)
                .HasColumnName("ar_fk_uid");
            entity.Property(e => e.ArFkValue).HasColumnName("ar_fk_value");
            entity.Property(e => e.ArLatitude)
                .HasMaxLength(64)
                .HasColumnName("ar_latitude");
            entity.Property(e => e.ArLongitude)
                .HasMaxLength(64)
                .HasColumnName("ar_longitude");
            entity.Property(e => e.ArNotification).HasColumnName("ar_notification");
            entity.Property(e => e.ArQuota)
                .HasMaxLength(255)
                .HasColumnName("ar_quota");
            entity.Property(e => e.ArRemarksApp).HasColumnName("ar_remarks_app");
            entity.Property(e => e.ArRemarksReq).HasColumnName("ar_remarks_req");
            entity.Property(e => e.ArRequestDate)
                .HasColumnType("datetime")
                .HasColumnName("ar_request_date");
            entity.Property(e => e.ArText1)
                .HasMaxLength(1000)
                .HasColumnName("ar_text1");
            entity.Property(e => e.ArThpsId).HasColumnName("ar_thps_id");
            entity.Property(e => e.ArTsTotal)
                .HasMaxLength(255)
                .HasColumnName("ar_ts_total");
            entity.Property(e => e.ArUid)
                .HasMaxLength(256)
                .HasColumnName("ar_uid");
            entity.Property(e => e.ArUsIdApp).HasColumnName("ar_us_id_app");
            entity.Property(e => e.ArUsIdCr).HasColumnName("ar_us_id_cr");
            entity.Property(e => e.ArUsIdReq).HasColumnName("ar_us_id_req");
            entity.Property(e => e.ArVtUid)
                .HasMaxLength(128)
                .HasColumnName("ar_vt_uid");

            entity.HasOne(d => d.ArCdIdArstsNavigation).WithMany(p => p.ApprovalRequestArCdIdArstsNavigations)
                .HasForeignKey(d => d.ArCdIdArsts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AR_REF_ARSTS");

            entity.HasOne(d => d.ArCdIdArtNavigation).WithMany(p => p.ApprovalRequestArCdIdArtNavigations)
                .HasForeignKey(d => d.ArCdIdArt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AR_REF_CD_ART");

            entity.HasOne(d => d.ArCdIdArtblNavigation).WithMany(p => p.ApprovalRequestArCdIdArtblNavigations)
                .HasForeignKey(d => d.ArCdIdArtbl)
                .HasConstraintName("FK_AR_REF_ARTBL");

            entity.HasOne(d => d.ArUsIdAppNavigation).WithMany(p => p.ApprovalRequestArUsIdAppNavigations)
                .HasForeignKey(d => d.ArUsIdApp)
                .HasConstraintName("FK_AR_REF_USAPP");

            entity.HasOne(d => d.ArUsIdCrNavigation).WithMany(p => p.ApprovalRequestArUsIdCrNavigations)
                .HasForeignKey(d => d.ArUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AR_REF_USCR");

            entity.HasOne(d => d.ArUsIdReqNavigation).WithMany(p => p.ApprovalRequestArUsIdReqNavigations)
                .HasForeignKey(d => d.ArUsIdReq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AR_REF_USREQ");
        });

        modelBuilder.Entity<ApprovalRequestDetail>(entity =>
        {
            entity.HasKey(e => e.ArdId).HasFillFactor(90);

            entity.ToTable("APPROVAL_REQUEST_DETAIL", "cmn");

            entity.Property(e => e.ArdId).HasColumnName("ard_id");
            entity.Property(e => e.ArdArId).HasColumnName("ard_ar_id");
            entity.Property(e => e.ArdCdIdArtd).HasColumnName("ard_cd_id_artd");
            entity.Property(e => e.ArdOrgId).HasColumnName("ard_org_id");

            entity.HasOne(d => d.ArdAr).WithMany(p => p.ApprovalRequestDetails)
                .HasForeignKey(d => d.ArdArId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARD_REF_AR");

            entity.HasOne(d => d.ArdCdIdArtdNavigation).WithMany(p => p.ApprovalRequestDetails)
                .HasForeignKey(d => d.ArdCdIdArtd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARD_REF_CD");
        });

        modelBuilder.Entity<ApprovalRequestDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.SArdId, e.SArdSmId, e.SArdVersion }).HasFillFactor(90);

            entity.ToTable("APPROVAL_REQUEST_DETAIL_SNC", "syn");

            entity.Property(e => e.SArdId).HasColumnName("s_ard_id");
            entity.Property(e => e.SArdSmId).HasColumnName("s_ard_sm_id");
            entity.Property(e => e.SArdVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ard_version");
            entity.Property(e => e.SArdArId).HasColumnName("s_ard_ar_id");
            entity.Property(e => e.SArdArUid)
                .HasMaxLength(256)
                .HasColumnName("s_ard_ar_uid");
            entity.Property(e => e.SArdCdIdArtd).HasColumnName("s_ard_cd_id_artd");
        });

        modelBuilder.Entity<ApprovalRequestSnc>(entity =>
        {
            entity.HasKey(e => new { e.SArId, e.SArSmId, e.SArVersion }).HasFillFactor(90);

            entity.ToTable("APPROVAL_REQUEST_SNC", "syn");

            entity.Property(e => e.SArId).HasColumnName("s_ar_id");
            entity.Property(e => e.SArSmId).HasColumnName("s_ar_sm_id");
            entity.Property(e => e.SArVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ar_version");
            entity.Property(e => e.SArBalanceBeforeTs)
                .HasMaxLength(255)
                .HasColumnName("s_ar_balance_before_ts");
            entity.Property(e => e.SArCdIdArsts).HasColumnName("s_ar_cd_id_arsts");
            entity.Property(e => e.SArCdIdArt).HasColumnName("s_ar_cd_id_art");
            entity.Property(e => e.SArCdIdArtbl).HasColumnName("s_ar_cd_id_artbl");
            entity.Property(e => e.SArCode)
                .HasMaxLength(128)
                .HasColumnName("s_ar_code");
            entity.Property(e => e.SArCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ar_creation_date");
            entity.Property(e => e.SArCreditLimit)
                .HasMaxLength(255)
                .HasColumnName("s_ar_credit_limit");
            entity.Property(e => e.SArDescriptionLan1)
                .HasMaxLength(1024)
                .HasColumnName("s_ar_description_lan1");
            entity.Property(e => e.SArDescriptionLan2)
                .HasMaxLength(1024)
                .HasColumnName("s_ar_description_lan2");
            entity.Property(e => e.SArDescriptionLan3)
                .HasMaxLength(1024)
                .HasColumnName("s_ar_description_lan3");
            entity.Property(e => e.SArExceedValue)
                .HasMaxLength(255)
                .HasColumnName("s_ar_exceed_value");
            entity.Property(e => e.SArFkUid)
                .HasMaxLength(128)
                .HasColumnName("s_ar_fk_uid");
            entity.Property(e => e.SArFkValue).HasColumnName("s_ar_fk_value");
            entity.Property(e => e.SArLatitude)
                .HasMaxLength(64)
                .HasColumnName("s_ar_latitude");
            entity.Property(e => e.SArLongitude)
                .HasMaxLength(64)
                .HasColumnName("s_ar_longitude");
            entity.Property(e => e.SArNotification).HasColumnName("s_ar_notification");
            entity.Property(e => e.SArQuota)
                .HasMaxLength(255)
                .HasColumnName("s_ar_quota");
            entity.Property(e => e.SArRemarksApp)
                .HasMaxLength(1024)
                .HasColumnName("s_ar_remarks_app");
            entity.Property(e => e.SArRemarksReq)
                .HasMaxLength(1024)
                .HasColumnName("s_ar_remarks_req");
            entity.Property(e => e.SArRequestDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ar_request_date");
            entity.Property(e => e.SArText1)
                .HasMaxLength(1000)
                .HasColumnName("s_ar_text1");
            entity.Property(e => e.SArThpsId).HasColumnName("s_ar_thps_id");
            entity.Property(e => e.SArTsTotal)
                .HasMaxLength(255)
                .HasColumnName("s_ar_ts_total");
            entity.Property(e => e.SArUid)
                .HasMaxLength(256)
                .HasColumnName("s_ar_uid");
            entity.Property(e => e.SArUsIdApp).HasColumnName("s_ar_us_id_app");
            entity.Property(e => e.SArUsIdCr).HasColumnName("s_ar_us_id_cr");
            entity.Property(e => e.SArUsIdReq).HasColumnName("s_ar_us_id_req");
            entity.Property(e => e.SArVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_ar_vt_uid");
        });

        modelBuilder.Entity<ApprovalconfigMember>(entity =>
        {
            entity.HasKey(e => e.AcmId).HasFillFactor(90);

            entity.ToTable("APPROVALCONFIG_MEMBER", "cmn");

            entity.Property(e => e.AcmId).HasColumnName("acm_id");
            entity.Property(e => e.AcEndDate)
                .HasColumnType("datetime")
                .HasColumnName("ac_end_date");
            entity.Property(e => e.AcStartDate)
                .HasColumnType("datetime")
                .HasColumnName("ac_start_date");
            entity.Property(e => e.AcmAcId).HasColumnName("acm_ac_id");
            entity.Property(e => e.AcmUsId).HasColumnName("acm_us_id");

            entity.HasOne(d => d.AcmAc).WithMany(p => p.ApprovalconfigMembers)
                .HasForeignKey(d => d.AcmAcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACM_REF_AC");

            entity.HasOne(d => d.AcmUs).WithMany(p => p.ApprovalconfigMembers)
                .HasForeignKey(d => d.AcmUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACM_REF_US");
        });

        modelBuilder.Entity<ApprovalrequestdetailInfo>(entity =>
        {
            entity.HasKey(e => e.ArdiId).HasFillFactor(90);

            entity.ToTable("APPROVALREQUESTDETAIL_INFO", "cmn");

            entity.Property(e => e.ArdiId).HasColumnName("ardi_id");
            entity.Property(e => e.ArdiArdId).HasColumnName("ardi_ard_id");
            entity.Property(e => e.ArdiItId).HasColumnName("ardi_it_id");
            entity.Property(e => e.ArdiItModifiedValue)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("ardi_it_modified_value");
            entity.Property(e => e.ArdiItOriginalValue)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("ardi_it_original_value");
            entity.Property(e => e.ArdiItuId).HasColumnName("ardi_itu_id");

            entity.HasOne(d => d.ArdiArd).WithMany(p => p.ApprovalrequestdetailInfos)
                .HasForeignKey(d => d.ArdiArdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARDI_REF_ARD");
        });

        modelBuilder.Entity<ApprovalrequestdetailInfoSnc>(entity =>
        {
            entity.HasKey(e => new { e.SArdiId, e.SArdiSmId, e.SArdiVersion }).HasFillFactor(90);

            entity.ToTable("APPROVALREQUESTDETAIL_INFO_SNC", "syn");

            entity.Property(e => e.SArdiId).HasColumnName("s_ardi_id");
            entity.Property(e => e.SArdiSmId).HasColumnName("s_ardi_sm_id");
            entity.Property(e => e.SArdiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ardi_version");
            entity.Property(e => e.SArdiArdId).HasColumnName("s_ardi_ard_id");
            entity.Property(e => e.SArdiItId).HasColumnName("s_ardi_it_id");
            entity.Property(e => e.SArdiItModifiedValue)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("s_ardi_it_modified_value");
            entity.Property(e => e.SArdiItOriginalValue)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("s_ardi_it_original_value");
            entity.Property(e => e.SArdiItuId).HasColumnName("s_ardi_itu_id");
        });

        modelBuilder.Entity<AuthCredential>(entity =>
        {
            entity.HasKey(e => e.OcId).HasFillFactor(90);

            entity.ToTable("AUTH_CREDENTIALS", "sec");

            entity.Property(e => e.OcId).HasColumnName("oc_id");
            entity.Property(e => e.OcActive)
                .HasDefaultValue(1)
                .HasColumnName("oc_active");
            entity.Property(e => e.OcExpiryDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("oc_expiry_date");
            entity.Property(e => e.OcLogin)
                .HasMaxLength(256)
                .HasColumnName("oc_login");
            entity.Property(e => e.OcPassword).HasColumnName("oc_password");
        });

        modelBuilder.Entity<BarcodeActionMapping>(entity =>
        {
            entity.HasKey(e => e.BamId).HasFillFactor(90);

            entity.ToTable("BARCODE_ACTION_MAPPING", "cmn");

            entity.Property(e => e.BamId).HasColumnName("bam_id");
            entity.Property(e => e.BamActionInt).HasColumnName("bam_action_int");
            entity.Property(e => e.BamActionText)
                .HasMaxLength(128)
                .HasColumnName("bam_action_text");
            entity.Property(e => e.BamActionType)
                .HasMaxLength(128)
                .HasColumnName("bam_action_type");
            entity.Property(e => e.BamBarcode)
                .HasMaxLength(128)
                .HasColumnName("bam_barcode");
            entity.Property(e => e.BamMmId).HasColumnName("bam_mm_id");
            entity.Property(e => e.BamScreenName)
                .HasMaxLength(128)
                .HasColumnName("bam_screen_name");
        });

        modelBuilder.Entity<BeginDay>(entity =>
        {
            entity.HasKey(e => e.BdId).HasFillFactor(90);

            entity.ToTable("BEGIN_DAY", "cmn");

            entity.Property(e => e.BdId).HasColumnName("bd_id");
            entity.Property(e => e.BdCdIdSrc).HasColumnName("bd_cd_id_src");
            entity.Property(e => e.BdDate)
                .HasColumnType("datetime")
                .HasColumnName("bd_date");
            entity.Property(e => e.BdEndDate)
                .HasColumnType("datetime")
                .HasColumnName("bd_end_date");
            entity.Property(e => e.BdEndLatitude)
                .HasMaxLength(32)
                .HasColumnName("bd_end_latitude");
            entity.Property(e => e.BdEndLongitude)
                .HasMaxLength(32)
                .HasColumnName("bd_end_longitude");
            entity.Property(e => e.BdEndNotes).HasColumnName("bd_end_notes");
            entity.Property(e => e.BdEndOdometer)
                .HasMaxLength(10)
                .HasColumnName("bd_end_odometer");
            entity.Property(e => e.BdLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("bd_latitude");
            entity.Property(e => e.BdLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("bd_longitude");
            entity.Property(e => e.BdNotes).HasColumnName("bd_notes");
            entity.Property(e => e.BdOdometer)
                .HasMaxLength(10)
                .HasColumnName("bd_odometer");
            entity.Property(e => e.BdOrgId).HasColumnName("bd_org_id");
            entity.Property(e => e.BdUsId).HasColumnName("bd_us_id");

            entity.HasOne(d => d.BdCdIdSrcNavigation).WithMany(p => p.BeginDays)
                .HasForeignKey(d => d.BdCdIdSrc)
                .HasConstraintName("FK_BD_REF_CD_SRC");

            entity.HasOne(d => d.BdUs).WithMany(p => p.BeginDays)
                .HasForeignKey(d => d.BdUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REFE_US");
        });

        modelBuilder.Entity<BeginDaySnc>(entity =>
        {
            entity.HasKey(e => new { e.SBdId, e.SBdSmId, e.SBdVersion }).HasFillFactor(90);

            entity.ToTable("BEGIN_DAY_SNC", "syn");

            entity.Property(e => e.SBdId).HasColumnName("s_bd_id");
            entity.Property(e => e.SBdSmId).HasColumnName("s_bd_sm_id");
            entity.Property(e => e.SBdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_bd_version");
            entity.Property(e => e.SBdDate)
                .HasColumnType("datetime")
                .HasColumnName("s_bd_date");
            entity.Property(e => e.SBdEndGpsLatitude)
                .HasMaxLength(32)
                .HasColumnName("s_bd_end_gps_latitude");
            entity.Property(e => e.SBdEndGpsLongitude)
                .HasMaxLength(32)
                .HasColumnName("s_bd_end_gps_longitude");
            entity.Property(e => e.SBdEndOdometer)
                .HasMaxLength(10)
                .HasColumnName("s_bd_end_odometer");
            entity.Property(e => e.SBdGpsLatitude)
                .HasMaxLength(20)
                .HasColumnName("s_bd_gps_latitude");
            entity.Property(e => e.SBdGpsLongitude)
                .HasMaxLength(20)
                .HasColumnName("s_bd_gps_longitude");
            entity.Property(e => e.SBdNotes)
                .HasMaxLength(100)
                .HasColumnName("s_bd_notes");
            entity.Property(e => e.SBdOdometer)
                .HasMaxLength(8)
                .HasColumnName("s_bd_odometer");
            entity.Property(e => e.SBdSynched).HasColumnName("s_bd_synched");
        });

        modelBuilder.Entity<BusinessUnit>(entity =>
        {
            entity.HasKey(e => e.BuId)
                .HasName("PK_BUSINESS_ENTITY")
                .HasFillFactor(90);

            entity.ToTable("BUSINESS_UNIT", "cmn");

            entity.HasIndex(e => e.BuBuId, "bu_bu_idx").HasFillFactor(90);

            entity.HasIndex(e => e.BuCode, "bu_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.BuImpUid, "bu_imp_uid_idx").HasFillFactor(90);

            entity.HasIndex(e => e.BuPath, "bu_path_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.BuBuId).HasColumnName("bu_bu_id");
            entity.Property(e => e.BuCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("bu_code");
            entity.Property(e => e.BuCpId).HasColumnName("bu_cp_id");
            entity.Property(e => e.BuDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan1");
            entity.Property(e => e.BuDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan2");
            entity.Property(e => e.BuDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan3");
            entity.Property(e => e.BuImpUid)
                .HasMaxLength(64)
                .HasColumnName("bu_imp_uid");
            entity.Property(e => e.BuLeId)
                .HasMaxLength(32)
                .HasColumnName("bu_le_id");
            entity.Property(e => e.BuOrgCode)
                .HasMaxLength(64)
                .HasColumnName("bu_org_code");
            entity.Property(e => e.BuOuId)
                .HasMaxLength(32)
                .HasColumnName("bu_ou_id");
            entity.Property(e => e.BuPath)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bu_path");
            entity.Property(e => e.BuPrefix)
                .HasMaxLength(32)
                .HasColumnName("bu_prefix");

            entity.HasOne(d => d.BuBu).WithMany(p => p.InverseBuBu)
                .HasForeignKey(d => d.BuBuId)
                .HasConstraintName("FK_BU_REF_BU");

            entity.HasOne(d => d.BuCp).WithMany(p => p.BusinessUnits)
                .HasForeignKey(d => d.BuCpId)
                .HasConstraintName("FK_BUSINESS_REFERENCE_COMPANY");
        });

        modelBuilder.Entity<BusinessUnitAttribute>(entity =>
        {
            entity.HasKey(e => e.BuaId).HasFillFactor(90);

            entity.ToTable("BUSINESS_UNIT_ATTRIBUTE", "cmn");

            entity.Property(e => e.BuaId).HasColumnName("bua_id");
            entity.Property(e => e.BuaBuId).HasColumnName("bua_bu_id");
            entity.Property(e => e.BuaCdIdMod).HasColumnName("bua_cd_id_mod");
            entity.Property(e => e.BuaCdIdPrt).HasColumnName("bua_cd_id_prt");
            entity.Property(e => e.BuaCdIdPvt).HasColumnName("bua_cd_id_pvt");
            entity.Property(e => e.BuaCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bua_code");

            entity.HasOne(d => d.BuaBu).WithMany(p => p.BusinessUnitAttributes)
                .HasForeignKey(d => d.BuaBuId)
                .HasConstraintName("FK_BUA_REF_BU");
        });

        modelBuilder.Entity<BusinessUnitPlu>(entity =>
        {
            entity.HasKey(e => e.BupId).HasFillFactor(90);

            entity.ToTable("BUSINESS_UNIT_PLUS", "cmn");

            entity.Property(e => e.BupId).HasColumnName("bup_id");
            entity.Property(e => e.BupBuId).HasColumnName("bup_bu_id");
            entity.Property(e => e.BupCdIdCur).HasColumnName("bup_cd_id_cur");

            entity.HasOne(d => d.BupBu).WithMany(p => p.BusinessUnitPlus)
                .HasForeignKey(d => d.BupBuId)
                .HasConstraintName("FK_bup_REF_BU");
        });

        modelBuilder.Entity<BusinessunitApplisetting>(entity =>
        {
            entity.HasKey(e => e.BasId).HasFillFactor(90);

            entity.ToTable("BUSINESSUNIT_APPLISETTING", "cmn");

            entity.Property(e => e.BasId).HasColumnName("bas_id");
            entity.Property(e => e.BasAsId).HasColumnName("bas_as_id");
            entity.Property(e => e.BasAsValue)
                .HasMaxLength(255)
                .HasColumnName("bas_as_value");
            entity.Property(e => e.BasBuId).HasColumnName("bas_bu_id");

            entity.HasOne(d => d.BasAs).WithMany(p => p.BusinessunitApplisettings)
                .HasForeignKey(d => d.BasAsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BAS_REF_AS");

            entity.HasOne(d => d.BasBu).WithMany(p => p.BusinessunitApplisettings)
                .HasForeignKey(d => d.BasBuId)
                .HasConstraintName("FK_BAS_REF_BU");
        });

        modelBuilder.Entity<CallCycle>(entity =>
        {
            entity.HasKey(e => e.CcId).HasFillFactor(90);

            entity.ToTable("CALL_CYCLE", "cmn");

            entity.Property(e => e.CcId).HasColumnName("cc_id");
            entity.Property(e => e.CcActive).HasColumnName("cc_active");
            entity.Property(e => e.CcAutorenew).HasColumnName("cc_autorenew");
            entity.Property(e => e.CcCdIdCyt).HasColumnName("cc_cd_id_cyt");
            entity.Property(e => e.CcCycleLength).HasColumnName("cc_cycle_length");
            entity.Property(e => e.CcDescription)
                .HasMaxLength(200)
                .HasColumnName("cc_description");
            entity.Property(e => e.CcFromDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_from_date");
            entity.Property(e => e.CcToDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_to_date");
            entity.Property(e => e.CcUsId).HasColumnName("cc_us_id");
            entity.Property(e => e.CcWorkdays)
                .HasMaxLength(20)
                .HasColumnName("cc_workdays");

            entity.HasOne(d => d.CcCdIdCytNavigation).WithMany(p => p.CallCycles)
                .HasForeignKey(d => d.CcCdIdCyt)
                .HasConstraintName("FK_CC_REF_CD_CYT");

            entity.HasOne(d => d.CcUs).WithMany(p => p.CallCycles)
                .HasForeignKey(d => d.CcUsId)
                .HasConstraintName("FK_CC_REF_US");
        });

        modelBuilder.Entity<CallCycleDetail>(entity =>
        {
            entity.HasKey(e => e.CcdId).HasFillFactor(90);

            entity.ToTable("CALL_CYCLE_DETAIL", "cmn");

            entity.HasIndex(e => e.CcdCcId, "IDX_CCD_CC_ID").HasFillFactor(90);

            entity.Property(e => e.CcdId).HasColumnName("ccd_id");
            entity.Property(e => e.CcdActualVisitDate)
                .HasColumnType("datetime")
                .HasColumnName("ccd_actual_visit_date");
            entity.Property(e => e.CcdCcId).HasColumnName("ccd_cc_id");
            entity.Property(e => e.CcdCdIdVst).HasColumnName("ccd_cd_id_vst");
            entity.Property(e => e.CcdOrder).HasColumnName("ccd_order");
            entity.Property(e => e.CcdPlannedVisitDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("ccd_planned_visit_date");
            entity.Property(e => e.CcdThpsId).HasColumnName("ccd_thps_id");

            entity.HasOne(d => d.CcdCc).WithMany(p => p.CallCycleDetails)
                .HasForeignKey(d => d.CcdCcId)
                .HasConstraintName("FK_CCD_REF_CC");

            entity.HasOne(d => d.CcdCdIdVstNavigation).WithMany(p => p.CallCycleDetails)
                .HasForeignKey(d => d.CcdCdIdVst)
                .HasConstraintName("FK_CALL_CYC_REFERENCE_CODESC");

            entity.HasOne(d => d.CcdThps).WithMany(p => p.CallCycleDetails)
                .HasForeignKey(d => d.CcdThpsId)
                .HasConstraintName("FK_CCD_REF_THPS");
        });

        modelBuilder.Entity<CallCycleUserHelper>(entity =>
        {
            entity.HasKey(e => e.CcuhId).HasFillFactor(90);

            entity.ToTable("CALL_CYCLE_USER_HELPER", "cmn");

            entity.Property(e => e.CcuhId).HasColumnName("ccuh_id");
            entity.Property(e => e.CcuhCcId).HasColumnName("ccuh_cc_id");
            entity.Property(e => e.CcuhCycleNo).HasColumnName("ccuh_cycle_no");
            entity.Property(e => e.CcuhCycleOrder).HasColumnName("ccuh_cycle_order");
            entity.Property(e => e.CcuhDhId).HasColumnName("ccuh_dh_id");
            entity.Property(e => e.CcuhUsId).HasColumnName("ccuh_us_id");

            entity.HasOne(d => d.CcuhDh).WithMany(p => p.CallCycleUserHelpers)
                .HasForeignKey(d => d.CcuhDhId)
                .HasConstraintName("FK_CCUH_REF_DH");

            entity.HasOne(d => d.CcuhUs).WithMany(p => p.CallCycleUserHelpers)
                .HasForeignKey(d => d.CcuhUsId)
                .HasConstraintName("FK_CCUH_REF_US");
        });

        modelBuilder.Entity<CallcycleDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCcdId, e.SCcdSmId, e.SCcdVersion }).HasFillFactor(90);

            entity.ToTable("CALLCYCLE_DETAILS_SNC", "syn");

            entity.Property(e => e.SCcdId).HasColumnName("s_ccd_id");
            entity.Property(e => e.SCcdSmId).HasColumnName("s_ccd_sm_id");
            entity.Property(e => e.SCcdVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ccd_version");
            entity.Property(e => e.SCcdCcId).HasColumnName("s_ccd_cc_id");
            entity.Property(e => e.SCcdCuId).HasColumnName("s_ccd_cu_id");
            entity.Property(e => e.SCcdDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ccd_date");
            entity.Property(e => e.SCcdDateInt).HasColumnName("s_ccd_date_int");
            entity.Property(e => e.SCcdDaynb).HasColumnName("s_ccd_daynb");
            entity.Property(e => e.SCcdSeq).HasColumnName("s_ccd_seq");
            entity.Property(e => e.SCcdSynched)
                .HasDefaultValue(0)
                .HasColumnName("s_ccd_synched");
            entity.Property(e => e.SCcdUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ccd_update_date");
            entity.Property(e => e.SCcdVisitState).HasColumnName("s_ccd_visit_state");
            entity.Property(e => e.SCcdVtId).HasColumnName("s_ccd_vt_id");
        });

        modelBuilder.Entity<ChartsDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CHARTS_DATA");

            entity.Property(e => e.ChdChartCode)
                .HasMaxLength(32)
                .HasColumnName("chd_chart_code");
            entity.Property(e => e.ChdCode)
                .HasMaxLength(32)
                .HasColumnName("chd_code");
            entity.Property(e => e.ChdDate)
                .HasColumnType("datetime")
                .HasColumnName("chd_date");
            entity.Property(e => e.ChdDate1)
                .HasColumnType("datetime")
                .HasColumnName("chd_date1");
            entity.Property(e => e.ChdDate2)
                .HasColumnType("datetime")
                .HasColumnName("chd_date2");
            entity.Property(e => e.ChdDescription)
                .HasMaxLength(100)
                .HasColumnName("chd_description");
            entity.Property(e => e.ChdGroup)
                .HasMaxLength(32)
                .HasColumnName("chd_group");
            entity.Property(e => e.ChdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("chd_id");
            entity.Property(e => e.ChdNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("chd_num1");
            entity.Property(e => e.ChdNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("chd_num2");
            entity.Property(e => e.ChdOrder).HasColumnName("chd_order");
            entity.Property(e => e.ChdSmId).HasColumnName("chd_sm_id");
            entity.Property(e => e.ChdText1)
                .HasMaxLength(255)
                .HasColumnName("chd_text1");
            entity.Property(e => e.ChdText2)
                .HasMaxLength(255)
                .HasColumnName("chd_text2");
            entity.Property(e => e.ChdValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("chd_value");
        });

        modelBuilder.Entity<CheckLoadDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCldId, e.SCldSmId, e.SCldVersion }).HasFillFactor(90);

            entity.ToTable("CHECK_LOAD_DETAILS_SNC", "syn");

            entity.Property(e => e.SCldId).HasColumnName("s_cld_id");
            entity.Property(e => e.SCldSmId).HasColumnName("s_cld_sm_id");
            entity.Property(e => e.SCldVersion)
                .HasMaxLength(25)
                .HasColumnName("s_cld_version");
            entity.Property(e => e.SCldClId).HasColumnName("s_cld_cl_id");
            entity.Property(e => e.SCldExpirydate)
                .HasColumnType("datetime")
                .HasColumnName("s_cld_expirydate");
            entity.Property(e => e.SCldLotno)
                .HasMaxLength(150)
                .HasColumnName("s_cld_lotno");
            entity.Property(e => e.SCldPackQtyLod).HasColumnName("s_cld_pack_qty_lod");
            entity.Property(e => e.SCldPackQtyVld).HasColumnName("s_cld_pack_qty_vld");
            entity.Property(e => e.SCldPrId).HasColumnName("s_cld_pr_id");
            entity.Property(e => e.SCldSynched).HasColumnName("s_cld_synched");
            entity.Property(e => e.SCldUnitQtyLod)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_cld_unit_qty_lod");
            entity.Property(e => e.SCldUnitQtyVld)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_cld_unit_qty_vld");
        });

        modelBuilder.Entity<CheckLoadSnc>(entity =>
        {
            entity.HasKey(e => new { e.SClId, e.SClSmId, e.SClVersion })
                .HasName("PK_CHECK_LOAD_snc")
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("CHECK_LOAD_SNC", "syn");

            entity.Property(e => e.SClId).HasColumnName("s_cl_id");
            entity.Property(e => e.SClSmId).HasColumnName("s_cl_sm_id");
            entity.Property(e => e.SClVersion)
                .HasMaxLength(25)
                .HasColumnName("s_cl_version");
            entity.Property(e => e.SClCode)
                .HasMaxLength(32)
                .HasColumnName("s_cl_code");
            entity.Property(e => e.SClComment)
                .HasMaxLength(100)
                .HasColumnName("s_cl_comment");
            entity.Property(e => e.SClDate)
                .HasColumnType("datetime")
                .HasColumnName("s_cl_date");
            entity.Property(e => e.SClSignFilename)
                .HasMaxLength(100)
                .HasColumnName("s_cl_sign_filename");
            entity.Property(e => e.SClStatus).HasColumnName("s_cl_status");
            entity.Property(e => e.SClSynched).HasColumnName("s_cl_synched");
        });

        modelBuilder.Entity<CodeSequence>(entity =>
        {
            entity.HasKey(e => e.CsqId).HasFillFactor(90);

            entity.ToTable("CODE_SEQUENCE", "cmn");

            entity.HasIndex(e => new { e.CsqBuId, e.CsqTableName }, "csq_table_name_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.CsqId).HasColumnName("csq_id");
            entity.Property(e => e.CsqActive)
                .HasDefaultValue((short)1)
                .HasColumnName("csq_active");
            entity.Property(e => e.CsqBuId).HasColumnName("csq_bu_id");
            entity.Property(e => e.CsqLength)
                .HasDefaultValue(16)
                .HasColumnName("csq_length");
            entity.Property(e => e.CsqPostfix)
                .HasMaxLength(16)
                .HasColumnName("csq_postfix");
            entity.Property(e => e.CsqPrefix)
                .HasMaxLength(16)
                .HasColumnName("csq_prefix");
            entity.Property(e => e.CsqSchema)
                .HasMaxLength(32)
                .HasColumnName("csq_schema");
            entity.Property(e => e.CsqSequence)
                .HasDefaultValue(1)
                .HasColumnName("csq_sequence");
            entity.Property(e => e.CsqTableName)
                .HasMaxLength(128)
                .HasColumnName("csq_table_name");

            entity.HasOne(d => d.CsqBu).WithMany(p => p.CodeSequences)
                .HasForeignKey(d => d.CsqBuId)
                .HasConstraintName("FK_CSQ_REF_BU");
        });

        modelBuilder.Entity<Codesc>(entity =>
        {
            entity.HasKey(e => e.CdId).HasFillFactor(90);

            entity.ToTable("CODESC", "cmn");

            entity.HasIndex(e => new { e.CdFcCode, e.CdCode }, "IDX_CD_CODE_FC_CODE")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.CdFcCode, e.CdCode, e.CdMdId }, "idx_code_fc_code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.CdId).HasColumnName("cd_id");
            entity.Property(e => e.CdActive)
                .HasDefaultValue((short)1)
                .HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren)
                .HasDefaultValue((short)-1)
                .HasColumnName("cd_has_children");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel)
                .HasDefaultValue((short)1)
                .HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");

            entity.HasOne(d => d.CdBu).WithMany(p => p.Codescs)
                .HasForeignKey(d => d.CdBuId)
                .HasConstraintName("FK_CD_REF_BU");

            entity.HasOne(d => d.CdCd).WithMany(p => p.InverseCdCd)
                .HasForeignKey(d => d.CdCdId)
                .HasConstraintName("FK_CD_REF_CD");

            entity.HasOne(d => d.CdFc).WithMany(p => p.Codescs)
                .HasForeignKey(d => d.CdFcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CODESC_REFERENCE_FAMILY_C");

            entity.HasOne(d => d.CdMd).WithMany(p => p.Codescs)
                .HasForeignKey(d => d.CdMdId)
                .HasConstraintName("FK_CD_REF_MD");
        });

        modelBuilder.Entity<CodescLabel>(entity =>
        {
            entity.HasKey(e => e.ClId).HasFillFactor(90);

            entity.ToTable("CODESC_LABELS", "cmn");

            entity.Property(e => e.ClId).HasColumnName("cl_id");
            entity.Property(e => e.ClDate1)
                .HasMaxLength(64)
                .HasColumnName("cl_date1");
            entity.Property(e => e.ClDate2)
                .HasMaxLength(64)
                .HasColumnName("cl_date2");
            entity.Property(e => e.ClFcId).HasColumnName("cl_fc_id");
            entity.Property(e => e.ClNum1)
                .HasMaxLength(64)
                .HasColumnName("cl_num1");
            entity.Property(e => e.ClNum2)
                .HasMaxLength(64)
                .HasColumnName("cl_num2");
            entity.Property(e => e.ClNum3)
                .HasMaxLength(64)
                .HasColumnName("cl_num3");
            entity.Property(e => e.ClText1)
                .HasMaxLength(64)
                .HasColumnName("cl_text1");
            entity.Property(e => e.ClText2)
                .HasMaxLength(64)
                .HasColumnName("cl_text2");

            entity.HasOne(d => d.ClFc).WithMany(p => p.CodescLabels)
                .HasForeignKey(d => d.ClFcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CL_REF_FC");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CpId).HasFillFactor(90);

            entity.ToTable("COMPANY", "cmn");

            entity.Property(e => e.CpId).HasColumnName("cp_id");
            entity.Property(e => e.CpAddress)
                .HasMaxLength(20)
                .HasColumnName("cp_address");
            entity.Property(e => e.CpContactPerson)
                .HasMaxLength(50)
                .HasColumnName("cp_contact_person");
            entity.Property(e => e.CpEmail)
                .HasMaxLength(50)
                .HasColumnName("cp_email");
            entity.Property(e => e.CpLogo)
                .HasMaxLength(255)
                .HasColumnName("cp_logo");
            entity.Property(e => e.CpNameLan1)
                .HasMaxLength(100)
                .HasColumnName("cp_name_lan1");
            entity.Property(e => e.CpNameLan2)
                .HasMaxLength(100)
                .HasColumnName("cp_name_lan2");
            entity.Property(e => e.CpNameLan3)
                .HasMaxLength(100)
                .HasColumnName("cp_name_lan3");
            entity.Property(e => e.CpPhone)
                .HasMaxLength(20)
                .HasColumnName("cp_phone");
            entity.Property(e => e.CpPrintableName)
                .HasMaxLength(100)
                .HasColumnName("cp_printable_name");
            entity.Property(e => e.CpRegistryNo)
                .HasMaxLength(20)
                .HasColumnName("cp_registry_no");
            entity.Property(e => e.CpWebsite)
                .HasMaxLength(60)
                .HasColumnName("cp_website");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.CnId).HasFillFactor(90);

            entity.ToTable("CONTRACT", "svy");

            entity.Property(e => e.CnId).HasColumnName("cn_id");
            entity.Property(e => e.CnBuId).HasColumnName("cn_bu_id");
            entity.Property(e => e.CnCdIdCnsts).HasColumnName("cn_cd_id_cnsts");
            entity.Property(e => e.CnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cn_code");
            entity.Property(e => e.CnCreatedBy).HasColumnName("cn_created_by");
            entity.Property(e => e.CnCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("cn_creation_date");
            entity.Property(e => e.CnDateFrom)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cn_date_from");
            entity.Property(e => e.CnDateTo)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("cn_date_to");
            entity.Property(e => e.CnDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("cn_description_lan1");
            entity.Property(e => e.CnDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("cn_description_lan2");
            entity.Property(e => e.CnDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("cn_description_lan3");
            entity.Property(e => e.CnRemarks)
                .HasMaxLength(4000)
                .HasColumnName("cn_remarks");
            entity.Property(e => e.CnThpsId).HasColumnName("cn_thps_id");
            entity.Property(e => e.CnUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("cn_update_date");
            entity.Property(e => e.CnUpdatedBy).HasColumnName("cn_updated_by");
            entity.Property(e => e.CnUsId).HasColumnName("cn_us_id");

            entity.HasOne(d => d.CnBu).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CnBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_REF_BU");

            entity.HasOne(d => d.CnThps).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CnThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_REF_THPS");

            entity.HasOne(d => d.CnUs).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CnUsId)
                .HasConstraintName("FK_CN_REF_US");
        });

        modelBuilder.Entity<ContractCondition>(entity =>
        {
            entity.HasKey(e => e.CncId).HasFillFactor(90);

            entity.ToTable("CONTRACT_CONDITION", "svy");

            entity.HasIndex(e => new { e.CncCnId, e.CncSrId }, "cnc_cn_sr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.CncId).HasColumnName("cnc_id");
            entity.Property(e => e.CncCdIdResp).HasColumnName("cnc_cd_id_resp");
            entity.Property(e => e.CncCnId).HasColumnName("cnc_cn_id");
            entity.Property(e => e.CncSrId).HasColumnName("cnc_sr_id");

            entity.HasOne(d => d.CncCn).WithMany(p => p.ContractConditions)
                .HasForeignKey(d => d.CncCnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CNC_REF_CN");

            entity.HasOne(d => d.CncSr).WithMany(p => p.ContractConditions)
                .HasForeignKey(d => d.CncSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CNC_REF_SR");
        });

        modelBuilder.Entity<ContractTerm>(entity =>
        {
            entity.HasKey(e => e.CntId).HasFillFactor(90);

            entity.ToTable("CONTRACT_TERM", "svy");

            entity.Property(e => e.CntId).HasColumnName("cnt_id");
            entity.Property(e => e.CntCdIdCtv).HasColumnName("cnt_cd_id_ctv");
            entity.Property(e => e.CntCnId).HasColumnName("cnt_cn_id");
            entity.Property(e => e.CntCntId).HasColumnName("cnt_cnt_id");
            entity.Property(e => e.CntCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cnt_code");
            entity.Property(e => e.CntDescriptionLan1)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan1");
            entity.Property(e => e.CntDescriptionLan2)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan2");
            entity.Property(e => e.CntDescriptionLan3)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan3");

            entity.HasOne(d => d.CntCdIdCtvNavigation).WithMany(p => p.ContractTerms)
                .HasForeignKey(d => d.CntCdIdCtv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CN_REF_CD_CTV");

            entity.HasOne(d => d.CntCn).WithMany(p => p.ContractTerms)
                .HasForeignKey(d => d.CntCnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CNT_REF_CN");
        });

        modelBuilder.Entity<ContractTermV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONTRACT_TERM_V", "svy");

            entity.Property(e => e.CntCdIdCtv).HasColumnName("cnt_cd_id_ctv");
            entity.Property(e => e.CntCnId).HasColumnName("cnt_cn_id");
            entity.Property(e => e.CntCntId).HasColumnName("cnt_cnt_id");
            entity.Property(e => e.CntCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cnt_code");
            entity.Property(e => e.CntDescriptionLan1)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan1");
            entity.Property(e => e.CntDescriptionLan2)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan2");
            entity.Property(e => e.CntDescriptionLan3)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan3");
            entity.Property(e => e.CntHierarchy)
                .HasMaxLength(100)
                .HasColumnName("cnt_hierarchy");
            entity.Property(e => e.CntId).HasColumnName("cnt_id");
            entity.Property(e => e.CntLevel).HasColumnName("cnt_level");
        });

        modelBuilder.Entity<Creditdebitnote>(entity =>
        {
            entity.HasKey(e => e.CdnId).HasFillFactor(90);

            entity.ToTable("CREDITDEBITNOTE", "sls");

            entity.Property(e => e.CdnId).HasColumnName("cdn_id");
            entity.Property(e => e.CdnAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("cdn_amount");
            entity.Property(e => e.CdnBuId).HasColumnName("cdn_bu_id");
            entity.Property(e => e.CdnCdIdCdnrsn).HasColumnName("cdn_cd_id_cdnrsn");
            entity.Property(e => e.CdnCdIdCdnsts).HasColumnName("cdn_cd_id_cdnsts");
            entity.Property(e => e.CdnCdIdCdtyp).HasColumnName("cdn_cd_id_cdtyp");
            entity.Property(e => e.CdnCdIdCur).HasColumnName("cdn_cd_id_cur");
            entity.Property(e => e.CdnCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cdn_create_date");
            entity.Property(e => e.CdnDate)
                .HasColumnType("datetime")
                .HasColumnName("cdn_date");
            entity.Property(e => e.CdnDiId).HasColumnName("cdn_di_id");
            entity.Property(e => e.CdnRemarks)
                .HasMaxLength(1000)
                .HasColumnName("cdn_remarks");
            entity.Property(e => e.CdnThpsId).HasColumnName("cdn_thps_id");
            entity.Property(e => e.CdnUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("cdn_update_date");
            entity.Property(e => e.CdnUsIdCr).HasColumnName("cdn_us_id_cr");

            entity.HasOne(d => d.CdnBu).WithMany(p => p.Creditdebitnotes)
                .HasForeignKey(d => d.CdnBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDN_REF_BU");

            entity.HasOne(d => d.CdnCdIdCdnrsnNavigation).WithMany(p => p.CreditdebitnoteCdnCdIdCdnrsnNavigations)
                .HasForeignKey(d => d.CdnCdIdCdnrsn)
                .HasConstraintName("FK_CDN_REF_CD_CDNRSN");

            entity.HasOne(d => d.CdnCdIdCdtypNavigation).WithMany(p => p.CreditdebitnoteCdnCdIdCdtypNavigations)
                .HasForeignKey(d => d.CdnCdIdCdtyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDN_REF_CD_CDTYP");

            entity.HasOne(d => d.CdnCdIdCurNavigation).WithMany(p => p.CreditdebitnoteCdnCdIdCurNavigations)
                .HasForeignKey(d => d.CdnCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDN_REF_CD_cur");

            entity.HasOne(d => d.CdnDi).WithMany(p => p.Creditdebitnotes)
                .HasForeignKey(d => d.CdnDiId)
                .HasConstraintName("FK_CDN_REF_DI");

            entity.HasOne(d => d.CdnThps).WithMany(p => p.Creditdebitnotes)
                .HasForeignKey(d => d.CdnThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDN_REF_THPS");
        });

        modelBuilder.Entity<CreditdebitnoteInvoice>(entity =>
        {
            entity.HasKey(e => e.CdniId).HasFillFactor(90);

            entity.ToTable("CREDITDEBITNOTE_INVOICES", "sls");

            entity.Property(e => e.CdniId).HasColumnName("cdni_id");
            entity.Property(e => e.CdniCdnId).HasColumnName("cdni_cdn_id");
            entity.Property(e => e.CdniCreatedBy).HasColumnName("cdni_created_by");
            entity.Property(e => e.CdniCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("cdni_created_date");
            entity.Property(e => e.CdniTsId).HasColumnName("cdni_ts_id");

            entity.HasOne(d => d.CdniCdn).WithMany(p => p.CreditdebitnoteInvoices)
                .HasForeignKey(d => d.CdniCdnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDNI_REF_CDN");

            entity.HasOne(d => d.CdniTs).WithMany(p => p.CreditdebitnoteInvoices)
                .HasForeignKey(d => d.CdniTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDNI_REF_TS");
        });

        modelBuilder.Entity<CrossTableId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CROSS_TABLE_ID", "syn");

            entity.Property(e => e.CtDevice)
                .HasMaxLength(32)
                .HasColumnName("ct_device");
            entity.Property(e => e.CtNewId).HasColumnName("ct_new_id");
            entity.Property(e => e.CtOldId).HasColumnName("ct_old_id");
            entity.Property(e => e.CtTableName)
                .HasMaxLength(32)
                .HasColumnName("ct_table_name");
            entity.Property(e => e.CtUniquekey)
                .HasMaxLength(128)
                .HasColumnName("ct_uniquekey");
            entity.Property(e => e.CtVersion)
                .HasMaxLength(25)
                .HasColumnName("ct_version");
        });

        modelBuilder.Entity<CurrencyRate>(entity =>
        {
            entity.HasKey(e => e.CrId).HasFillFactor(90);

            entity.ToTable("CURRENCY_RATE", "sls");

            entity.Property(e => e.CrId).HasColumnName("cr_id");
            entity.Property(e => e.CrBuId).HasColumnName("cr_bu_id");
            entity.Property(e => e.CrCdIdCurFrom).HasColumnName("cr_cd_id_cur_from");
            entity.Property(e => e.CrCdIdCurTo).HasColumnName("cr_cd_id_cur_to");
            entity.Property(e => e.CrDate)
                .HasColumnType("datetime")
                .HasColumnName("cr_date");
            entity.Property(e => e.CrMaxRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_max_rate_buy");
            entity.Property(e => e.CrMaxRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_max_rate_sell");
            entity.Property(e => e.CrMinRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_min_rate_buy");
            entity.Property(e => e.CrMinRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_min_rate_sell");
            entity.Property(e => e.CrRateBuy)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_rate_buy");
            entity.Property(e => e.CrRateSell)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("cr_rate_sell");
        });

        modelBuilder.Entity<CustomProperty>(entity =>
        {
            entity.HasKey(e => e.CprId).HasFillFactor(90);

            entity.ToTable("CUSTOM_PROPERTY", "cmn");

            entity.HasIndex(e => e.CprCode, "cpr_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.CprId).HasColumnName("cpr_id");
            entity.Property(e => e.CprBuId).HasColumnName("cpr_bu_id");
            entity.Property(e => e.CprCdIdMod).HasColumnName("cpr_cd_id_mod");
            entity.Property(e => e.CprCdIdPrt).HasColumnName("cpr_cd_id_prt");
            entity.Property(e => e.CprCdIdPvt).HasColumnName("cpr_cd_id_pvt");
            entity.Property(e => e.CprCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cpr_code");
        });

        modelBuilder.Entity<CustomerAddressSnc>(entity =>
        {
            entity.HasKey(e => new { e.SAdId, e.SAdSmId, e.SAdVersion }).HasFillFactor(90);

            entity.ToTable("CUSTOMER_ADDRESS_SNC", "syn");

            entity.Property(e => e.SAdId).HasColumnName("s_ad_id");
            entity.Property(e => e.SAdSmId).HasColumnName("s_ad_sm_id");
            entity.Property(e => e.SAdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ad_version");
            entity.Property(e => e.SAdAddress1)
                .HasMaxLength(150)
                .HasColumnName("s_ad_address1");
            entity.Property(e => e.SAdAddress2)
                .HasMaxLength(150)
                .HasColumnName("s_ad_address2");
            entity.Property(e => e.SAdAddress3)
                .HasMaxLength(150)
                .HasColumnName("s_ad_address3");
            entity.Property(e => e.SAdCity)
                .HasMaxLength(32)
                .HasColumnName("s_ad_city");
            entity.Property(e => e.SAdCountry)
                .HasMaxLength(32)
                .HasColumnName("s_ad_country");
            entity.Property(e => e.SAdCuId).HasColumnName("s_ad_cu_id");
            entity.Property(e => e.SAdEmail)
                .HasMaxLength(32)
                .HasColumnName("s_ad_email");
            entity.Property(e => e.SAdFax)
                .HasMaxLength(132)
                .HasColumnName("s_ad_fax");
            entity.Property(e => e.SAdIsCreated).HasColumnName("s_ad_is_created");
            entity.Property(e => e.SAdIsModified).HasColumnName("s_ad_is_modified");
            entity.Property(e => e.SAdLatitude)
                .HasMaxLength(32)
                .HasColumnName("s_ad_latitude");
            entity.Property(e => e.SAdLongitude)
                .HasMaxLength(32)
                .HasColumnName("s_ad_longitude");
            entity.Property(e => e.SAdMobile)
                .HasMaxLength(132)
                .HasColumnName("s_ad_mobile");
            entity.Property(e => e.SAdPhone)
                .HasMaxLength(132)
                .HasColumnName("s_ad_phone");
            entity.Property(e => e.SAdWebsite)
                .HasMaxLength(32)
                .HasColumnName("s_ad_website");
        });

        modelBuilder.Entity<CustomerAssetSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCaId, e.SCaSmId, e.SCaVersion })
                .HasName("pk_customer_asset_snc")
                .HasFillFactor(90);

            entity.ToTable("CUSTOMER_ASSET_SNC", "syn");

            entity.Property(e => e.SCaId).HasColumnName("s_ca_id");
            entity.Property(e => e.SCaSmId)
                .HasMaxLength(32)
                .HasColumnName("s_ca_sm_id");
            entity.Property(e => e.SCaVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ca_version");
            entity.Property(e => e.SCaCuId).HasColumnName("s_ca_cu_id");
            entity.Property(e => e.SCaDescription)
                .HasMaxLength(250)
                .HasColumnName("s_ca_description");
            entity.Property(e => e.SCaIsCreated).HasColumnName("s_ca_is_created");
            entity.Property(e => e.SCaIsModified).HasColumnName("s_ca_is_modified");
            entity.Property(e => e.SCaQuantity).HasColumnName("s_ca_quantity");
            entity.Property(e => e.SCaSerialNb)
                .HasMaxLength(100)
                .HasColumnName("s_ca_serial_nb");
            entity.Property(e => e.SCaStatus)
                .HasMaxLength(100)
                .HasColumnName("s_ca_status");
        });

        modelBuilder.Entity<CustomerBillShipSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCbsId, e.SCbsSmId, e.SCbsVersion })
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("CUSTOMER_BILL_SHIP_SNC", "syn");

            entity.Property(e => e.SCbsId).HasColumnName("s_cbs_id");
            entity.Property(e => e.SCbsSmId)
                .HasMaxLength(32)
                .HasColumnName("s_cbs_sm_id");
            entity.Property(e => e.SCbsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_cbs_version");
            entity.Property(e => e.SCbsCuIdBill).HasColumnName("s_cbs_cu_id_bill");
            entity.Property(e => e.SCbsCuIdShip).HasColumnName("s_cbs_cu_id_ship");
        });

        modelBuilder.Entity<CustomerFinanceSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCfId, e.SCfSmId, e.SCfVersion }).HasFillFactor(90);

            entity.ToTable("CUSTOMER_FINANCE_SNC", "syn");

            entity.Property(e => e.SCfId).HasColumnName("s_cf_id");
            entity.Property(e => e.SCfSmId).HasColumnName("s_cf_sm_id");
            entity.Property(e => e.SCfVersion)
                .HasMaxLength(25)
                .HasColumnName("s_cf_version");
            entity.Property(e => e.SCfAddressRef)
                .HasMaxLength(50)
                .HasColumnName("s_cf_address_ref");
            entity.Property(e => e.SCfBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cf_balance");
            entity.Property(e => e.SCfCdIdCur).HasColumnName("s_cf_cd_id_cur");
            entity.Property(e => e.SCfCommercialNo)
                .HasMaxLength(32)
                .HasColumnName("s_cf_commercial_no");
            entity.Property(e => e.SCfCreditDaysLimit).HasColumnName("s_cf_credit_days_limit");
            entity.Property(e => e.SCfCreditLimit)
                .HasMaxLength(255)
                .HasColumnName("s_cf_credit_limit");
            entity.Property(e => e.SCfCuId).HasColumnName("s_cf_cu_id");
            entity.Property(e => e.SCfCuUid)
                .HasMaxLength(128)
                .HasColumnName("s_cf_cu_uid");
            entity.Property(e => e.SCfDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cf_discount");
            entity.Property(e => e.SCfFeId).HasColumnName("s_cf_fe_id");
            entity.Property(e => e.SCfIsCreated).HasColumnName("s_cf_is_created");
            entity.Property(e => e.SCfIsModified).HasColumnName("s_cf_is_modified");
            entity.Property(e => e.SCfPaymentType)
                .HasMaxLength(32)
                .HasColumnName("s_cf_payment_type");
            entity.Property(e => e.SCfPtId).HasColumnName("s_cf_pt_id");
            entity.Property(e => e.SCfTaxId)
                .HasMaxLength(32)
                .HasColumnName("s_cf_tax_id");
        });

        modelBuilder.Entity<CustomerPlu>(entity =>
        {
            entity.HasKey(e => e.CpId).HasFillFactor(90);

            entity.ToTable("CUSTOMER_PLUS", "cmn");

            entity.Property(e => e.CpId).HasColumnName("cp_id");
            entity.Property(e => e.CpAddressLine)
                .HasMaxLength(128)
                .HasColumnName("cp_address_line");
            entity.Property(e => e.CpArea)
                .HasMaxLength(128)
                .HasColumnName("cp_area");
            entity.Property(e => e.CpAttribute01)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute01");
            entity.Property(e => e.CpAttribute02)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute02");
            entity.Property(e => e.CpAttribute03)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute03");
            entity.Property(e => e.CpAttribute04)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute04");
            entity.Property(e => e.CpAttribute05)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute05");
            entity.Property(e => e.CpAttribute06)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute06");
            entity.Property(e => e.CpAttribute07)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute07");
            entity.Property(e => e.CpAttribute08)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute08");
            entity.Property(e => e.CpAttribute09)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute09");
            entity.Property(e => e.CpAttribute10)
                .HasMaxLength(128)
                .HasColumnName("cp_attribute10");
            entity.Property(e => e.CpCell)
                .HasMaxLength(128)
                .HasColumnName("cp_cell");
            entity.Property(e => e.CpCity)
                .HasMaxLength(128)
                .HasColumnName("cp_city");
            entity.Property(e => e.CpComments)
                .HasMaxLength(128)
                .HasColumnName("cp_comments");
            entity.Property(e => e.CpCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("cp_creation_date");
            entity.Property(e => e.CpIsApproved).HasColumnName("cp_is_approved");
            entity.Property(e => e.CpIsCreated).HasColumnName("cp_is_created");
            entity.Property(e => e.CpLatitude)
                .HasMaxLength(128)
                .HasColumnName("cp_latitude");
            entity.Property(e => e.CpLongitude)
                .HasMaxLength(128)
                .HasColumnName("cp_longitude");
            entity.Property(e => e.CpName)
                .HasMaxLength(128)
                .HasColumnName("cp_name");
            entity.Property(e => e.CpPhone)
                .HasMaxLength(128)
                .HasColumnName("cp_phone");
            entity.Property(e => e.CpSubarea)
                .HasMaxLength(128)
                .HasColumnName("cp_subarea");
            entity.Property(e => e.CpUsCreatedBy).HasColumnName("cp_us_created_by");
            entity.Property(e => e.CpZone)
                .HasMaxLength(128)
                .HasColumnName("cp_zone");
        });

        modelBuilder.Entity<CustomerPlusSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCpId, e.SCpSmId, e.SCpVersion })
                .HasName("pk_CUSTOMER_PLUS_SNC")
                .HasFillFactor(90);

            entity.ToTable("CUSTOMER_PLUS_SNC", "syn");

            entity.Property(e => e.SCpId).HasColumnName("s_cp_id");
            entity.Property(e => e.SCpSmId).HasColumnName("s_cp_sm_id");
            entity.Property(e => e.SCpVersion)
                .HasMaxLength(32)
                .HasColumnName("s_cp_version");
            entity.Property(e => e.SCpAddressLine)
                .HasMaxLength(128)
                .HasColumnName("s_cp_address_line");
            entity.Property(e => e.SCpArea)
                .HasMaxLength(128)
                .HasColumnName("s_cp_area");
            entity.Property(e => e.SCpAttribute01)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute01");
            entity.Property(e => e.SCpAttribute02)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute02");
            entity.Property(e => e.SCpAttribute03)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute03");
            entity.Property(e => e.SCpAttribute04)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute04");
            entity.Property(e => e.SCpAttribute05)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute05");
            entity.Property(e => e.SCpAttribute06)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute06");
            entity.Property(e => e.SCpAttribute07)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute07");
            entity.Property(e => e.SCpAttribute08)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute08");
            entity.Property(e => e.SCpAttribute09)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute09");
            entity.Property(e => e.SCpAttribute10)
                .HasMaxLength(128)
                .HasColumnName("s_cp_attribute10");
            entity.Property(e => e.SCpCell)
                .HasMaxLength(128)
                .HasColumnName("s_cp_cell");
            entity.Property(e => e.SCpCity)
                .HasMaxLength(128)
                .HasColumnName("s_cp_city");
            entity.Property(e => e.SCpComments)
                .HasMaxLength(128)
                .HasColumnName("s_cp_comments");
            entity.Property(e => e.SCpCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_cp_creation_date");
            entity.Property(e => e.SCpIsCreated).HasColumnName("s_cp_is_created");
            entity.Property(e => e.SCpLatitude)
                .HasMaxLength(128)
                .HasColumnName("s_cp_latitude");
            entity.Property(e => e.SCpLongitude)
                .HasMaxLength(128)
                .HasColumnName("s_cp_longitude");
            entity.Property(e => e.SCpName)
                .HasMaxLength(128)
                .HasColumnName("s_cp_name");
            entity.Property(e => e.SCpPhone)
                .HasMaxLength(128)
                .HasColumnName("s_cp_phone");
            entity.Property(e => e.SCpSmCreatedBy).HasColumnName("s_cp_sm_created_by");
            entity.Property(e => e.SCpSubarea)
                .HasMaxLength(128)
                .HasColumnName("s_cp_subarea");
            entity.Property(e => e.SCpZone)
                .HasMaxLength(128)
                .HasColumnName("s_cp_zone");
        });

        modelBuilder.Entity<CustomerSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCuId, e.SCuSmId, e.SCuVersion }).HasFillFactor(90);

            entity.ToTable("CUSTOMER_SNC", "syn");

            entity.Property(e => e.SCuId).HasColumnName("s_cu_id");
            entity.Property(e => e.SCuSmId).HasColumnName("s_cu_sm_id");
            entity.Property(e => e.SCuVersion)
                .HasMaxLength(25)
                .HasColumnName("s_cu_version");
            entity.Property(e => e.SCuActive).HasColumnName("s_cu_active");
            entity.Property(e => e.SCuBarcode)
                .HasMaxLength(32)
                .HasColumnName("s_cu_barcode");
            entity.Property(e => e.SCuCdIdCcg).HasColumnName("s_cu_cd_id_ccg");
            entity.Property(e => e.SCuCdIdCgq).HasColumnName("s_cu_cd_id_cgq");
            entity.Property(e => e.SCuCdIdDay).HasColumnName("s_cu_cd_id_day");
            entity.Property(e => e.SCuCode)
                .HasMaxLength(32)
                .HasColumnName("s_cu_code");
            entity.Property(e => e.SCuContactName)
                .HasMaxLength(100)
                .HasColumnName("s_cu_contact_name");
            entity.Property(e => e.SCuContactNameAr)
                .HasMaxLength(100)
                .HasColumnName("s_cu_contact_name_ar");
            entity.Property(e => e.SCuDesiredTime)
                .HasMaxLength(64)
                .HasColumnName("s_cu_desired_time");
            entity.Property(e => e.SCuExpectedDlvDate).HasColumnName("s_cu_expected_dlv_date");
            entity.Property(e => e.SCuFirstName)
                .HasMaxLength(64)
                .HasColumnName("s_cu_first_name");
            entity.Property(e => e.SCuGeId).HasColumnName("s_cu_ge_id");
            entity.Property(e => e.SCuIsCreated).HasColumnName("s_cu_is_created");
            entity.Property(e => e.SCuIsModified).HasColumnName("s_cu_is_modified");
            entity.Property(e => e.SCuLastName)
                .HasMaxLength(64)
                .HasColumnName("s_cu_last_name");
            entity.Property(e => e.SCuMiddleName)
                .HasMaxLength(64)
                .HasColumnName("s_cu_middle_name");
            entity.Property(e => e.SCuName)
                .HasMaxLength(100)
                .HasColumnName("s_cu_name");
            entity.Property(e => e.SCuNameAr)
                .HasMaxLength(100)
                .HasColumnName("s_cu_name_ar");
            entity.Property(e => e.SCuRefId)
                .HasMaxLength(250)
                .HasColumnName("s_cu_ref_id");
            entity.Property(e => e.SCuText)
                .HasMaxLength(255)
                .HasColumnName("s_cu_text");
            entity.Property(e => e.SCuText1)
                .HasMaxLength(250)
                .HasColumnName("s_cu_text1");
            entity.Property(e => e.SCuText2)
                .HasMaxLength(250)
                .HasColumnName("s_cu_text2");
            entity.Property(e => e.SCuText3)
                .HasMaxLength(250)
                .HasColumnName("s_cu_text3");
            entity.Property(e => e.SCuUid)
                .HasMaxLength(128)
                .HasColumnName("s_cu_uid");
        });

        modelBuilder.Entity<CustomerSurveySnc>(entity =>
        {
            entity.HasKey(e => new { e.SCsId, e.SCsSmId, e.SCsVersion }).HasFillFactor(90);

            entity.ToTable("CUSTOMER_SURVEY_SNC", "syn");

            entity.Property(e => e.SCsId).HasColumnName("s_cs_id");
            entity.Property(e => e.SCsSmId)
                .HasMaxLength(32)
                .HasColumnName("s_cs_sm_id");
            entity.Property(e => e.SCsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_cs_version");
            entity.Property(e => e.SCsCuId).HasColumnName("s_cs_cu_id");
            entity.Property(e => e.SCsScId).HasColumnName("s_cs_sc_id");
        });

        modelBuilder.Entity<CustomerTargetSnc>(entity =>
        {
            entity.HasKey(e => new { e.SCugId, e.SCugSmId, e.SCugVersion }).HasFillFactor(90);

            entity.ToTable("CUSTOMER_TARGET_SNC", "syn");

            entity.Property(e => e.SCugId).HasColumnName("s_cug_id");
            entity.Property(e => e.SCugSmId)
                .HasMaxLength(32)
                .HasColumnName("s_cug_sm_id");
            entity.Property(e => e.SCugVersion)
                .HasMaxLength(32)
                .HasColumnName("s_cug_version");
            entity.Property(e => e.SCugCuId).HasColumnName("s_cug_cu_id");
            entity.Property(e => e.SCugYmTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cug_ym_target_r");
            entity.Property(e => e.SCugYmTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cug_ym_target_v");
            entity.Property(e => e.SCugYmValue)
                .HasMaxLength(6)
                .HasColumnName("s_cug_ym_value");
            entity.Property(e => e.SCugYtdTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cug_ytd_target_r");
            entity.Property(e => e.SCugYtdTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_cug_ytd_target_v");
            entity.Property(e => e.SCugYtdValue).HasColumnName("s_cug_ytd_value");
        });

        modelBuilder.Entity<DataCollectionDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SDcdId, e.SDcdSmId, e.SDcdVersion }).HasFillFactor(90);

            entity.ToTable("DATA_COLLECTION_DETAILS_SNC", "syn");

            entity.Property(e => e.SDcdId).HasColumnName("s_dcd_id");
            entity.Property(e => e.SDcdSmId).HasColumnName("s_dcd_sm_id");
            entity.Property(e => e.SDcdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_dcd_version");
            entity.Property(e => e.SDcdBarcode)
                .HasMaxLength(32)
                .HasColumnName("s_dcd_barcode");
            entity.Property(e => e.SDcdDcId).HasColumnName("s_dcd_dc_id");
            entity.Property(e => e.SDcdDescription)
                .HasMaxLength(64)
                .HasColumnName("s_dcd_description");
            entity.Property(e => e.SDcdNum1)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_dcd_num1");
            entity.Property(e => e.SDcdNum2)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_dcd_num2");
            entity.Property(e => e.SDcdQty)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_dcd_qty");
            entity.Property(e => e.SDcdText1)
                .HasMaxLength(64)
                .HasColumnName("s_dcd_text1");
            entity.Property(e => e.SDcdText2)
                .HasMaxLength(64)
                .HasColumnName("s_dcd_text2");
        });

        modelBuilder.Entity<DataCollectionSnc>(entity =>
        {
            entity.HasKey(e => new { e.SDcId, e.SDcSmId, e.SDcVersion }).HasFillFactor(90);

            entity.ToTable("DATA_COLLECTION_SNC", "syn");

            entity.Property(e => e.SDcId).HasColumnName("s_dc_id");
            entity.Property(e => e.SDcSmId).HasColumnName("s_dc_sm_id");
            entity.Property(e => e.SDcVersion)
                .HasMaxLength(25)
                .HasColumnName("s_dc_version");
            entity.Property(e => e.SDcCdIdDct).HasColumnName("s_dc_cd_id_dct");
            entity.Property(e => e.SDcDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("s_dc_date");
            entity.Property(e => e.SDcIdXxid).HasColumnName("s_dc_id_xxid");
            entity.Property(e => e.SDcRemarks)
                .HasMaxLength(64)
                .HasColumnName("s_dc_remarks");
            entity.Property(e => e.SDcVtId).HasColumnName("s_dc_vt_id");
        });

        modelBuilder.Entity<DataInfoSnc>(entity =>
        {
            entity.HasKey(e => new { e.SDiId, e.SDiSmId, e.SDiVersion }).HasFillFactor(90);

            entity.ToTable("DATA_INFO_SNC", "syn");

            entity.Property(e => e.SDiId).HasColumnName("s_di_id");
            entity.Property(e => e.SDiSmId).HasColumnName("s_di_sm_id");
            entity.Property(e => e.SDiVersion)
                .HasMaxLength(25)
                .HasColumnName("s_di_version");
            entity.Property(e => e.SDiCreated)
                .HasColumnType("datetime")
                .HasColumnName("s_di_created");
            entity.Property(e => e.SDiMerged)
                .HasColumnType("datetime")
                .HasColumnName("s_di_merged");
        });

        modelBuilder.Entity<DateHelper>(entity =>
        {
            entity.HasKey(e => e.DhId).HasFillFactor(90);

            entity.ToTable("DATE_HELPER", "cmn");

            entity.Property(e => e.DhId).HasColumnName("dh_id");
            entity.Property(e => e.DhCalendarWeek).HasColumnName("dh_calendar_week");
            entity.Property(e => e.DhDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("dh_date");
            entity.Property(e => e.DhDay)
                .HasComputedColumnSql("(datepart(day,[dh_date]))", false)
                .HasColumnName("dh_day");
            entity.Property(e => e.DhDayInfo)
                .HasMaxLength(30)
                .HasComputedColumnSql("(datename(weekday,[dh_date]))", false)
                .HasColumnName("dh_day_info");
            entity.Property(e => e.DhDayOfYear)
                .HasComputedColumnSql("(datepart(dayofyear,[dh_date]))", false)
                .HasColumnName("dh_day_of_year");
            entity.Property(e => e.DhMonth)
                .HasComputedColumnSql("(datepart(month,[dh_date]))", false)
                .HasColumnName("dh_month");
            entity.Property(e => e.DhMonthInfo)
                .HasMaxLength(30)
                .HasComputedColumnSql("(datename(month,[dh_date]))", false)
                .HasColumnName("dh_month_info");
            entity.Property(e => e.DhQuarter)
                .HasComputedColumnSql("(datepart(quarter,[dh_date]))", false)
                .HasColumnName("dh_quarter");
            entity.Property(e => e.DhWeek)
                .HasComputedColumnSql("(datepart(week,[dh_date]))", false)
                .HasColumnName("dh_week");
            entity.Property(e => e.DhWeekDay)
                .HasComputedColumnSql("(datepart(weekday,[dh_date]))", false)
                .HasColumnName("dh_week_day");
            entity.Property(e => e.DhYear)
                .HasComputedColumnSql("(datepart(year,[dh_date]))", false)
                .HasColumnName("dh_year");
        });

        modelBuilder.Entity<DeliveryDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SDvdId, e.SDvdSmId, e.SDvdVersion }).HasFillFactor(90);

            entity.ToTable("DELIVERY_DETAILS_SNC", "syn");

            entity.Property(e => e.SDvdId).HasColumnName("s_dvd_id");
            entity.Property(e => e.SDvdSmId).HasColumnName("s_dvd_sm_id");
            entity.Property(e => e.SDvdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_dvd_version");
            entity.Property(e => e.SDvdCdIdDdq).HasColumnName("s_dvd_cd_id_ddq");
            entity.Property(e => e.SDvdDvId).HasColumnName("s_dvd_dv_id");
            entity.Property(e => e.SDvdExpiryDate)
                .HasMaxLength(10)
                .HasColumnName("s_dvd_expiry_date");
            entity.Property(e => e.SDvdLotNo)
                .HasMaxLength(32)
                .HasColumnName("s_dvd_lot_no");
            entity.Property(e => e.SDvdPackQtyDlv).HasColumnName("s_dvd_pack_qty_dlv");
            entity.Property(e => e.SDvdPackQuantity).HasColumnName("s_dvd_pack_quantity");
            entity.Property(e => e.SDvdPrBarcode)
                .HasMaxLength(32)
                .HasColumnName("s_dvd_pr_barcode");
            entity.Property(e => e.SDvdPrCode)
                .HasMaxLength(32)
                .HasColumnName("s_dvd_pr_code");
            entity.Property(e => e.SDvdPrDescription)
                .HasMaxLength(64)
                .HasColumnName("s_dvd_pr_description");
            entity.Property(e => e.SDvdPrDescriptionAr)
                .HasMaxLength(64)
                .HasColumnName("s_dvd_pr_description_ar");
            entity.Property(e => e.SDvdPrId).HasColumnName("s_dvd_pr_id");
            entity.Property(e => e.SDvdQtyDelivered)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_dvd_qty_delivered");
            entity.Property(e => e.SDvdQuantity)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_dvd_quantity");
            entity.Property(e => e.SDvdSynched)
                .HasDefaultValue((short)0)
                .HasColumnName("s_dvd_synched");
            entity.Property(e => e.SDvdUnitPerPack).HasColumnName("s_dvd_unit_per_pack");
        });

        modelBuilder.Entity<DeliveryDetailsToBeDeleted>(entity =>
        {
            entity.HasKey(e => e.DvdId)
                .HasName("PK__DELIVERY__12254B9D143836D9")
                .HasFillFactor(90);

            entity.ToTable("DELIVERY_DETAILS_TO_BE_DELETED");

            entity.Property(e => e.DvdId).HasColumnName("dvd_id");
            entity.Property(e => e.DvdCdIdDdq).HasColumnName("dvd_cd_id_ddq");
            entity.Property(e => e.DvdDvId).HasColumnName("dvd_dv_id");
            entity.Property(e => e.DvdExpiryDate)
                .HasMaxLength(255)
                .HasColumnName("dvd_expiry_date");
            entity.Property(e => e.DvdLotNo)
                .HasMaxLength(255)
                .HasColumnName("dvd_lot_no");
            entity.Property(e => e.DvdPackQtyDlv).HasColumnName("dvd_pack_qty_dlv");
            entity.Property(e => e.DvdPackQuantity).HasColumnName("dvd_pack_quantity");
            entity.Property(e => e.DvdPrBarcode)
                .HasMaxLength(255)
                .HasColumnName("dvd_pr_barcode");
            entity.Property(e => e.DvdPrCode)
                .HasMaxLength(255)
                .HasColumnName("dvd_pr_code");
            entity.Property(e => e.DvdPrDescription)
                .HasMaxLength(255)
                .HasColumnName("dvd_pr_description");
            entity.Property(e => e.DvdPrDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("dvd_pr_description_ar");
            entity.Property(e => e.DvdPrId).HasColumnName("dvd_pr_id");
            entity.Property(e => e.DvdQtyDelivered)
                .HasMaxLength(255)
                .HasColumnName("dvd_qty_delivered");
            entity.Property(e => e.DvdQuantity)
                .HasMaxLength(255)
                .HasColumnName("dvd_quantity");
            entity.Property(e => e.DvdSynched)
                .HasDefaultValue(0)
                .HasColumnName("dvd_synched");
            entity.Property(e => e.DvdUnitPerPack).HasColumnName("dvd_unit_per_pack");
        });

        modelBuilder.Entity<DeliverySnc>(entity =>
        {
            entity.HasKey(e => new { e.SDvId, e.SDvSmId, e.SDvVersion }).HasFillFactor(90);

            entity.ToTable("DELIVERY_SNC", "syn");

            entity.Property(e => e.SDvId).HasColumnName("s_dv_id");
            entity.Property(e => e.SDvSmId).HasColumnName("s_dv_sm_id");
            entity.Property(e => e.SDvVersion)
                .HasMaxLength(32)
                .HasColumnName("s_dv_version");
            entity.Property(e => e.SDvCode)
                .HasMaxLength(64)
                .HasColumnName("s_dv_code");
            entity.Property(e => e.SDvCuId).HasColumnName("s_dv_cu_id");
            entity.Property(e => e.SDvDate)
                .HasMaxLength(10)
                .HasColumnName("s_dv_date");
            entity.Property(e => e.SDvFeId).HasColumnName("s_dv_fe_id");
            entity.Property(e => e.SDvIsCreated)
                .HasDefaultValue((short)1)
                .HasColumnName("s_dv_is_created");
            entity.Property(e => e.SDvRefid).HasColumnName("s_dv_refid");
            entity.Property(e => e.SDvRemarks)
                .HasMaxLength(200)
                .HasColumnName("s_dv_remarks");
            entity.Property(e => e.SDvSignFilename)
                .HasMaxLength(100)
                .HasColumnName("s_dv_sign_filename");
            entity.Property(e => e.SDvSoId).HasColumnName("s_dv_so_id");
            entity.Property(e => e.SDvSoUid)
                .HasMaxLength(128)
                .HasColumnName("s_dv_so_uid");
            entity.Property(e => e.SDvState)
                .HasDefaultValue((short)-1)
                .HasColumnName("s_dv_state");
            entity.Property(e => e.SDvSynched)
                .HasDefaultValue((short)0)
                .HasColumnName("s_dv_synched");
            entity.Property(e => e.SDvVoided).HasColumnName("s_dv_voided");
            entity.Property(e => e.SDvVtId).HasColumnName("s_dv_vt_id");
            entity.Property(e => e.SDvVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_dv_vt_uid");
        });

        modelBuilder.Entity<DeliveryToBeDeleted>(entity =>
        {
            entity.HasKey(e => e.DvId)
                .HasName("PK__DELIVERY__AB85F3BB206E8B2F")
                .HasFillFactor(90);

            entity.ToTable("DELIVERY_TO_BE_DELETED");

            entity.Property(e => e.DvId).HasColumnName("dv_id");
            entity.Property(e => e.DvCode)
                .HasMaxLength(255)
                .HasColumnName("dv_code");
            entity.Property(e => e.DvCuId).HasColumnName("dv_cu_id");
            entity.Property(e => e.DvDate)
                .HasMaxLength(255)
                .HasColumnName("dv_date");
            entity.Property(e => e.DvFeId).HasColumnName("dv_fe_id");
            entity.Property(e => e.DvIsCreated)
                .HasDefaultValue(1)
                .HasColumnName("dv_is_created");
            entity.Property(e => e.DvRemarks)
                .HasMaxLength(255)
                .HasColumnName("dv_remarks");
            entity.Property(e => e.DvSignFilename)
                .HasMaxLength(255)
                .HasColumnName("dv_sign_filename");
            entity.Property(e => e.DvSoId).HasColumnName("dv_so_id");
            entity.Property(e => e.DvState)
                .HasDefaultValue(-1)
                .HasColumnName("dv_state");
            entity.Property(e => e.DvSynched)
                .HasDefaultValue(0)
                .HasColumnName("dv_synched");
            entity.Property(e => e.DvVoided).HasColumnName("dv_voided");
            entity.Property(e => e.DvVtId).HasColumnName("dv_vt_id");
        });

        modelBuilder.Entity<Display>(entity =>
        {
            entity.HasKey(e => e.DspId).HasFillFactor(90);

            entity.ToTable("DISPLAY", "cmn");

            entity.Property(e => e.DspId)
                .ValueGeneratedNever()
                .HasColumnName("dsp_id");
            entity.Property(e => e.CdId).HasColumnName("cd_id");
            entity.Property(e => e.DpsCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("dps_creation_date");
            entity.Property(e => e.DpsUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dps_update_date");
            entity.Property(e => e.DpsUsIdCreated).HasColumnName("dps_us_id_created");
            entity.Property(e => e.DpsUsIdModified).HasColumnName("dps_us_id_modified");
            entity.Property(e => e.DspBarcode)
                .HasMaxLength(32)
                .HasColumnName("dsp_barcode");
            entity.Property(e => e.DspCdIdDspsts).HasColumnName("dsp_cd_id_dspsts");
            entity.Property(e => e.DspCdIdDsptp).HasColumnName("dsp_cd_id_dsptp");
            entity.Property(e => e.DspCode)
                .HasMaxLength(32)
                .HasColumnName("dsp_code");
            entity.Property(e => e.DspDescription)
                .HasMaxLength(255)
                .HasColumnName("dsp_description");
            entity.Property(e => e.DspInstallationDate)
                .HasColumnType("datetime")
                .HasColumnName("dsp_installation_date");
            entity.Property(e => e.DspOrgId).HasColumnName("dsp_org_id");
            entity.Property(e => e.DspSize)
                .HasMaxLength(64)
                .HasColumnName("dsp_size");
            entity.Property(e => e.DspThpsId).HasColumnName("dsp_thps_id");

            entity.HasOne(d => d.Cd).WithMany(p => p.DisplayCds)
                .HasForeignKey(d => d.CdId)
                .HasConstraintName("FK_DISPLAY_REF_CODESC_DSPSTS");

            entity.HasOne(d => d.DspCdIdDsptpNavigation).WithMany(p => p.DisplayDspCdIdDsptpNavigations)
                .HasForeignKey(d => d.DspCdIdDsptp)
                .HasConstraintName("FK_DISPLAY_REF_CODESC_DSPTP");

            entity.HasOne(d => d.DspThps).WithMany(p => p.Displays)
                .HasForeignKey(d => d.DspThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DISPLAY_REFERENCE_THIRDPAR");
        });

        modelBuilder.Entity<DownloadLog>(entity =>
        {
            entity.HasKey(e => e.DlId).HasFillFactor(90);

            entity.ToTable("DOWNLOAD_LOG", "syn");

            entity.Property(e => e.DlId).HasColumnName("dl_id");
            entity.Property(e => e.DlAction)
                .HasMaxLength(32)
                .HasColumnName("dl_action");
            entity.Property(e => e.DlDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dl_datetime");
            entity.Property(e => e.DlUsrId).HasColumnName("dl_usr_id");
            entity.Property(e => e.DlVersion)
                .HasMaxLength(32)
                .HasColumnName("dl_version");
        });

        modelBuilder.Entity<DueInvoice>(entity =>
        {
            entity.HasKey(e => e.DiId).HasFillFactor(90);

            entity.ToTable("DUE_INVOICE", "sls");

            entity.HasIndex(e => e.DiErpSoNumber, "er_so_number");

            entity.HasIndex(e => new { e.DiBuId, e.DiUsId, e.DiNumber }, "idx_di_us_bu_number").HasFillFactor(90);

            entity.HasIndex(e => new { e.DiBuId, e.DiUsId, e.DiNumber }, "idx_us_bu_number").HasFillFactor(90);

            entity.Property(e => e.DiId).HasColumnName("di_id");
            entity.Property(e => e.DiAllowedDifference)
                .HasMaxLength(255)
                .HasColumnName("di_allowed_difference");
            entity.Property(e => e.DiBuId).HasColumnName("di_bu_id");
            entity.Property(e => e.DiCdIdCur).HasColumnName("di_cd_id_cur");
            entity.Property(e => e.DiCdIdSrc).HasColumnName("di_cd_id_src");
            entity.Property(e => e.DiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("di_create_date");
            entity.Property(e => e.DiDate)
                .HasColumnType("datetime")
                .HasColumnName("di_date");
            entity.Property(e => e.DiDescription)
                .HasMaxLength(512)
                .HasColumnName("di_description");
            entity.Property(e => e.DiDiUid)
                .HasMaxLength(255)
                .HasColumnName("di_di_uid");
            entity.Property(e => e.DiDueDate)
                .HasColumnType("datetime")
                .HasColumnName("di_due_date");
            entity.Property(e => e.DiErpSoNumber)
                .HasMaxLength(255)
                .HasColumnName("di_erp_so_number");
            entity.Property(e => e.DiErpSource).HasColumnName("di_erp_source");
            entity.Property(e => e.DiIsVat).HasColumnName("di_is_vat");
            entity.Property(e => e.DiModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("di_modified_date");
            entity.Property(e => e.DiNumber)
                .HasMaxLength(32)
                .HasColumnName("di_number");
            entity.Property(e => e.DiOrder).HasColumnName("di_order");
            entity.Property(e => e.DiOrgId).HasColumnName("di_org_id");
            entity.Property(e => e.DiOrigAmtInCur)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_orig_amt_in_cur");
            entity.Property(e => e.DiOrigCur)
                .HasMaxLength(255)
                .HasColumnName("di_orig_cur");
            entity.Property(e => e.DiPrintAmount)
                .HasColumnType("numeric(25, 6)")
                .HasColumnName("di_print_amount");
            entity.Property(e => e.DiRate)
                .HasMaxLength(50)
                .HasColumnName("di_rate");
            entity.Property(e => e.DiRemainAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_remain_amount");
            entity.Property(e => e.DiRemaingAmountBase)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_remaing_amount_base");
            entity.Property(e => e.DiText1)
                .HasMaxLength(50)
                .HasColumnName("di_text1");
            entity.Property(e => e.DiText2)
                .HasMaxLength(50)
                .HasColumnName("di_text2");
            entity.Property(e => e.DiText3)
                .HasMaxLength(50)
                .HasColumnName("di_text3");
            entity.Property(e => e.DiThpsId).HasColumnName("di_thps_id");
            entity.Property(e => e.DiTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_total_amount");
            entity.Property(e => e.DiTotalAmountBase)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_total_amount_base");
            entity.Property(e => e.DiTsId).HasColumnName("di_ts_id");
            entity.Property(e => e.DiTsOrgId).HasColumnName("di_ts_org_id");
            entity.Property(e => e.DiUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("di_uid");
            entity.Property(e => e.DiUsId).HasColumnName("di_us_id");
            entity.Property(e => e.DiUsdlbpVatRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_usdlbp_vat_rate");
            entity.Property(e => e.DiVoid).HasColumnName("di_void");
            entity.Property(e => e.DiVoucher)
                .HasMaxLength(255)
                .HasColumnName("di_Voucher");

            entity.HasOne(d => d.DiBu).WithMany(p => p.DueInvoices)
                .HasForeignKey(d => d.DiBuId)
                .HasConstraintName("FK_DI_REF_BU");

            entity.HasOne(d => d.DiCdIdCurNavigation).WithMany(p => p.DueInvoiceDiCdIdCurNavigations)
                .HasForeignKey(d => d.DiCdIdCur)
                .HasConstraintName("FK_DI_REF_CD_cur");

            entity.HasOne(d => d.DiCdIdSrcNavigation).WithMany(p => p.DueInvoiceDiCdIdSrcNavigations)
                .HasForeignKey(d => d.DiCdIdSrc)
                .HasConstraintName("FK_DI_REF_CD_SRC");

            entity.HasOne(d => d.DiThps).WithMany(p => p.DueInvoices)
                .HasForeignKey(d => d.DiThpsId)
                .HasConstraintName("FK_DI_REF_THPS");

            entity.HasOne(d => d.DiTs).WithMany(p => p.DueInvoices)
                .HasForeignKey(d => d.DiTsId)
                .HasConstraintName("FK_DI_REF_TS");

            entity.HasOne(d => d.DiUs).WithMany(p => p.DueInvoices)
                .HasForeignKey(d => d.DiUsId)
                .HasConstraintName("FK_DI_REF_US");
        });

        modelBuilder.Entity<DueTransSnc>(entity =>
        {
            entity.HasKey(e => new { e.SDtId, e.SDtSmId, e.SDtVersion }).HasFillFactor(90);

            entity.ToTable("DUE_TRANS_SNC", "syn");

            entity.Property(e => e.SDtId).HasColumnName("s_dt_id");
            entity.Property(e => e.SDtSmId).HasColumnName("s_dt_sm_id");
            entity.Property(e => e.SDtVersion)
                .HasMaxLength(25)
                .HasColumnName("s_dt_version");
            entity.Property(e => e.SDtAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_dt_amount");
            entity.Property(e => e.SDtCdIdCur).HasColumnName("s_dt_cd_id_cur");
            entity.Property(e => e.SDtCuId).HasColumnName("s_dt_cu_id");
            entity.Property(e => e.SDtCurCode)
                .HasMaxLength(8)
                .HasColumnName("s_dt_cur_code");
            entity.Property(e => e.SDtDate)
                .HasMaxLength(20)
                .HasColumnName("s_dt_date");
            entity.Property(e => e.SDtDtUid)
                .HasMaxLength(255)
                .HasColumnName("s_dt_dt_uid");
            entity.Property(e => e.SDtDueDate)
                .HasColumnType("datetime")
                .HasColumnName("s_dt_due_date");
            entity.Property(e => e.SDtDueOrder)
                .HasDefaultValue((short)0)
                .HasColumnName("s_dt_due_order");
            entity.Property(e => e.SDtFeId).HasColumnName("s_dt_fe_id");
            entity.Property(e => e.SDtImpUid)
                .HasMaxLength(32)
                .HasColumnName("s_dt_imp_uid");
            entity.Property(e => e.SDtIsCreated)
                .HasDefaultValue((short)1)
                .HasColumnName("s_dt_is_created");
            entity.Property(e => e.SDtIsModified)
                .HasDefaultValue((short)-1)
                .HasColumnName("s_dt_is_modified");
            entity.Property(e => e.SDtIsVat)
                .HasMaxLength(255)
                .HasColumnName("s_dt_is_vat");
            entity.Property(e => e.SDtRemainAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_dt_remain_amt");
            entity.Property(e => e.SDtRoundValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_dt_round_value");
            entity.Property(e => e.SDtSoId).HasColumnName("s_dt_so_id");
            entity.Property(e => e.SDtSoType)
                .HasMaxLength(50)
                .HasColumnName("s_dt_so_type");
            entity.Property(e => e.SDtSoUid)
                .HasMaxLength(128)
                .HasColumnName("s_dt_so_uid");
            entity.Property(e => e.SDtSynched).HasColumnName("s_dt_synched");
            entity.Property(e => e.SDtTransNo)
                .HasMaxLength(32)
                .HasColumnName("s_dt_trans_no");
            entity.Property(e => e.SDtUid)
                .HasMaxLength(128)
                .HasColumnName("s_dt_uid");
            entity.Property(e => e.SDtVoided)
                .HasDefaultValue((short)-999)
                .HasColumnName("s_dt_voided");
        });

        modelBuilder.Entity<DynamicQuery>(entity =>
        {
            entity.HasKey(e => e.DqId).HasFillFactor(90);

            entity.ToTable("DYNAMIC_QUERY", "cmn");

            entity.Property(e => e.DqId).HasColumnName("dq_id");
            entity.Property(e => e.DqCdIdDqt).HasColumnName("dq_cd_id_dqt");
            entity.Property(e => e.DqCode)
                .HasMaxLength(64)
                .HasColumnName("dq_code");
            entity.Property(e => e.DqDescription)
                .HasMaxLength(50)
                .HasColumnName("dq_description");
            entity.Property(e => e.DqDqId).HasColumnName("dq_dq_id");
            entity.Property(e => e.DqMdId).HasColumnName("dq_md_id");
            entity.Property(e => e.DqOrder).HasColumnName("dq_order");
            entity.Property(e => e.DqQuery)
                .HasMaxLength(4000)
                .HasColumnName("dq_query");

            entity.HasOne(d => d.DqCdIdDqtNavigation).WithMany(p => p.DynamicQueries)
                .HasForeignKey(d => d.DqCdIdDqt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DQ_REF_CD_DQT");

            entity.HasOne(d => d.DqMd).WithMany(p => p.DynamicQueries)
                .HasForeignKey(d => d.DqMdId)
                .HasConstraintName("FK_DQ_REF_MD");
        });

        modelBuilder.Entity<DynamicQueryTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DYNAMIC_QUERY_TEMP");

            entity.Property(e => e.DqCdIdDqt).HasColumnName("dq_cd_id_dqt");
            entity.Property(e => e.DqCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dq_code");
            entity.Property(e => e.DqDescription)
                .HasMaxLength(50)
                .HasColumnName("dq_description");
            entity.Property(e => e.DqDqId).HasColumnName("dq_dq_id");
            entity.Property(e => e.DqId)
                .ValueGeneratedOnAdd()
                .HasColumnName("dq_id");
            entity.Property(e => e.DqMdId).HasColumnName("dq_md_id");
            entity.Property(e => e.DqOrder).HasColumnName("dq_order");
            entity.Property(e => e.DqQuery)
                .HasMaxLength(4000)
                .HasColumnName("dq_query");
        });

        modelBuilder.Entity<EmployeeSnc>(entity =>
        {
            entity.HasKey(e => new { e.SEmId, e.SEmVersion }).HasFillFactor(90);

            entity.ToTable("EMPLOYEE_SNC", "syn");

            entity.Property(e => e.SEmId).HasColumnName("s_em_id");
            entity.Property(e => e.SEmVersion)
                .HasMaxLength(25)
                .HasColumnName("s_em_version");
            entity.Property(e => e.SEmActive).HasColumnName("s_em_active");
            entity.Property(e => e.SEmBasicSalary)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("s_em_basic_salary");
            entity.Property(e => e.SEmCanLogin).HasColumnName("s_em_can_login");
            entity.Property(e => e.SEmCdIdType).HasColumnName("s_em_cd_id_type");
            entity.Property(e => e.SEmCode)
                .HasMaxLength(32)
                .HasColumnName("s_em_code");
            entity.Property(e => e.SEmEmId).HasColumnName("s_em_em_id");
            entity.Property(e => e.SEmIsCreated).HasColumnName("s_em_is_created");
            entity.Property(e => e.SEmIsDataOwner).HasColumnName("s_em_is_data_owner");
            entity.Property(e => e.SEmLogin)
                .HasMaxLength(10)
                .HasColumnName("s_em_login");
            entity.Property(e => e.SEmName)
                .HasMaxLength(32)
                .HasColumnName("s_em_name");
            entity.Property(e => e.SEmPassword)
                .HasMaxLength(10)
                .HasColumnName("s_em_password");
            entity.Property(e => e.SEmPrinterName)
                .HasMaxLength(20)
                .HasColumnName("s_em_printer_name");
            entity.Property(e => e.SEmSynched).HasColumnName("s_em_synched");
            entity.Property(e => e.SEmUseBarcode).HasColumnName("s_em_use_barcode");
        });

        modelBuilder.Entity<EndOfDaySnc>(entity =>
        {
            entity.HasKey(e => new { e.SEodId, e.SEodSmId, e.SEodVersion })
                .HasName("pk_end_of_day_snc")
                .HasFillFactor(90);

            entity.ToTable("END_OF_DAY_SNC", "syn");

            entity.Property(e => e.SEodId).HasColumnName("s_eod_id");
            entity.Property(e => e.SEodSmId).HasColumnName("s_eod_sm_id");
            entity.Property(e => e.SEodVersion)
                .HasMaxLength(32)
                .HasColumnName("s_eod_version");
            entity.Property(e => e.SEodDate)
                .HasColumnType("datetime")
                .HasColumnName("s_eod_date");
            entity.Property(e => e.SEodSynched).HasColumnName("s_eod_synched");
        });

        modelBuilder.Entity<EodExpensesSnc>(entity =>
        {
            entity.HasKey(e => new { e.SEeId, e.SEeSmId, e.SEeVersion })
                .HasName("pk_eod_expenses_snc")
                .HasFillFactor(90);

            entity.ToTable("EOD_EXPENSES_SNC", "syn");

            entity.Property(e => e.SEeId).HasColumnName("s_ee_id");
            entity.Property(e => e.SEeSmId)
                .HasMaxLength(32)
                .HasColumnName("s_ee_sm_id");
            entity.Property(e => e.SEeVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ee_version");
            entity.Property(e => e.SEeAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_ee_amount");
            entity.Property(e => e.SEeCdIdCurr).HasColumnName("s_ee_cd_id_curr");
            entity.Property(e => e.SEeCdIdType).HasColumnName("s_ee_cd_id_type");
            entity.Property(e => e.SEeEodId).HasColumnName("s_ee_eod_id");
            entity.Property(e => e.SEeSynched).HasColumnName("s_ee_synched");
        });

        modelBuilder.Entity<EodGpsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SEgId, e.SEgSmId, e.SEgVersion })
                .HasName("pk_eod_gps_snc")
                .HasFillFactor(90);

            entity.ToTable("EOD_GPS_SNC", "syn");

            entity.Property(e => e.SEgId).HasColumnName("s_eg_id");
            entity.Property(e => e.SEgSmId)
                .HasMaxLength(32)
                .HasColumnName("s_eg_sm_id");
            entity.Property(e => e.SEgVersion)
                .HasMaxLength(32)
                .HasColumnName("s_eg_version");
            entity.Property(e => e.SEgEodId).HasColumnName("s_eg_eod_id");
            entity.Property(e => e.SEgGpsAtt)
                .HasMaxLength(30)
                .HasColumnName("s_eg_gps_att");
            entity.Property(e => e.SEgGpsLog)
                .HasMaxLength(30)
                .HasColumnName("s_eg_gps_log");
            entity.Property(e => e.SEgSynched).HasColumnName("s_eg_synched");
        });

        modelBuilder.Entity<EodNoneServicedSnc>(entity =>
        {
            entity.HasKey(e => new { e.SEnsId, e.SEnsSmId, e.SEnsVersion })
                .HasName("pk_eod_none_serviced_snc")
                .HasFillFactor(90);

            entity.ToTable("EOD_NONE_SERVICED_SNC", "syn");

            entity.Property(e => e.SEnsId).HasColumnName("s_ens_id");
            entity.Property(e => e.SEnsSmId)
                .HasMaxLength(32)
                .HasColumnName("s_ens_sm_id");
            entity.Property(e => e.SEnsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ens_version");
            entity.Property(e => e.SCcId).HasColumnName("s_cc_id");
            entity.Property(e => e.SEnsCdIdReason).HasColumnName("s_ens_cd_id_reason");
            entity.Property(e => e.SEnsCuId).HasColumnName("s_ens_cu_id");
            entity.Property(e => e.SEnsEodId).HasColumnName("s_ens_eod_id");
            entity.Property(e => e.SEnsSynched).HasColumnName("s_ens_synched");
        });

        modelBuilder.Entity<ExpClientacc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_CLIENTACC");

            entity.Property(e => e.AccNo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("acc_no");
            entity.Property(e => e.ActDate)
                .HasMaxLength(30)
                .HasColumnName("act_date");
            entity.Property(e => e.AuxCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("aux_code");
            entity.Property(e => e.AuxName)
                .HasMaxLength(4000)
                .HasColumnName("aux_name");
            entity.Property(e => e.AuxType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("aux_type");
            entity.Property(e => e.BLineno).HasColumnName("b_lineno");
            entity.Property(e => e.Batch)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("batch");
            entity.Property(e => e.BnkName)
                .HasMaxLength(255)
                .HasColumnName("bnk_name");
            entity.Property(e => e.BrCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("br_code");
            entity.Property(e => e.ChqNo)
                .HasMaxLength(30)
                .HasColumnName("chq_no");
            entity.Property(e => e.ChqRv).HasColumnName("chq_rv");
            entity.Property(e => e.CmpSeq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cmp_seq");
            entity.Property(e => e.Costcode).HasColumnName("costcode");
            entity.Property(e => e.Costname).HasColumnName("costname");
            entity.Property(e => e.Currency)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Dc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dc");
            entity.Property(e => e.DocRef)
                .HasMaxLength(30)
                .HasColumnName("doc_ref");
            entity.Property(e => e.FAmount)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_amount");
            entity.Property(e => e.FLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_local");
            entity.Property(e => e.FkAuxbCodePdcbank).HasColumnName("fk_auxb_code_pdcbank");
            entity.Property(e => e.FkChAccountNoPdcbank).HasColumnName("fk_ch_account_no_pdcbank");
            entity.Property(e => e.JvRef)
                .HasMaxLength(16)
                .HasColumnName("jv_ref");
            entity.Property(e => e.Label)
                .HasMaxLength(530)
                .HasColumnName("label");
            entity.Property(e => e.Maturity)
                .HasMaxLength(30)
                .HasColumnName("maturity");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.SLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("s_local");
            entity.Property(e => e.Salesman)
                .HasMaxLength(16)
                .HasColumnName("salesman");
            entity.Property(e => e.Subcostcode).HasColumnName("subcostcode");
            entity.Property(e => e.Subcostname).HasColumnName("subcostname");
            entity.Property(e => e.TrxDate)
                .HasMaxLength(30)
                .HasColumnName("trx_date");
            entity.Property(e => e.TrxNo)
                .HasMaxLength(16)
                .HasColumnName("trx_no");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.Vat).HasColumnName("vat");
            entity.Property(e => e.VtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpClientaccCash>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_CLIENTACC_CASH");

            entity.Property(e => e.AccNo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("acc_no");
            entity.Property(e => e.ActDate)
                .HasMaxLength(30)
                .HasColumnName("act_date");
            entity.Property(e => e.AuxCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("aux_code");
            entity.Property(e => e.AuxName)
                .HasMaxLength(4000)
                .HasColumnName("aux_name");
            entity.Property(e => e.AuxType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("aux_type");
            entity.Property(e => e.BLineno).HasColumnName("b_lineno");
            entity.Property(e => e.Batch)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("batch");
            entity.Property(e => e.BnkName)
                .HasMaxLength(255)
                .HasColumnName("bnk_name");
            entity.Property(e => e.BrCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("br_code");
            entity.Property(e => e.ChqNo)
                .HasMaxLength(16)
                .HasColumnName("chq_no");
            entity.Property(e => e.ChqRv).HasColumnName("chq_rv");
            entity.Property(e => e.CmpSeq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cmp_seq");
            entity.Property(e => e.Costcode).HasColumnName("costcode");
            entity.Property(e => e.Costname).HasColumnName("costname");
            entity.Property(e => e.Currency)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Dc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dc");
            entity.Property(e => e.DocRef).HasColumnName("doc_ref");
            entity.Property(e => e.FAmount)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_amount");
            entity.Property(e => e.FLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_local");
            entity.Property(e => e.FkAuxbCodePdcbank).HasColumnName("fk_auxb_code_pdcbank");
            entity.Property(e => e.FkChAccountNoPdcbank).HasColumnName("fk_ch_account_no_pdcbank");
            entity.Property(e => e.JvRef)
                .HasMaxLength(16)
                .HasColumnName("jv_ref");
            entity.Property(e => e.Label)
                .HasMaxLength(336)
                .HasColumnName("label");
            entity.Property(e => e.Maturity)
                .HasMaxLength(30)
                .HasColumnName("maturity");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.SLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("s_local");
            entity.Property(e => e.Salesman)
                .HasMaxLength(16)
                .HasColumnName("salesman");
            entity.Property(e => e.Subcostcode).HasColumnName("subcostcode");
            entity.Property(e => e.Subcostname).HasColumnName("subcostname");
            entity.Property(e => e.TrxDate)
                .HasMaxLength(30)
                .HasColumnName("trx_date");
            entity.Property(e => e.TrxNo)
                .HasMaxLength(16)
                .HasColumnName("trx_no");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.Vat).HasColumnName("vat");
            entity.Property(e => e.VtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpClientaccCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_CLIENTACC_CHECK");

            entity.Property(e => e.AccNo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("acc_no");
            entity.Property(e => e.ActDate)
                .HasMaxLength(30)
                .HasColumnName("act_date");
            entity.Property(e => e.AuxCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("aux_code");
            entity.Property(e => e.AuxName)
                .HasMaxLength(4000)
                .HasColumnName("aux_name");
            entity.Property(e => e.AuxType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("aux_type");
            entity.Property(e => e.BLineno).HasColumnName("b_lineno");
            entity.Property(e => e.Batch)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("batch");
            entity.Property(e => e.BnkName)
                .HasMaxLength(255)
                .HasColumnName("bnk_name");
            entity.Property(e => e.BrCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("br_code");
            entity.Property(e => e.ChqNo)
                .HasMaxLength(19)
                .HasColumnName("chq_no");
            entity.Property(e => e.ChqRv).HasColumnName("chq_rv");
            entity.Property(e => e.CmpSeq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cmp_seq");
            entity.Property(e => e.Costcode).HasColumnName("costcode");
            entity.Property(e => e.Costname).HasColumnName("costname");
            entity.Property(e => e.Currency)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Dc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dc");
            entity.Property(e => e.DocRef)
                .HasMaxLength(19)
                .HasColumnName("doc_ref");
            entity.Property(e => e.FAmount)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_amount");
            entity.Property(e => e.FLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("f_local");
            entity.Property(e => e.FkAuxbCodePdcbank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fk_auxb_code_pdcbank");
            entity.Property(e => e.FkChAccountNoPdcbank)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("fk_ch_account_no_pdcbank");
            entity.Property(e => e.JvRef)
                .HasMaxLength(16)
                .HasColumnName("jv_ref");
            entity.Property(e => e.Label)
                .HasMaxLength(530)
                .HasColumnName("label");
            entity.Property(e => e.Maturity)
                .HasMaxLength(30)
                .HasColumnName("maturity");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.SLocal)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("s_local");
            entity.Property(e => e.Salesman)
                .HasMaxLength(16)
                .HasColumnName("salesman");
            entity.Property(e => e.Subcostcode).HasColumnName("subcostcode");
            entity.Property(e => e.Subcostname).HasColumnName("subcostname");
            entity.Property(e => e.TrxDate)
                .HasMaxLength(30)
                .HasColumnName("trx_date");
            entity.Property(e => e.TrxNo)
                .HasMaxLength(16)
                .HasColumnName("trx_no");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.Vat).HasColumnName("vat");
            entity.Property(e => e.VtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpFmImportsqlschdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXP_FM_IMPORTSQLSCHDATA");

            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.SchAdvance).HasColumnName("sch_advance");
            entity.Property(e => e.SchAmt)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sch_amt");
            entity.Property(e => e.SchAmtFirst)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sch_amt_first");
            entity.Property(e => e.SchAmtSecond)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sch_amt_second");
            entity.Property(e => e.SchBLineNo).HasColumnName("sch_b_line_no");
            entity.Property(e => e.SchCmpSeq).HasColumnName("sch_cmp_seq");
            entity.Property(e => e.SchCollected)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sch_collected");
            entity.Property(e => e.SchPayDate)
                .HasColumnType("datetime")
                .HasColumnName("sch_pay_date");
            entity.Property(e => e.SchSequence)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sch_sequence");
            entity.Property(e => e.SchSerial).HasColumnName("sch_serial");
            entity.Property(e => e.SchSlsCode).HasColumnName("sch_sls_code");
            entity.Property(e => e.SchTrxNo)
                .HasColumnType("numeric(14, 0)")
                .HasColumnName("sch_trx_no");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
        });

        modelBuilder.Entity<ExpImImportsqlSalesAV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_im_importsqlSales_a_V", "dex");

            entity.Property(e => e.CmpSeq)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cmp_seq");
            entity.Property(e => e.Cur)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cur");
            entity.Property(e => e.Custid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("custid");
            entity.Property(e => e.Discamt).HasColumnName("discamt");
            entity.Property(e => e.Discperc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("discperc");
            entity.Property(e => e.InvoiceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("invoice type");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.Ref)
                .HasMaxLength(40)
                .HasColumnName("ref");
            entity.Property(e => e.Remark)
                .HasMaxLength(518)
                .HasColumnName("remark");
            entity.Property(e => e.Salesmanid)
                .HasMaxLength(16)
                .HasColumnName("salesmanid");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.Trxdate)
                .HasMaxLength(30)
                .HasColumnName("trxdate");
            entity.Property(e => e.Trxtime)
                .HasMaxLength(30)
                .HasColumnName("trxtime");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
            entity.Property(e => e.Warehouse1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse1");
            entity.Property(e => e.Warehouse2).HasColumnName("warehouse2");
        });

        modelBuilder.Entity<ExpImImportsqlSalesBV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_im_importsqlSales_b_V", "dex");

            entity.Property(e => e.Barcode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.CmpSeq)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cmp_seq");
            entity.Property(e => e.Extradesc)
                .HasMaxLength(255)
                .HasColumnName("extradesc");
            entity.Property(e => e.Freeqty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("freeqty");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("item");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.Quantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("quantity");
            entity.Property(e => e.Ref)
                .HasMaxLength(40)
                .HasColumnName("ref");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Udiscperc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("udiscperc");
            entity.Property(e => e.Unit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unit");
            entity.Property(e => e.Uprice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("uprice");
            entity.Property(e => e.Vatamt)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vatamt");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<ExpImImportsqlSalesLrqA>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("exp_im_importsqlSalesLRQ_a");

            entity.Property(e => e.Actdate)
                .HasMaxLength(4000)
                .HasColumnName("actdate");
            entity.Property(e => e.Cmpseq).HasColumnName("cmpseq");
            entity.Property(e => e.Currate).HasColumnName("currate");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Custid).HasColumnName("custid");
            entity.Property(e => e.Discamt).HasColumnName("discamt");
            entity.Property(e => e.Discperc).HasColumnName("discperc");
            entity.Property(e => e.Driver).HasColumnName("driver");
            entity.Property(e => e.Invtypeid).HasColumnName("invtypeid");
            entity.Property(e => e.Netamount).HasColumnName("netamount");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.Referential)
                .HasMaxLength(40)
                .HasColumnName("referential");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasColumnName("remark");
            entity.Property(e => e.Salesmanid).HasColumnName("salesmanid");
            entity.Property(e => e.Seqa).HasColumnName("seqa");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.Truck).HasColumnName("truck");
            entity.Property(e => e.Trxdate)
                .HasMaxLength(4000)
                .HasColumnName("trxdate");
            entity.Property(e => e.Trxtime)
                .HasMaxLength(4000)
                .HasColumnName("trxtime");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Warehouse1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse1");
            entity.Property(e => e.Warehouse2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse2");
        });

        modelBuilder.Entity<ExpImImportsqlSalesLrqB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("exp_im_importsqlSalesLRQ_b");

            entity.Property(e => e.Barcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Cmpseq).HasColumnName("cmpseq");
            entity.Property(e => e.Extradesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("extradesc");
            entity.Property(e => e.Freeqty).HasColumnName("freeqty");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("item");
            entity.Property(e => e.Kitcode).HasColumnName("kitcode");
            entity.Property(e => e.Kitdesc).HasColumnName("kitdesc");
            entity.Property(e => e.Kititem).HasColumnName("kititem");
            entity.Property(e => e.Linenmbr).HasColumnName("linenmbr");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.Quantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("quantity");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.Referential)
                .HasMaxLength(40)
                .HasColumnName("referential");
            entity.Property(e => e.Reftoid).HasColumnName("reftoid");
            entity.Property(e => e.Reftotype).HasColumnName("reftotype");
            entity.Property(e => e.Seqb).HasColumnName("seqb");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.Trldate).HasColumnName("trldate");
            entity.Property(e => e.Trldqty).HasColumnName("trldqty");
            entity.Property(e => e.Trlspec1).HasColumnName("trlspec1");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Udiscperc).HasColumnName("udiscperc");
            entity.Property(e => e.Unit).HasColumnName("unit");
            entity.Property(e => e.Uprice).HasColumnName("uprice");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<ExpXxVansalsDriverRtnF>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XX_VANSALS_DRIVER_RTN_F");

            entity.Property(e => e.BakeryDate)
                .HasColumnType("datetime")
                .HasColumnName("BAKERY_DATE");
            entity.Property(e => e.ClId).HasColumnName("CL_ID");
            entity.Property(e => e.ImportedFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IMPORTED_FLAG");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.TrxDocNumber)
                .HasMaxLength(32)
                .HasColumnName("TRX_DOC_NUMBER");
            entity.Property(e => e.TrxDriverName)
                .HasMaxLength(25)
                .HasColumnName("TRX_DRIVER_NAME");
            entity.Property(e => e.TrxOrgId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRX_ORG_ID");
            entity.Property(e => e.TrxType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("TRX_TYPE");
            entity.Property(e => e.TrxVanNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TRX_VAN_NUMBER");
        });

        modelBuilder.Entity<ExpXxVansalsIntgrInvoiceHV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XX_VANSALS_INTGR_INVOICE_H_V");

            entity.Property(e => e.BakeryDate)
                .HasColumnType("datetime")
                .HasColumnName("BAKERY_DATE");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_NUMBER");
            entity.Property(e => e.CustomerSiteId)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_SITE_ID");
            entity.Property(e => e.CustomerSiteName)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER_SITE_NAME");
            entity.Property(e => e.DriverCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DRIVER_CODE");
            entity.Property(e => e.DriverName)
                .HasMaxLength(25)
                .HasColumnName("DRIVER_NAME");
            entity.Property(e => e.InvoiceHeaderId).HasColumnName("INVOICE_HEADER_ID");
            entity.Property(e => e.InvoiceStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("INVOICE_STATUS");
            entity.Property(e => e.InvoiceType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("INVOICE_TYPE");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasColumnName("NOTE");
            entity.Property(e => e.OrgCode)
                .HasMaxLength(64)
                .HasColumnName("ORG_CODE");
            entity.Property(e => e.OrgId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ORG_ID");
            entity.Property(e => e.OrgName)
                .HasMaxLength(100)
                .HasColumnName("ORG_NAME");
            entity.Property(e => e.PriceListId).HasColumnName("PRICE_LIST_ID");
            entity.Property(e => e.PriceListName).HasColumnName("PRICE_LIST_NAME");
            entity.Property(e => e.ReferenceNumber)
                .HasMaxLength(296)
                .HasColumnName("REFERENCE_NUMBER");
            entity.Property(e => e.ReturnType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("RETURN_TYPE");
            entity.Property(e => e.TrxDocNumber)
                .HasMaxLength(50)
                .HasColumnName("TRX_DOC_NUMBER");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsOrgId).HasColumnName("ts_org_id");
            entity.Property(e => e.VanCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VAN_CODE");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpXxVansalsIntgrInvoiceLV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XX_VANSALS_INTGR_INVOICE_L_V");

            entity.Property(e => e.ExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRY_DATE");
            entity.Property(e => e.InvoiceHeaderId).HasColumnName("INVOICE_HEADER_ID");
            entity.Property(e => e.InvoiceLineId).HasColumnName("INVOICE_LINE_ID");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(255)
                .HasColumnName("ITEM_DESCRIPTION");
            entity.Property(e => e.ItemId)
                .HasMaxLength(128)
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.LotNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("LOT_NUMBER");
            entity.Property(e => e.OrderedQtyBag)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_BAG");
            entity.Property(e => e.OrderedQtyBox)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_BOX");
            entity.Property(e => e.OrderedQtyPiece)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_PIECE");
            entity.Property(e => e.ProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("PRODUCTION_DATE");
            entity.Property(e => e.Shad).HasColumnName("SHAD");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsOrgId).HasColumnName("ts_org_id");
            entity.Property(e => e.UnitPriceBag)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("UNIT_PRICE_BAG");
            entity.Property(e => e.UnitPriceBox)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("UNIT_PRICE_BOX");
            entity.Property(e => e.UnitPricePiece)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("UNIT_PRICE_PIECE");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpXxVansalsTrxToDriverV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XX_VANSALS_TRX_TO_DRIVER_V");

            entity.Property(e => e.BakeryDate)
                .HasColumnType("datetime")
                .HasColumnName("BAKERY_DATE");
            entity.Property(e => e.ExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRY_DATE");
            entity.Property(e => e.ImportedFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IMPORTED_FLAG");
            entity.Property(e => e.LotNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("LOT_NUMBER");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MviId).HasColumnName("mvi_id");
            entity.Property(e => e.MviOrgId).HasColumnName("mvi_org_id");
            entity.Property(e => e.OrderedQtyBag)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_BAG");
            entity.Property(e => e.OrderedQtyBox)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_BOX");
            entity.Property(e => e.OrderedQtyPiece)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ORDERED_QTY_PIECE");
            entity.Property(e => e.ProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("PRODUCTION_DATE");
            entity.Property(e => e.TrxDocNumber)
                .HasMaxLength(32)
                .HasColumnName("TRX_DOC_NUMBER");
            entity.Property(e => e.TrxDriverName)
                .HasMaxLength(25)
                .HasColumnName("TRX_DRIVER_NAME");
            entity.Property(e => e.TrxId).HasColumnName("TRX_ID");
            entity.Property(e => e.TrxItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRX_ITEM_CODE");
            entity.Property(e => e.TrxItemDescription)
                .HasMaxLength(255)
                .HasColumnName("TRX_ITEM_DESCRIPTION");
            entity.Property(e => e.TrxItemId)
                .HasMaxLength(128)
                .HasColumnName("TRX_ITEM_ID");
            entity.Property(e => e.TrxOrgId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRX_ORG_ID");
            entity.Property(e => e.TrxType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("TRX_TYPE");
            entity.Property(e => e.TrxVanNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TRX_VAN_NUMBER");
        });

        modelBuilder.Entity<ExpXxkfmVansalsIntgCustInvHV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XXKFM_VANSALS_INTG_CUST_INV_H_V");

            entity.Property(e => e.Attribute1)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_NUMBER");
            entity.Property(e => e.CustomerSiteId)
                .HasMaxLength(64)
                .HasColumnName("CUSTOMER_SITE_ID");
            entity.Property(e => e.CustomerSiteName)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER_SITE_NAME");
            entity.Property(e => e.DarpNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Darp_no");
            entity.Property(e => e.DriverCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DRIVER_CODE");
            entity.Property(e => e.DriverName)
                .HasMaxLength(101)
                .HasColumnName("DRIVER_NAME");
            entity.Property(e => e.InventoryHeaderId).HasColumnName("INVENTORY_HEADER_ID");
            entity.Property(e => e.InventoryStatus)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("INVENTORY_STATUS");
            entity.Property(e => e.Note)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.OrgCode)
                .HasMaxLength(64)
                .HasColumnName("ORG_CODE");
            entity.Property(e => e.OrgId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ORG_ID");
            entity.Property(e => e.OrgName)
                .HasMaxLength(100)
                .HasColumnName("ORG_NAME");
            entity.Property(e => e.ReferenceNumber)
                .HasMaxLength(50)
                .HasColumnName("REFERENCE_NUMBER");
            entity.Property(e => e.ThpsiId).HasColumnName("thpsi_id");
            entity.Property(e => e.ThpsiOrgId).HasColumnName("thpsi_org_id");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpXxkfmVansalsIntgCustInvLV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EXP_XXKFM_VANSALS_INTG_CUST_INV_L_V");

            entity.Property(e => e.InventoryHeaderId).HasColumnName("INVENTORY_HEADER_ID");
            entity.Property(e => e.InventoryLineId).HasColumnName("INVENTORY_LINE_ID");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(255)
                .HasColumnName("ITEM_DESCRIPTION");
            entity.Property(e => e.ItemId)
                .HasMaxLength(128)
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.QtyBag)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("QTY_BAG");
            entity.Property(e => e.QtyBox)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("QTY_BOX");
            entity.Property(e => e.QtyPiece)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("QTY_PIECE");
            entity.Property(e => e.ThpsiId).HasColumnName("thpsi_id");
            entity.Property(e => e.ThpsiOrgId).HasColumnName("thpsi_org_id");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<ExpmFmImportsqldatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_FM_IMPORTSQLDATA");

            entity.Property(e => e.Acc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acc");
            entity.Property(e => e.ActDate)
                .HasColumnType("datetime")
                .HasColumnName("act_date");
            entity.Property(e => e.AuxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("aux_code");
            entity.Property(e => e.AuxName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("aux_name");
            entity.Property(e => e.AuxType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("aux_type");
            entity.Property(e => e.BLineno).HasColumnName("b_lineno");
            entity.Property(e => e.Batch)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("batch");
            entity.Property(e => e.Batchnam)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchnam");
            entity.Property(e => e.BnkName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bnk_name");
            entity.Property(e => e.BrCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("br_code");
            entity.Property(e => e.BrName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("br_name");
            entity.Property(e => e.ChqNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("chq_no");
            entity.Property(e => e.ChqRv).HasColumnName("chq_rv");
            entity.Property(e => e.CmpSeq).HasColumnName("cmp_seq");
            entity.Property(e => e.Costcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("costcode");
            entity.Property(e => e.Costname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("costname");
            entity.Property(e => e.Currency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Dc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("dc");
            entity.Property(e => e.DocRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc_ref");
            entity.Property(e => e.FAmount)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("f_amount");
            entity.Property(e => e.FLocal)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("f_local");
            entity.Property(e => e.FkAuxbCodePdcbank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fk_auxb_code_pdcbank");
            entity.Property(e => e.FkChAccountNoPdcbank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fk_ch_account_no_pdcbank");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.JvRef)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("jv_ref");
            entity.Property(e => e.Label)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("label");
            entity.Property(e => e.Maturity)
                .HasColumnType("datetime")
                .HasColumnName("maturity");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.PrjCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("prj_code");
            entity.Property(e => e.PrjName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("prj_name");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.SLocal)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("s_local");
            entity.Property(e => e.Salesman).HasColumnName("salesman");
            entity.Property(e => e.Subcostcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("subcostcode");
            entity.Property(e => e.Subcostname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subcostname");
            entity.Property(e => e.TrxDate)
                .HasColumnType("datetime")
                .HasColumnName("trx_date");
            entity.Property(e => e.TrxNo)
                .HasColumnType("numeric(14, 0)")
                .HasColumnName("trx_no");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Vat)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("vat");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
        });

        modelBuilder.Entity<ExpmImImportsqlsalesA>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_IM_IMPORTSQLSALES_A");

            entity.Property(e => e.Actdate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("actdate");
            entity.Property(e => e.Cmpseq).HasColumnName("cmpseq");
            entity.Property(e => e.Currate).HasColumnName("currate");
            entity.Property(e => e.Currency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custid)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("custid");
            entity.Property(e => e.Discamt)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("discamt");
            entity.Property(e => e.Discperc)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("discperc");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("driver");
            entity.Property(e => e.Invtypeid).HasColumnName("invtypeid");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Netamount)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("netamount");
            entity.Property(e => e.Processed)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("processed");
            entity.Property(e => e.Ref)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ref");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("remark");
            entity.Property(e => e.Salesmanid)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("salesmanid");
            entity.Property(e => e.Seqa)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("seqa");
            entity.Property(e => e.Truck)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("truck");
            entity.Property(e => e.Trxdate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("trxdate");
            entity.Property(e => e.Trxtime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("trxtime");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
            entity.Property(e => e.Warehouse1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("warehouse1");
            entity.Property(e => e.Warehouse2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("warehouse2");
        });

        modelBuilder.Entity<ExpmImImportsqlsalesB>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_IM_IMPORTSQLSALES_B");

            entity.Property(e => e.Barcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Cmpseq).HasColumnName("cmpseq");
            entity.Property(e => e.Extradesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("extradesc");
            entity.Property(e => e.Freeqty)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("freeqty");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Item)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("item");
            entity.Property(e => e.Kitcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("kitcode");
            entity.Property(e => e.Kitdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("kitdesc");
            entity.Property(e => e.Kititem)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("kititem");
            entity.Property(e => e.Linenmbr)
                .HasColumnType("numeric(9, 0)")
                .HasColumnName("linenmbr");
            entity.Property(e => e.Processed)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("processed");
            entity.Property(e => e.Quantity)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("quantity");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.Ref)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ref");
            entity.Property(e => e.Reftoid)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("reftoid");
            entity.Property(e => e.Reftotype).HasColumnName("reftotype");
            entity.Property(e => e.Seqb)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("seqb");
            entity.Property(e => e.Trldate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("trldate");
            entity.Property(e => e.Trldqty)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("trldqty");
            entity.Property(e => e.Trlspec1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("trlspec1");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Udiscperc)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("udiscperc");
            entity.Property(e => e.Unit)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("unit");
            entity.Property(e => e.Uprice)
                .HasColumnType("numeric(14, 3)")
                .HasColumnName("uprice");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<ExpmImRetVdra>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_IM_RET_VDRA");

            entity.Property(e => e.Cmpseqa).HasColumnName("cmpseqa");
            entity.Property(e => e.Curcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("curcode");
            entity.Property(e => e.Customer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("customer");
            entity.Property(e => e.Customerid).HasColumnName("customerid");
            entity.Property(e => e.Date)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("date");
            entity.Property(e => e.Disc1)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("disc1");
            entity.Property(e => e.Imported).HasColumnName("imported");
            entity.Property(e => e.Invoicetypeid).HasColumnName("invoicetypeid");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Netamount)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("netamount");
            entity.Property(e => e.Outlet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("outlet");
            entity.Property(e => e.Packet)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("packet");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Ratesl).HasColumnName("ratesl");
            entity.Property(e => e.Reattc).HasColumnName("reattc");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .HasColumnName("remark");
            entity.Property(e => e.Salesman)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("salesman");
            entity.Property(e => e.Salesmanid).HasColumnName("salesmanid");
            entity.Property(e => e.Shift)
                .HasColumnType("numeric(8, 0)")
                .HasColumnName("shift");
            entity.Property(e => e.Time)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("time");
            entity.Property(e => e.Trxid)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("trxid");
            entity.Property(e => e.Trxtype).HasColumnName("trxtype");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
        });

        modelBuilder.Entity<ExpmImRetVdrb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_IM_RET_VDRB");

            entity.Property(e => e.Cmpseqb).HasColumnName("cmpseqb");
            entity.Property(e => e.Descr)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descr");
            entity.Property(e => e.Discperc)
                .HasColumnType("numeric(6, 2)")
                .HasColumnName("discperc");
            entity.Property(e => e.Freeqty)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("freeqty");
            entity.Property(e => e.Imported).HasColumnName("imported");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Itemcode)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("itemcode");
            entity.Property(e => e.Kitcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("kitcode");
            entity.Property(e => e.Linenum)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("linenum");
            entity.Property(e => e.Price)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("price");
            entity.Property(e => e.Qty)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("qty");
            entity.Property(e => e.Reason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.Trxid)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("trxid");
            entity.Property(e => e.Trxtype).HasColumnName("trxtype");
            entity.Property(e => e.Unit)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("unit");
            entity.Property(e => e.Vat)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("vat");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
        });

        modelBuilder.Entity<ExpmImRetVdrc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPM_IM_RET_VDRC");

            entity.Property(e => e.Amount)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("amount");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.Checkcard)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("checkcard");
            entity.Property(e => e.Cmpseqc).HasColumnName("cmpseqc");
            entity.Property(e => e.Curcode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("curcode");
            entity.Property(e => e.Imported).HasColumnName("imported");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Linenum)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("linenum");
            entity.Property(e => e.Maturity)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("maturity");
            entity.Property(e => e.Mop)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mop");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Ratesl).HasColumnName("ratesl");
            entity.Property(e => e.Trxid)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("trxid");
            entity.Property(e => e.Trxtype).HasColumnName("trxtype");
            entity.Property(e => e.VtBatchNo)
                .HasMaxLength(50)
                .HasColumnName("vt_batch_no");
        });

        modelBuilder.Entity<ExportBatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXPORT_BATCH");

            entity.Property(e => e.ExpBatchNo)
                .HasMaxLength(50)
                .HasColumnName("exp_batch_no");
            entity.Property(e => e.ExpSentDate)
                .HasColumnType("datetime")
                .HasColumnName("exp_sent_date");
            entity.Property(e => e.ExpStatus).HasColumnName("exp_status");
            entity.Property(e => e.ExpUsId).HasColumnName("exp_us_id");
        });

        modelBuilder.Entity<FamilyCodesc>(entity =>
        {
            entity.HasKey(e => e.FcId)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("FAMILY_CODESC", "cmn");

            entity.HasIndex(e => e.FcCode, "fc_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.FcId).HasColumnName("fc_id");
            entity.Property(e => e.FcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("fc_code");
            entity.Property(e => e.FcDescriptionLan1)
                .HasMaxLength(80)
                .HasColumnName("fc_description_lan1");
            entity.Property(e => e.FcDescriptionLan2)
                .HasMaxLength(80)
                .HasColumnName("fc_description_lan2");
            entity.Property(e => e.FcDescriptionLan3)
                .HasMaxLength(80)
                .HasColumnName("fc_description_lan3");
            entity.Property(e => e.FcIsSystem)
                .HasDefaultValue((short)1)
                .HasColumnName("fc_is_system");
            entity.Property(e => e.FcIsTree)
                .HasDefaultValue((short)-1)
                .HasColumnName("fc_is_tree");
            entity.Property(e => e.FcMdId).HasColumnName("fc_md_id");

            entity.HasOne(d => d.FcMd).WithMany(p => p.FamilyCodescs)
                .HasForeignKey(d => d.FcMdId)
                .HasConstraintName("FK_FC_REF_MD");
        });

        modelBuilder.Entity<FmImportsqlschdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("fm_importsqlschdata");

            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.SchAdvance).HasColumnName("sch_advance");
            entity.Property(e => e.SchAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sch_amt");
            entity.Property(e => e.SchAmtFirst)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("sch_amt_first");
            entity.Property(e => e.SchAmtSecond)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("sch_amt_second");
            entity.Property(e => e.SchBLineNo).HasColumnName("sch_b_line_no");
            entity.Property(e => e.SchCmpSeq)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sch_cmp_seq");
            entity.Property(e => e.SchCollected).HasColumnName("sch_collected");
            entity.Property(e => e.SchPayDate)
                .HasColumnType("datetime")
                .HasColumnName("sch_pay_date");
            entity.Property(e => e.SchSequence)
                .HasMaxLength(32)
                .HasColumnName("sch_sequence");
            entity.Property(e => e.SchSerial).HasColumnName("sch_serial");
            entity.Property(e => e.SchSlsCode)
                .HasMaxLength(16)
                .HasColumnName("sch_sls_code");
            entity.Property(e => e.SchTrxNo)
                .HasMaxLength(16)
                .HasColumnName("sch_trx_no");
            entity.Property(e => e.VtUsId).HasColumnName("vt_us_id");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
        });

        modelBuilder.Entity<GeoFence>(entity =>
        {
            entity.HasKey(e => e.GfId).HasFillFactor(90);

            entity.ToTable("GEO_FENCE", "cmn");

            entity.Property(e => e.GfId).HasColumnName("gf_id");
            entity.Property(e => e.GfActive).HasColumnName("gf_active");
            entity.Property(e => e.GfCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gf_code");
            entity.Property(e => e.GfDescription)
                .HasMaxLength(200)
                .HasColumnName("gf_description");
            entity.Property(e => e.GfDescriptionLan2)
                .HasMaxLength(200)
                .HasColumnName("gf_description_lan2");
            entity.Property(e => e.GfDescriptionLan3)
                .HasMaxLength(200)
                .HasColumnName("gf_description_lan3");
            entity.Property(e => e.GfGlId).HasColumnName("gf_gl_id");

            entity.HasOne(d => d.GfGl).WithMany(p => p.GeoFences)
                .HasForeignKey(d => d.GfGlId)
                .HasConstraintName("FK_GF_REF_GL");
        });

        modelBuilder.Entity<GeoFenceDetail>(entity =>
        {
            entity.HasKey(e => e.GfdId).HasFillFactor(90);

            entity.ToTable("GEO_FENCE_DETAIL", "cmn");

            entity.Property(e => e.GfdId).HasColumnName("gfd_id");
            entity.Property(e => e.GfdGfId).HasColumnName("gfd_gf_id");
            entity.Property(e => e.GfdLatitude)
                .HasMaxLength(50)
                .HasColumnName("gfd_latitude");
            entity.Property(e => e.GfdLogitude)
                .HasMaxLength(50)
                .HasColumnName("gfd_logitude");
            entity.Property(e => e.GfdOrder).HasColumnName("gfd_order");

            entity.HasOne(d => d.GfdGf).WithMany(p => p.GeoFenceDetails)
                .HasForeignKey(d => d.GfdGfId)
                .HasConstraintName("FK_GFD_REF_GF");
        });

        modelBuilder.Entity<GeoLocation>(entity =>
        {
            entity.HasKey(e => e.GlId).HasFillFactor(90);

            entity.ToTable("GEO_LOCATION", "cmn");

            entity.HasIndex(e => new { e.GlLevel, e.GlCode, e.GlGlId }, "pk_code_level_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.GlId).HasColumnName("gl_id");
            entity.Property(e => e.GlCdIdGeo).HasColumnName("gl_cd_id_geo");
            entity.Property(e => e.GlCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan1");
            entity.Property(e => e.GlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan2");
            entity.Property(e => e.GlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan3");
            entity.Property(e => e.GlGlId).HasColumnName("gl_gl_id");
            entity.Property(e => e.GlLevel).HasColumnName("gl_level");
        });

        modelBuilder.Entity<GeoTag>(entity =>
        {
            entity.HasKey(e => e.GtId).HasFillFactor(90);

            entity.ToTable("GEO_TAG", "cmn");

            entity.Property(e => e.GtId).HasColumnName("gt_id");
            entity.Property(e => e.GtCdIdGet).HasColumnName("gt_cd_id_get");
            entity.Property(e => e.GtColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_column");
            entity.Property(e => e.GtColumnValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_column_value");
            entity.Property(e => e.GtDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("gt_datetime");
            entity.Property(e => e.GtEllipsoidAltitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_ellipsoid_altitude");
            entity.Property(e => e.GtFreeText)
                .HasMaxLength(100)
                .HasColumnName("gt_free_text");
            entity.Property(e => e.GtGpsDatetime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_gps_datetime");
            entity.Property(e => e.GtHdop)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_hdop");
            entity.Property(e => e.GtHeading)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_heading");
            entity.Property(e => e.GtLatitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_latitude");
            entity.Property(e => e.GtLongitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_longitude");
            entity.Property(e => e.GtOrgId).HasColumnName("gt_org_id");
            entity.Property(e => e.GtPdop)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_pdop");
            entity.Property(e => e.GtSatelliteCount).HasColumnName("gt_satellite_count");
            entity.Property(e => e.GtSatelliteInviewCount).HasColumnName("gt_satellite_inview_count");
            entity.Property(e => e.GtSeaAltitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_sea_altitude");
            entity.Property(e => e.GtSpeed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_speed");
            entity.Property(e => e.GtUsId).HasColumnName("gt_us_id");
            entity.Property(e => e.GtVdop)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gt_vdop");

            entity.HasOne(d => d.GtCdIdGetNavigation).WithMany(p => p.GeoTags)
                .HasForeignKey(d => d.GtCdIdGet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEO_TAG_REFERENCE_CODESC");

            entity.HasOne(d => d.GtUs).WithMany(p => p.GeoTags)
                .HasForeignKey(d => d.GtUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEO_TAG_REFERENCE_USER");
        });

        modelBuilder.Entity<GeoTagRepV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Geo_Tag_Rep_V");

            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("customer_name");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Docnb)
                .HasMaxLength(40)
                .HasColumnName("docnb");
            entity.Property(e => e.Latitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.MapThis)
                .HasMaxLength(149)
                .IsUnicode(false)
                .HasColumnName("map_this");
            entity.Property(e => e.SalesmanCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("salesman_code");
            entity.Property(e => e.SalesmanName)
                .HasMaxLength(25)
                .HasColumnName("salesman_name");
            entity.Property(e => e.Type)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UsId).HasColumnName("us_id");
        });

        modelBuilder.Entity<GeoTagSnc>(entity =>
        {
            entity.HasKey(e => new { e.SGtId, e.SGtSmId, e.SGtVersion })
                .HasName("PK_GEO_TAG_snc")
                .HasFillFactor(90);

            entity.ToTable("GEO_TAG_SNC", "syn");

            entity.Property(e => e.SGtId).HasColumnName("s_gt_id");
            entity.Property(e => e.SGtSmId).HasColumnName("s_gt_sm_id");
            entity.Property(e => e.SGtVersion)
                .HasMaxLength(25)
                .HasColumnName("s_gt_version");
            entity.Property(e => e.SGtCdIdGet).HasColumnName("s_gt_cd_id_get");
            entity.Property(e => e.SGtColumn)
                .HasMaxLength(50)
                .HasColumnName("s_gt_column");
            entity.Property(e => e.SGtColumnValue)
                .HasMaxLength(50)
                .HasColumnName("s_gt_column_value");
            entity.Property(e => e.SGtColumnValueUid)
                .HasMaxLength(128)
                .HasColumnName("s_gt_column_value_uid");
            entity.Property(e => e.SGtDatetime)
                .HasColumnType("datetime")
                .HasColumnName("s_gt_datetime");
            entity.Property(e => e.SGtEllipsoidAltitude)
                .HasMaxLength(50)
                .HasColumnName("s_gt_ellipsoid_altitude");
            entity.Property(e => e.SGtFreeText)
                .HasMaxLength(100)
                .HasColumnName("s_gt_free_text");
            entity.Property(e => e.SGtGpsDatetime)
                .HasMaxLength(50)
                .HasColumnName("s_gt_gps_datetime");
            entity.Property(e => e.SGtHdop)
                .HasMaxLength(50)
                .HasColumnName("s_gt_hdop");
            entity.Property(e => e.SGtHeading)
                .HasMaxLength(50)
                .HasColumnName("s_gt_heading");
            entity.Property(e => e.SGtLatitude)
                .HasMaxLength(50)
                .HasColumnName("s_gt_latitude");
            entity.Property(e => e.SGtLongitude)
                .HasMaxLength(50)
                .HasColumnName("s_gt_longitude");
            entity.Property(e => e.SGtPdop)
                .HasMaxLength(50)
                .HasColumnName("s_gt_pdop");
            entity.Property(e => e.SGtSatelliteCount).HasColumnName("s_gt_satellite_count");
            entity.Property(e => e.SGtSatelliteInviewCount).HasColumnName("s_gt_satellite_inview_count");
            entity.Property(e => e.SGtSeaAltitude)
                .HasMaxLength(50)
                .HasColumnName("s_gt_sea_altitude");
            entity.Property(e => e.SGtSpeed)
                .HasMaxLength(50)
                .HasColumnName("s_gt_speed");
            entity.Property(e => e.SGtVdop)
                .HasMaxLength(50)
                .HasColumnName("s_gt_vdop");
        });

        modelBuilder.Entity<Geofence1>(entity =>
        {
            entity.HasKey(e => e.GfId).HasFillFactor(90);

            entity.ToTable("GEOFENCE", "rwt");

            entity.HasIndex(e => e.GfCode, "gf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.GfId).HasColumnName("gf_id");
            entity.Property(e => e.GfCode)
                .HasMaxLength(32)
                .HasColumnName("gf_code");
            entity.Property(e => e.GfColor)
                .HasMaxLength(16)
                .HasColumnName("gf_color");
            entity.Property(e => e.GfDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("gf_description_lan1");
            entity.Property(e => e.GfDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("gf_description_lan2");
            entity.Property(e => e.GfDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("gf_description_lan3");
        });

        modelBuilder.Entity<GeofencePoint>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GEOFENCE_POINT", "rwt");

            entity.HasIndex(e => e.GfpGfId, "gfp_gf_idx").HasFillFactor(90);

            entity.Property(e => e.GfpGfId).HasColumnName("gfp_gf_id");
            entity.Property(e => e.GfpId)
                .ValueGeneratedOnAdd()
                .HasColumnName("gfp_id");
            entity.Property(e => e.GfpLatitude).HasColumnName("gfp_latitude");
            entity.Property(e => e.GfpLongitude).HasColumnName("gfp_longitude");
            entity.Property(e => e.GfpOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("gfp_order");

            entity.HasOne(d => d.GfpGf).WithMany()
                .HasForeignKey(d => d.GfpGfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GFP_REF_GF");
        });

        modelBuilder.Entity<GetSeqFromOperationsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Get_seq_from_operations_V");

            entity.Property(e => e.From).HasColumnName("_from");
            entity.Property(e => e.Type).HasColumnName("_type");
            entity.Property(e => e.UsId).HasColumnName("_us_id");
        });

        modelBuilder.Entity<GlobalInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GLOBAL_INFO");

            entity.Property(e => e.GlCode)
                .HasMaxLength(100)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlCuId).HasColumnName("gl_cu_id");
            entity.Property(e => e.GlDescription)
                .HasMaxLength(100)
                .HasColumnName("gl_description");
            entity.Property(e => e.GlDtId).HasColumnName("gl_dt_id");
            entity.Property(e => e.GlFamily)
                .HasMaxLength(100)
                .HasColumnName("gl_family");
            entity.Property(e => e.GlId)
                .ValueGeneratedOnAdd()
                .HasColumnName("gl_id");
            entity.Property(e => e.GlItuId).HasColumnName("gl_itu_id");
            entity.Property(e => e.GlPrId).HasColumnName("gl_pr_id");
            entity.Property(e => e.GlSmId).HasColumnName("gl_sm_id");
            entity.Property(e => e.GlType)
                .HasMaxLength(100)
                .HasColumnName("gl_type");
            entity.Property(e => e.GlValue)
                .HasMaxLength(100)
                .HasColumnName("gl_value");
        });

        modelBuilder.Entity<HcustTransSnc>(entity =>
        {
            entity.HasKey(e => new { e.SHctId, e.SHctSmId, e.SHctVersion })
                .HasName("pk_hcust_trans_snc")
                .HasFillFactor(90);

            entity.ToTable("HCUST_TRANS_SNC", "syn");

            entity.Property(e => e.SHctId).HasColumnName("s_hct_id");
            entity.Property(e => e.SHctSmId)
                .HasMaxLength(32)
                .HasColumnName("s_hct_sm_id");
            entity.Property(e => e.SHctVersion)
                .HasMaxLength(32)
                .HasColumnName("s_hct_version");
            entity.Property(e => e.SHctCuId).HasColumnName("s_hct_cu_id");
            entity.Property(e => e.SHctDate)
                .HasColumnType("datetime")
                .HasColumnName("s_hct_date");
            entity.Property(e => e.SHctFreeQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_hct_free_qty");
            entity.Property(e => e.SHctPrId).HasColumnName("s_hct_pr_id");
            entity.Property(e => e.SHctReturnQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_hct_return_qty");
            entity.Property(e => e.SHctSoldQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_hct_sold_qty");
        });

        modelBuilder.Entity<ImagesLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMAGES_LOCATION");

            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("filename");
            entity.Property(e => e.Foldername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("foldername");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Parentpath)
                .IsUnicode(false)
                .HasColumnName("parentpath");
        });

        modelBuilder.Entity<ImpBankV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_BANK_V", "dex");

            entity.Property(e => e.IBkCode)
                .HasMaxLength(16)
                .HasColumnName("i_bk_code");
            entity.Property(e => e.IBkDescription)
                .HasMaxLength(50)
                .HasColumnName("i_bk_description");
            entity.Property(e => e.IcdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("icd_fc_code");
            entity.Property(e => e.IcdFcId).HasColumnName("icd_fc_id");
            entity.Property(e => e.IcdId).HasColumnName("icd_id");
        });

        modelBuilder.Entity<ImpCurrencyRateV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("imp_currency_rate_v", "dex");

            entity.Property(e => e.ICrBuId).HasColumnName("i_cr_bu_id");
            entity.Property(e => e.ICrCdIdCurFrom).HasColumnName("i_cr_cd_id_cur_from");
            entity.Property(e => e.ICrCdIdCurTo).HasColumnName("i_cr_cd_id_cur_to");
            entity.Property(e => e.ICrDate)
                .HasColumnType("datetime")
                .HasColumnName("i_cr_date");
            entity.Property(e => e.ICrMaxRateBuy)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_max_rate_buy");
            entity.Property(e => e.ICrMaxRateSell)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_max_rate_sell");
            entity.Property(e => e.ICrMinRateBuy)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_min_rate_buy");
            entity.Property(e => e.ICrMinRateSell)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_min_rate_sell");
            entity.Property(e => e.ICrRateBuy)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_rate_buy");
            entity.Property(e => e.ICrRateSell)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("i_cr_rate_sell");
        });

        modelBuilder.Entity<ImpCurrencyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_CURRENCY_V", "dex");

            entity.Property(e => e.ICrCode)
                .HasMaxLength(16)
                .HasColumnName("i_cr_code");
            entity.Property(e => e.ICrDescription)
                .HasMaxLength(100)
                .HasColumnName("i_cr_description");
            entity.Property(e => e.ICrSymb)
                .HasMaxLength(16)
                .HasColumnName("i_cr_symb");
            entity.Property(e => e.IcdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("icd_fc_code");
            entity.Property(e => e.IcdFcId).HasColumnName("icd_fc_id");
            entity.Property(e => e.IcdId).HasColumnName("icd_id");
        });

        modelBuilder.Entity<ImpDriverXl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_DRIVER_XLS");

            entity.Property(e => e.Position).HasMaxLength(255);
            entity.Property(e => e.SfaId).HasColumnName("SFA ID");
            entity.Property(e => e.SfaUser)
                .HasMaxLength(255)
                .HasColumnName("SFA User");
        });

        modelBuilder.Entity<ImpDueInvoiceV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_DUE_INVOICE_V", "dex");

            entity.Property(e => e.IDiBuId).HasColumnName("i_di_bu_id");
            entity.Property(e => e.IDiCdIdCur).HasColumnName("i_di_cd_id_cur");
            entity.Property(e => e.IDiCdIdSrc).HasColumnName("i_di_cd_id_src");
            entity.Property(e => e.IDiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_create_date");
            entity.Property(e => e.IDiDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_date");
            entity.Property(e => e.IDiDueDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_due_date");
            entity.Property(e => e.IDiId).HasColumnName("i_di_id");
            entity.Property(e => e.IDiIsVat).HasColumnName("i_di_is_vat");
            entity.Property(e => e.IDiModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_modified_date");
            entity.Property(e => e.IDiNumber)
                .HasMaxLength(36)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_di_number");
            entity.Property(e => e.IDiOrder).HasColumnName("i_di_order");
            entity.Property(e => e.IDiOrgId).HasColumnName("i_di_org_id");
            entity.Property(e => e.IDiOrigAmtInInvcur)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_di_orig_amt_in_invcur");
            entity.Property(e => e.IDiOrigCur)
                .HasMaxLength(16)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_di_orig_cur");
            entity.Property(e => e.IDiPrintedAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_di_printed_amt");
            entity.Property(e => e.IDiRate)
                .HasColumnType("decimal(19, 8)")
                .HasColumnName("i_di_rate");
            entity.Property(e => e.IDiRemainAmount)
                .HasColumnType("numeric(33, 10)")
                .HasColumnName("i_di_remain_amount");
            entity.Property(e => e.IDiRemaingAmountBase)
                .HasColumnType("numeric(20, 5)")
                .HasColumnName("i_di_remaing_amount_base");
            entity.Property(e => e.IDiText1)
                .HasMaxLength(32)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_di_text1");
            entity.Property(e => e.IDiThpsId).HasColumnName("i_di_thps_id");
            entity.Property(e => e.IDiTotalAmount)
                .HasColumnType("numeric(33, 10)")
                .HasColumnName("i_di_total_amount");
            entity.Property(e => e.IDiTotalAmountBase)
                .HasColumnType("numeric(20, 5)")
                .HasColumnName("i_di_total_amount_base");
            entity.Property(e => e.IDiTsId).HasColumnName("i_di_ts_id");
            entity.Property(e => e.IDiTsOrgId).HasColumnName("i_di_ts_org_id");
            entity.Property(e => e.IDiTvaRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_di_tva_rate");
            entity.Property(e => e.IDiType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("i_di_type");
            entity.Property(e => e.IDiUid).HasColumnName("i_di_uid");
            entity.Property(e => e.IDiUsId).HasColumnName("i_di_us_id");
            entity.Property(e => e.IDiVoid).HasColumnName("i_di_void");
            entity.Property(e => e.IDiVoucher)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_di_Voucher");
        });

        modelBuilder.Entity<ImpDueInvoiceV20240709>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_DUE_INVOICE_V_20240709", "dex");

            entity.Property(e => e.IDiBuId).HasColumnName("i_di_bu_id");
            entity.Property(e => e.IDiCdIdCur).HasColumnName("i_di_cd_id_cur");
            entity.Property(e => e.IDiCdIdSrc).HasColumnName("i_di_cd_id_src");
            entity.Property(e => e.IDiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_create_date");
            entity.Property(e => e.IDiDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_date");
            entity.Property(e => e.IDiDesc)
                .HasMaxLength(512)
                .HasColumnName("i_di_desc");
            entity.Property(e => e.IDiDueDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_due_date");
            entity.Property(e => e.IDiId).HasColumnName("i_di_id");
            entity.Property(e => e.IDiModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("i_di_modified_date");
            entity.Property(e => e.IDiNumber)
                .HasMaxLength(32)
                .HasColumnName("i_di_number");
            entity.Property(e => e.IDiOrder).HasColumnName("i_di_order");
            entity.Property(e => e.IDiOrgId).HasColumnName("i_di_org_id");
            entity.Property(e => e.IDiRemainAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_di_remain_amount");
            entity.Property(e => e.IDiText1)
                .HasMaxLength(32)
                .HasColumnName("i_di_text1");
            entity.Property(e => e.IDiThpsId).HasColumnName("i_di_thps_id");
            entity.Property(e => e.IDiTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_di_total_amount");
            entity.Property(e => e.IDiTsId).HasColumnName("i_di_ts_id");
            entity.Property(e => e.IDiTsOrgId).HasColumnName("i_di_ts_org_id");
            entity.Property(e => e.IDiUsId).HasColumnName("i_di_us_id");
            entity.Property(e => e.IDiVoid).HasColumnName("i_di_void");
        });

        modelBuilder.Entity<ImpItemFinanceV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_ITEM_FINANCE_V", "dex");

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.ItId).HasColumnName("it_id");
        });

        modelBuilder.Entity<ImpItemUomV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_ITEM_UOM_V", "dex");

            entity.Property(e => e.IItuActive).HasColumnName("i_itu_active");
            entity.Property(e => e.IItuConvValue).HasColumnName("i_itu_conv_value");
            entity.Property(e => e.IItuItId).HasColumnName("i_itu_it_id");
            entity.Property(e => e.IItuShortname)
                .HasMaxLength(50)
                .HasColumnName("i_itu_shortname");
            entity.Property(e => e.IItuUomId).HasColumnName("i_itu_uom_id");
        });

        modelBuilder.Entity<ImpItemWarehouseV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_ITEM_WAREHOUSE_v", "dex");

            entity.Property(e => e.IItwItId).HasColumnName("i_itw_it_id");
            entity.Property(e => e.IItwPlIdWhs).HasColumnName("I_itw_pl_id_whs");
            entity.Property(e => e.IItwQuantity)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("i_itw_quantity");
            entity.Property(e => e.IItwQuantityDamage).HasColumnName("i_itw_quantity_damage");
            entity.Property(e => e.IItwQuantityReserved).HasColumnName("i_itw_quantity_reserved");
            entity.Property(e => e.IItwUomId).HasColumnName("i_itw_uom_id");
        });

        modelBuilder.Entity<ImpPriceListV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_PRICE_LIST_V", "dex");

            entity.Property(e => e.ILpId).HasColumnName("i_lp_id");
            entity.Property(e => e.IPlActive).HasColumnName("i_pl_active");
            entity.Property(e => e.IPlBuId).HasColumnName("i_pl_bu_id");
            entity.Property(e => e.IPlCdIdCur).HasColumnName("i_pl_cd_id_cur");
            entity.Property(e => e.IPlCode)
                .HasMaxLength(49)
                .HasColumnName("i_pl_code");
            entity.Property(e => e.IPlDescriptionLan1)
                .HasMaxLength(49)
                .HasColumnName("i_pl_description_lan1");
            entity.Property(e => e.IPlDescriptionLan2)
                .HasMaxLength(49)
                .HasColumnName("i_pl_description_lan2");
            entity.Property(e => e.IPlDescriptionLan3)
                .HasMaxLength(49)
                .HasColumnName("i_pl_description_lan3");
            entity.Property(e => e.IPlFromDate).HasColumnName("i_pl_from_date");
            entity.Property(e => e.IPlToDate).HasColumnName("i_pl_to_date");
        });

        modelBuilder.Entity<ImpProductV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_PRODUCT_V", "dex");

            entity.Property(e => e.IItActive).HasColumnName("i_it_active");
            entity.Property(e => e.IItCdIdIbd).HasColumnName("i_it_cd_id_ibd");
            entity.Property(e => e.IItCdIdIgp).HasColumnName("i_it_cd_id_igp");
            entity.Property(e => e.IItCdIdIsg).HasColumnName("i_it_cd_id_isg");
            entity.Property(e => e.IItCdIdItg).HasColumnName("i_it_cd_id_itg");
            entity.Property(e => e.IItCdIdItp).HasColumnName("i_it_cd_id_itp");
            entity.Property(e => e.IItCode)
                .HasMaxLength(32)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_it_code");
            entity.Property(e => e.IItDescriptionLan1)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_it_description_lan1");
            entity.Property(e => e.IItDescriptionLan2)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_it_description_lan2");
            entity.Property(e => e.IItDescriptionLan3)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_it_description_lan3");
            entity.Property(e => e.IItHasExpiryDate).HasColumnName("i_it_has_expiry_date");
            entity.Property(e => e.IItHasLot).HasColumnName("i_it_has_lot");
            entity.Property(e => e.IItHasMultipleUom).HasColumnName("i_it_has_multiple_uom");
            entity.Property(e => e.IItHasProductionDate).HasColumnName("i_it_has_production_date");
            entity.Property(e => e.IItHasSerial).HasColumnName("i_it_has_serial");
            entity.Property(e => e.IItId).HasColumnName("i_it_id");
            entity.Property(e => e.IItIsAsset).HasColumnName("i_it_is_asset");
            entity.Property(e => e.IItIsDescription).HasColumnName("i_it_is_description");
            entity.Property(e => e.IItIsSaleable).HasColumnName("i_it_is_saleable");
            entity.Property(e => e.IItIsService).HasColumnName("i_it_is_service");
            entity.Property(e => e.IItItId).HasColumnName("i_it_it_id");
            entity.Property(e => e.IItUomId).HasColumnName("i_it_uom_id");
            entity.Property(e => e.IItWeight).HasColumnName("i_it_weight");
        });

        modelBuilder.Entity<ImpReceiptInvoiceNbV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_RECEIPT_INVOICE_NB_V", "dex");

            entity.Property(e => e.IRiBeId).HasColumnName("i_ri_be_id");
            entity.Property(e => e.IRiCdIdRit).HasColumnName("i_ri_cd_id_rit");
            entity.Property(e => e.IRiCpCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("i_ri_cp_code");
            entity.Property(e => e.IRiFeId).HasColumnName("i_ri_fe_id");
            entity.Property(e => e.IRiFromCode).HasColumnName("i_ri_from_code");
            entity.Property(e => e.IRiPrefix)
                .HasMaxLength(105)
                .HasColumnName("i_ri_prefix");
            entity.Property(e => e.IRiSmId).HasColumnName("i_ri_sm_id");
            entity.Property(e => e.IRiToCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("i_ri_to_code");
            entity.Property(e => e.IRiTotalLength).HasColumnName("i_ri_total_length");
            entity.Property(e => e.IRiType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("i_ri_type");
            entity.Property(e => e.IxRiId).HasColumnName("ix_ri_id");
        });

        modelBuilder.Entity<ImpRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_ROUTE");

            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.AutomaticRoute)
                .HasMaxLength(255)
                .HasColumnName("automatic route");
            entity.Property(e => e.Auxiliary).HasColumnName("auxiliary");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.RegDesc)
                .HasMaxLength(255)
                .HasColumnName("reg#desc");
            entity.Property(e => e.RouteName)
                .HasMaxLength(255)
                .HasColumnName("route name");
            entity.Property(e => e.SubRegName)
                .HasMaxLength(255)
                .HasColumnName("sub#reg# name");
        });

        modelBuilder.Entity<ImpThirdpartyFinanceV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_THIRDPARTY_FINANCE_V", "dex");

            entity.Property(e => e.IThpfAccountNo)
                .HasMaxLength(50)
                .HasColumnName("i_thpf_account_no");
            entity.Property(e => e.IThpfActive).HasColumnName("i_thpf_active");
            entity.Property(e => e.IThpfBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_thpf_balance");
            entity.Property(e => e.IThpfBuId).HasColumnName("i_thpf_bu_id");
            entity.Property(e => e.IThpfCdIdCur).HasColumnName("i_thpf_cd_id_cur");
            entity.Property(e => e.IThpfCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("i_thpf_create_date");
            entity.Property(e => e.IThpfCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_thpf_credit_limit");
            entity.Property(e => e.IThpfDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("i_thpf_discount");
            entity.Property(e => e.IThpfImpUid).HasColumnName("i_thpf_imp_uid");
            entity.Property(e => e.IThpfModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("i_thpf_modified_date");
            entity.Property(e => e.IThpfOrgId).HasColumnName("i_thpf_org_id");
            entity.Property(e => e.IThpfPlId).HasColumnName("i_thpf_pl_id");
            entity.Property(e => e.IThpfTaxId).HasColumnName("i_thpf_tax_id");
            entity.Property(e => e.IThpsId).HasColumnName("i_thps_id");
        });

        modelBuilder.Entity<ImpThirdpartySiteV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_THIRDPARTY_SITE_V", "dex");

            entity.Property(e => e.ICuRemark)
                .HasMaxLength(255)
                .HasColumnName("i_cu_remark");
            entity.Property(e => e.IThpId).HasColumnName("i_thp_id");
            entity.Property(e => e.IThpsAddress1)
                .HasMaxLength(256)
                .HasColumnName("i_thps_address1");
            entity.Property(e => e.IThpsAddress2)
                .HasMaxLength(256)
                .HasColumnName("i_thps_address2");
            entity.Property(e => e.IThpsAddress3)
                .HasMaxLength(256)
                .HasColumnName("i_thps_address3");
            entity.Property(e => e.IThpsBarcode)
                .HasMaxLength(32)
                .HasColumnName("i_thps_barcode");
            entity.Property(e => e.IThpsCdIdBst).HasColumnName("i_thps_cd_id_bst");
            entity.Property(e => e.IThpsCode)
                .HasMaxLength(30)
                .HasColumnName("i_thps_code");
            entity.Property(e => e.IThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("i_thps_contact_name_lan1");
            entity.Property(e => e.IThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("i_thps_contact_name_lan2");
            entity.Property(e => e.IThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("i_thps_contact_name_lan3");
            entity.Property(e => e.IThpsEmail).HasColumnName("i_thps_email");
            entity.Property(e => e.IThpsFax).HasColumnName("i_thps_fax");
            entity.Property(e => e.IThpsId).HasColumnName("i_thps_id");
            entity.Property(e => e.IThpsImpUid)
                .HasMaxLength(32)
                .HasColumnName("i_thps_imp_uid");
            entity.Property(e => e.IThpsLatitude).HasColumnName("i_thps_latitude");
            entity.Property(e => e.IThpsLongitude).HasColumnName("i_thps_longitude");
            entity.Property(e => e.IThpsMobile)
                .HasMaxLength(32)
                .HasColumnName("i_thps_mobile");
            entity.Property(e => e.IThpsNameLan1)
                .HasMaxLength(100)
                .HasColumnName("i_thps_name_lan1");
            entity.Property(e => e.IThpsNameLan2)
                .HasMaxLength(100)
                .HasColumnName("i_thps_name_lan2");
            entity.Property(e => e.IThpsNameLan3)
                .HasMaxLength(100)
                .HasColumnName("i_thps_name_lan3");
            entity.Property(e => e.IThpsPhone)
                .HasMaxLength(32)
                .HasColumnName("i_thps_phone");
            entity.Property(e => e.IThpsWebsite).HasColumnName("i_thps_website");
        });

        modelBuilder.Entity<ImpThirdpartyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_THIRDPARTY_V", "dex");

            entity.Property(e => e.IThpCdIdTpg).HasColumnName("i_thp_cd_id_tpg");
            entity.Property(e => e.IThpCdIdTps).HasColumnName("i_thp_cd_id_tps");
            entity.Property(e => e.IThpCode)
                .HasMaxLength(30)
                .HasColumnName("i_thp_code");
            entity.Property(e => e.IThpCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("i_thp_create_date");
            entity.Property(e => e.IThpId).HasColumnName("i_thp_id");
            entity.Property(e => e.IThpImpUid)
                .HasMaxLength(32)
                .HasColumnName("i_thp_imp_uid");
            entity.Property(e => e.IThpIsCompany).HasColumnName("i_thp_is_company");
            entity.Property(e => e.IThpIsCustomer).HasColumnName("i_thp_is_customer");
            entity.Property(e => e.IThpIsSupplier).HasColumnName("i_thp_is_supplier");
            entity.Property(e => e.IThpModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("i_thp_modified_date");
            entity.Property(e => e.IThpNameLan1)
                .HasMaxLength(100)
                .HasColumnName("i_thp_name_lan1");
            entity.Property(e => e.IThpNameLan2)
                .HasMaxLength(100)
                .HasColumnName("i_thp_name_lan2");
            entity.Property(e => e.IThpNameLan3)
                .HasMaxLength(100)
                .HasColumnName("i_thp_name_lan3");
        });

        modelBuilder.Entity<ImpThirdpartycategoryFamilyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_THIRDPARTYCATEGORY_FAMILY_V", "dex");

            entity.Property(e => e.IThcfBuId).HasColumnName("i_thcf_bu_id");
            entity.Property(e => e.IThcfCalculated).HasColumnName("i_thcf_calculated");
            entity.Property(e => e.IThcfCode)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("i_thcf_code");
            entity.Property(e => e.IThcfDescriptionLan1)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("i_thcf_description_lan1");
            entity.Property(e => e.IThcfDescriptionLan2)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("i_thcf_description_lan2");
            entity.Property(e => e.IThcfDescriptionLan3)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("i_thcf_description_lan3");
            entity.Property(e => e.IThcfLevel).HasColumnName("i_thcf_level");
            entity.Property(e => e.IThcfThcfId).HasColumnName("i_thcf_thcf_id");
            entity.Property(e => e.IxThcfId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ix_thcf_id");
        });

        modelBuilder.Entity<ImpThirdpartycategoryFamilyValuesV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_THIRDPARTYCATEGORY_FAMILY_VALUES_V", "dex");

            entity.Property(e => e.IThcfvCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_code");
            entity.Property(e => e.IThcfvDescriptionLan1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan1");
            entity.Property(e => e.IThcfvDescriptionLan2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan2");
            entity.Property(e => e.IThcfvDescriptionLan3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan3");
            entity.Property(e => e.IThcfvThcfId).HasColumnName("i_thcfv_thcf_id");
            entity.Property(e => e.IxThcfvId).HasColumnName("ix_thcfv_id");
        });

        modelBuilder.Entity<ImpUomV1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_UOM_V1", "dex");

            entity.Property(e => e.IUomCode)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_uom_code");
            entity.Property(e => e.IUomDescription)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_uom_description");
            entity.Property(e => e.IUomId).HasColumnName("i_uom_id");
            entity.Property(e => e.IUomRefId)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_uom_ref_id");
        });

        modelBuilder.Entity<ImpUserThirdpartySiteV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_USER_THIRDPARTY_SITE_V", "dex");

            entity.Property(e => e.IUthpsThpsId).HasColumnName("i_uthps_thps_id");
            entity.Property(e => e.IUthpsUsId).HasColumnName("i_uthps_us_id");
        });

        modelBuilder.Entity<ImpUserWarehouseV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_USER_WAREHOUSE_V", "dex");

            entity.Property(e => e.IUswIsDefault).HasColumnName("i_usw_is_default");
            entity.Property(e => e.IUswPlIdWhs).HasColumnName("i_usw_pl_id_whs");
            entity.Property(e => e.IUswUsId).HasColumnName("i_usw_us_id");
        });

        modelBuilder.Entity<ImpUsersV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_USERS_V", "dex");

            entity.Property(e => e.IUsActive).HasColumnName("i_us_active");
            entity.Property(e => e.IUsCode)
                .HasMaxLength(16)
                .HasColumnName("i_us_code");
            entity.Property(e => e.IUsDbUser).HasColumnName("i_us_db_user");
            entity.Property(e => e.IUsDeleted).HasColumnName("i_us_deleted");
            entity.Property(e => e.IUsEmail)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("i_us_email");
            entity.Property(e => e.IUsExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("i_us_expiry_date");
            entity.Property(e => e.IUsFirstName)
                .HasMaxLength(128)
                .HasColumnName("i_us_first_name");
            entity.Property(e => e.IUsId).HasColumnName("i_us_id");
            entity.Property(e => e.IUsLastName)
                .HasMaxLength(128)
                .HasColumnName("i_us_last_name");
            entity.Property(e => e.IUsLogin)
                .HasMaxLength(16)
                .HasColumnName("i_us_login");
            entity.Property(e => e.IUsPassword)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("i_us_password");
            entity.Property(e => e.IUsReceiveNotification).HasColumnName("i_us_receive_notification");
            entity.Property(e => e.IUsShortName)
                .HasMaxLength(128)
                .HasColumnName("i_us_short_name");
        });

        modelBuilder.Entity<ImpWarehouseV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMP_WAREHOUSE_V", "dex");

            entity.Property(e => e.IMdId).HasColumnName("i_md_id");
            entity.Property(e => e.IWhBuId).HasColumnName("i_wh_bu_id");
            entity.Property(e => e.IWhCode)
                .HasMaxLength(16)
                .HasColumnName("i_wh_code");
            entity.Property(e => e.IWhDescription)
                .HasMaxLength(16)
                .HasColumnName("i_wh_description");
            entity.Property(e => e.IWhDescriptionAr)
                .HasMaxLength(16)
                .HasColumnName("i_wh_description_ar");
            entity.Property(e => e.IcdIdWht).HasColumnName("icd_id_wht");
            entity.Property(e => e.IplId).HasColumnName("ipl_id");
        });

        modelBuilder.Entity<ImpXlsCashvan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_CASHVAN");

            entity.Property(e => e.CashvanId).HasColumnName("CASHVAN ID");
            entity.Property(e => e.CashvanName)
                .HasMaxLength(255)
                .HasColumnName("CASHVAN NAME");
        });

        modelBuilder.Entity<ImpXlsCashvanItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_CASHVAN_ITEMS");

            entity.Property(e => e.ItemDesc).HasMaxLength(255);
        });

        modelBuilder.Entity<ImpXlsCuSalesman>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_CU_SALESMAN");

            entity.Property(e => e.CustomerAccount)
                .HasMaxLength(255)
                .HasColumnName("Customer account");
            entity.Property(e => e.Salesman).HasMaxLength(255);
        });

        modelBuilder.Entity<ImpXlsDriver>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_DRIVERS");

            entity.Property(e => e.DriverId).HasColumnName("DRIVER ID");
            entity.Property(e => e.DriverModeOfDelivery)
                .HasMaxLength(255)
                .HasColumnName("DRIVER MODE OF DELIVERY");
            entity.Property(e => e.DriverName)
                .HasMaxLength(255)
                .HasColumnName("DRIVER NAME");
        });

        modelBuilder.Entity<ImpXlsNespSmItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_NESP_SM_ITEM");

            entity.Property(e => e.Dd)
                .HasMaxLength(255)
                .HasColumnName("dd");
            entity.Property(e => e.Itemcode).HasColumnName("itemcode");
            entity.Property(e => e.Itemdesc)
                .HasMaxLength(255)
                .HasColumnName("itemdesc");
        });

        modelBuilder.Entity<ImpXlsProductSmItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_PRODUCT_SM_ITEM");

            entity.Property(e => e.Dd)
                .HasMaxLength(255)
                .HasColumnName("dd");
            entity.Property(e => e.ItemDesc).HasMaxLength(255);
        });

        modelBuilder.Entity<ImpXlsRogersItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_ROGERS_ITEMS");

            entity.Property(e => e.Dd)
                .HasMaxLength(255)
                .HasColumnName("dd");
            entity.Property(e => e.Itemcode).HasColumnName("itemcode");
            entity.Property(e => e.Itemdesc)
                .HasMaxLength(255)
                .HasColumnName("itemdesc");
        });

        modelBuilder.Entity<ImpXlsSalesman>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IMP_XLS_SALESMAN");

            entity.Property(e => e.SalesmanId).HasColumnName("SALESMAN ID");
            entity.Property(e => e.SalesmanName)
                .HasMaxLength(255)
                .HasColumnName("SALESMAN NAME");
            entity.Property(e => e.SalesmanType)
                .HasMaxLength(255)
                .HasColumnName("Salesman Type");
        });

        modelBuilder.Entity<Inspection>(entity =>
        {
            entity.HasKey(e => e.InId).HasFillFactor(90);

            entity.ToTable("INSPECTION", "cmn");

            entity.HasIndex(e => e.InVtId, "ix_inspection").HasFillFactor(90);

            entity.HasIndex(e => e.InUsId, "ix_inspection_1").HasFillFactor(90);

            entity.Property(e => e.InId).HasColumnName("in_id");
            entity.Property(e => e.InCdIdRemark).HasColumnName("in_cd_id_remark");
            entity.Property(e => e.InCdIdType).HasColumnName("in_cd_id_type");
            entity.Property(e => e.InIsCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("in_is_create_date");
            entity.Property(e => e.InOrgId).HasColumnName("in_org_id");
            entity.Property(e => e.InRemarks)
                .HasMaxLength(255)
                .HasColumnName("in_remarks");
            entity.Property(e => e.InSgdId).HasColumnName("in_sgd_id");
            entity.Property(e => e.InUsId).HasColumnName("in_us_id");
            entity.Property(e => e.InVtId).HasColumnName("in_vt_id");

            entity.HasOne(d => d.InCdIdRemarkNavigation).WithMany(p => p.InspectionInCdIdRemarkNavigations)
                .HasForeignKey(d => d.InCdIdRemark)
                .HasConstraintName("FK_IN_REF_CD_REMARKS");

            entity.HasOne(d => d.InCdIdTypeNavigation).WithMany(p => p.InspectionInCdIdTypeNavigations)
                .HasForeignKey(d => d.InCdIdType)
                .HasConstraintName("FK_IN_REF_CD_TYPE");

            entity.HasOne(d => d.InUs).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.InUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INSPECTI_REFERENCE_USER");

            entity.HasOne(d => d.InVt).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.InVtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INSPECTI_REFERENCE_VISIT");
        });

        modelBuilder.Entity<InspectionEmployeeSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("INSPECTION_EMPLOYEE_SNC", "syn");

            entity.Property(e => e.SIneEmId).HasColumnName("s_ine_em_id");
            entity.Property(e => e.SIneId).HasColumnName("s_ine_id");
            entity.Property(e => e.SIneInId).HasColumnName("s_ine_in_id");
            entity.Property(e => e.SIneUserId).HasColumnName("s_ine_user_id");
            entity.Property(e => e.SIneVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ine_version");
        });

        modelBuilder.Entity<InspectionList>(entity =>
        {
            entity.HasKey(e => e.IlId).HasFillFactor(90);

            entity.ToTable("INSPECTION_LIST", "cmn");

            entity.HasIndex(e => e.IlSrId, "ix_inspection_list").HasFillFactor(90);

            entity.HasIndex(e => e.IlInId, "ix_inspection_list_1").HasFillFactor(90);

            entity.Property(e => e.IlId).HasColumnName("il_id");
            entity.Property(e => e.IlCdIdRemark).HasColumnName("il_cd_id_remark");
            entity.Property(e => e.IlCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("il_create_date");
            entity.Property(e => e.IlInId).HasColumnName("il_in_id");
            entity.Property(e => e.IlOrgId).HasColumnName("il_org_id");
            entity.Property(e => e.IlRemarks)
                .HasMaxLength(255)
                .HasColumnName("il_remarks");
            entity.Property(e => e.IlScanned).HasColumnName("il_scanned");
            entity.Property(e => e.IlSrId).HasColumnName("il_sr_id");

            entity.HasOne(d => d.IlCdIdRemarkNavigation).WithMany(p => p.InspectionLists)
                .HasForeignKey(d => d.IlCdIdRemark)
                .HasConstraintName("FK_IL_REF_CD_REMARKS");

            entity.HasOne(d => d.IlIn).WithMany(p => p.InspectionLists)
                .HasForeignKey(d => d.IlInId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IL_REF_IN");

            entity.HasOne(d => d.IlSr).WithMany(p => p.InspectionLists)
                .HasForeignKey(d => d.IlSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INSPECTI_REFERENCE_SURVEY");
        });

        modelBuilder.Entity<InspectionListSnc>(entity =>
        {
            entity.HasKey(e => new { e.SIlId, e.SIlVersion }).HasFillFactor(90);

            entity.ToTable("INSPECTION_LIST_SNC", "syn");

            entity.Property(e => e.SIlId).HasColumnName("s_il_id");
            entity.Property(e => e.SIlVersion)
                .HasMaxLength(25)
                .HasColumnName("s_il_version");
            entity.Property(e => e.SIlCdIdRemark).HasColumnName("s_il_cd_id_remark");
            entity.Property(e => e.SIlInId).HasColumnName("s_il_in_id");
            entity.Property(e => e.SIlInUid)
                .HasMaxLength(128)
                .HasColumnName("s_il_in_uid");
            entity.Property(e => e.SIlIsCreated).HasColumnName("s_il_is_created");
            entity.Property(e => e.SIlRemark)
                .HasMaxLength(255)
                .HasColumnName("s_il_remark");
            entity.Property(e => e.SIlScId).HasColumnName("s_il_sc_id");
            entity.Property(e => e.SIlScanned).HasColumnName("s_il_scanned");
            entity.Property(e => e.SIlSmId).HasColumnName("s_il_sm_id");
            entity.Property(e => e.SIlSynched).HasColumnName("s_il_synched");
        });

        modelBuilder.Entity<InspectionSnc>(entity =>
        {
            entity.HasKey(e => new { e.SInId, e.SInVersion }).HasFillFactor(90);

            entity.ToTable("INSPECTION_SNC", "syn");

            entity.Property(e => e.SInId).HasColumnName("s_in_id");
            entity.Property(e => e.SInVersion)
                .HasMaxLength(25)
                .HasColumnName("s_in_version");
            entity.Property(e => e.SInCdIdRemark).HasColumnName("s_in_cd_id_remark");
            entity.Property(e => e.SInCdIdType).HasColumnName("s_in_cd_id_type");
            entity.Property(e => e.SInIsCreated).HasColumnName("s_in_is_created");
            entity.Property(e => e.SInRemark)
                .HasMaxLength(255)
                .HasColumnName("s_in_remark");
            entity.Property(e => e.SInSgdId).HasColumnName("s_in_sgd_id");
            entity.Property(e => e.SInSmId).HasColumnName("s_in_sm_id");
            entity.Property(e => e.SInSynched).HasColumnName("s_in_synched");
            entity.Property(e => e.SInUid)
                .HasMaxLength(128)
                .HasColumnName("s_in_uid");
            entity.Property(e => e.SInVtId).HasColumnName("s_in_vt_id");
            entity.Property(e => e.SInVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_in_vt_uid");
        });

        modelBuilder.Entity<InspectionSurvey>(entity =>
        {
            entity.HasKey(e => e.IlsId).HasFillFactor(90);

            entity.ToTable("INSPECTION_SURVEY", "cmn");

            entity.HasIndex(e => e.IlsSriId, "ix_inspection_survey").HasFillFactor(90);

            entity.HasIndex(e => e.IlsCdIdAnswer, "ix_inspection_survey_2").HasFillFactor(90);

            entity.HasIndex(e => e.IlsAnswerText, "ix_inspection_survey_3").HasFillFactor(90);

            entity.Property(e => e.IlsId).HasColumnName("ils_id");
            entity.Property(e => e.IlsAnswerText)
                .HasMaxLength(255)
                .HasColumnName("ils_answer_text");
            entity.Property(e => e.IlsCdIdAnswer).HasColumnName("ils_cd_id_answer");
            entity.Property(e => e.IlsIlId).HasColumnName("ils_il_id");
            entity.Property(e => e.IlsOrgId).HasColumnName("ils_org_id");
            entity.Property(e => e.IlsScanned).HasColumnName("ils_scanned");
            entity.Property(e => e.IlsSriId).HasColumnName("ils_sri_id");

            entity.HasOne(d => d.IlsCdIdAnswerNavigation).WithMany(p => p.InspectionSurveys)
                .HasForeignKey(d => d.IlsCdIdAnswer)
                .HasConstraintName("FK_ILS_REF_CD_ANSWER");

            entity.HasOne(d => d.IlsIl).WithMany(p => p.InspectionSurveys)
                .HasForeignKey(d => d.IlsIlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ILS_REF_IL");

            entity.HasOne(d => d.IlsSri).WithMany(p => p.InspectionSurveys)
                .HasForeignKey(d => d.IlsSriId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INSPECTI_REFERENCE_SURVEY_Q");
        });

        modelBuilder.Entity<InspectionSurveySnc>(entity =>
        {
            entity.HasKey(e => new { e.SIlsId, e.SIlsVersion }).HasFillFactor(90);

            entity.ToTable("INSPECTION_SURVEY_SNC", "syn");

            entity.Property(e => e.SIlsId).HasColumnName("s_ils_id");
            entity.Property(e => e.SIlsVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ils_version");
            entity.Property(e => e.SIlsAnswerText)
                .HasMaxLength(255)
                .HasColumnName("s_ils_answer_text");
            entity.Property(e => e.SIlsCdIdAnswer).HasColumnName("s_ils_cd_id_answer");
            entity.Property(e => e.SIlsIlId).HasColumnName("s_ils_il_id");
            entity.Property(e => e.SIlsScanned).HasColumnName("s_ils_scanned");
            entity.Property(e => e.SIlsSiId).HasColumnName("s_ils_si_id");
            entity.Property(e => e.SIlsSmId).HasColumnName("s_ils_sm_id");
            entity.Property(e => e.SIlsSynched).HasColumnName("s_ils_synched");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.IvId).HasFillFactor(90);

            entity.ToTable("INVENTORY", "mforce");

            entity.Property(e => e.IvId).HasColumnName("iv_id");
            entity.Property(e => e.IvBuId).HasColumnName("iv_bu_id");
            entity.Property(e => e.IvCode)
                .HasMaxLength(32)
                .HasColumnName("iv_code");
            entity.Property(e => e.IvDate)
                .HasColumnType("datetime")
                .HasColumnName("iv_date");
            entity.Property(e => e.IvDescription)
                .HasMaxLength(255)
                .HasColumnName("iv_description");
            entity.Property(e => e.IvIsCreated).HasColumnName("iv_is_created");
            entity.Property(e => e.IvThpsId).HasColumnName("iv_thps_id");
            entity.Property(e => e.IvVtId).HasColumnName("iv_vt_id");
        });

        modelBuilder.Entity<Inventory1>(entity =>
        {
            entity.HasKey(e => e.IvId).HasFillFactor(90);

            entity.ToTable("INVENTORY", "whs");

            entity.Property(e => e.IvId).HasColumnName("iv_id");
            entity.Property(e => e.IvActive)
                .HasDefaultValue((short)1)
                .HasColumnName("iv_active");
            entity.Property(e => e.IvCdIdIvs).HasColumnName("iv_cd_id_ivs");
            entity.Property(e => e.IvCode)
                .HasMaxLength(32)
                .HasColumnName("iv_code");
            entity.Property(e => e.IvCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("iv_create_date");
            entity.Property(e => e.IvDate)
                .HasColumnType("datetime")
                .HasColumnName("iv_date");
            entity.Property(e => e.IvDateEnd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("iv_date_end");
            entity.Property(e => e.IvDateStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("iv_date_start");
            entity.Property(e => e.IvIvhId).HasColumnName("iv_ivh_id");
            entity.Property(e => e.IvModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("iv_modified_date");
            entity.Property(e => e.IvOrgId).HasColumnName("iv_org_id");
            entity.Property(e => e.IvRemarks)
                .HasMaxLength(4000)
                .HasColumnName("iv_remarks");
            entity.Property(e => e.IvUsId).HasColumnName("iv_us_id");

            entity.HasOne(d => d.IvCdIdIvsNavigation).WithMany(p => p.Inventory1s)
                .HasForeignKey(d => d.IvCdIdIvs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVL_REF_CD_IVS");

            entity.HasOne(d => d.IvIvh).WithMany(p => p.Inventory1s)
                .HasForeignKey(d => d.IvIvhId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVL_REF_IVH");

            entity.HasOne(d => d.IvUs).WithMany(p => p.Inventory1s)
                .HasForeignKey(d => d.IvUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVL_REF_US");
        });

        modelBuilder.Entity<InventoryCriteriaWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPrcId, e.SPrcUsIdSync, e.SPrcVersion })
                .HasName("PK_inventory_criteria_WMS_SNC")
                .HasFillFactor(90);

            entity.ToTable("INVENTORY_CRITERIA_WMS_SNC", "syn");

            entity.Property(e => e.SPrcId).HasColumnName("s_prc_id");
            entity.Property(e => e.SPrcUsIdSync).HasColumnName("s_prc_us_id_sync");
            entity.Property(e => e.SPrcVersion)
                .HasMaxLength(32)
                .HasColumnName("s_prc_version");
            entity.Property(e => e.SPrcBarcode)
                .HasMaxLength(50)
                .HasColumnName("s_prc_barcode");
            entity.Property(e => e.SPrcInId).HasColumnName("s_prc_in_id");
            entity.Property(e => e.SPrcPrId).HasColumnName("s_prc_pr_id");
        });

        modelBuilder.Entity<InventoryDetail>(entity =>
        {
            entity.HasKey(e => e.IvdId).HasFillFactor(90);

            entity.ToTable("INVENTORY_DETAILS", "mforce");

            entity.Property(e => e.IvdId).HasColumnName("ivd_id");
            entity.Property(e => e.IvdBuId).HasColumnName("ivd_bu_id");
            entity.Property(e => e.IvdItId).HasColumnName("ivd_it_id");
            entity.Property(e => e.IvdIvId).HasColumnName("ivd_iv_id");
            entity.Property(e => e.IvdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ivd_quantity");
            entity.Property(e => e.IvdQuantitySku)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ivd_quantity_sku");
            entity.Property(e => e.IvdStBarcode)
                .HasMaxLength(64)
                .HasDefaultValue("0")
                .HasColumnName("ivd_st_barcode");
            entity.Property(e => e.IvdStId).HasColumnName("ivd_st_id");
            entity.Property(e => e.IvdUomId).HasColumnName("ivd_uom_id");
            entity.Property(e => e.SIvdSmId).HasColumnName("s_ivd_sm_id");
        });

        modelBuilder.Entity<InventoryDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SIvdId, e.SIvdSmId, e.SIvdVersion }).HasFillFactor(90);

            entity.ToTable("INVENTORY_DETAILS_SNC", "syn");

            entity.Property(e => e.SIvdId).HasColumnName("s_ivd_id");
            entity.Property(e => e.SIvdSmId).HasColumnName("s_ivd_sm_id");
            entity.Property(e => e.SIvdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ivd_version");
            entity.Property(e => e.SIvSmId).HasColumnName("s_iv_sm_id");
            entity.Property(e => e.SIvdIvId).HasColumnName("s_ivd_iv_id");
            entity.Property(e => e.SIvdIvUid)
                .HasMaxLength(128)
                .HasColumnName("s_ivd_iv_uid");
            entity.Property(e => e.SIvdPrId).HasColumnName("s_ivd_pr_id");
            entity.Property(e => e.SIvdProductPackQty)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ivd_product_pack_qty");
            entity.Property(e => e.SIvdProductQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ivd_product_qty");
            entity.Property(e => e.SIvdStId).HasColumnName("s_ivd_st_id");
        });

        modelBuilder.Entity<InventoryDetailsWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SIndId, e.SIndUsIdSync, e.SIndVersion }).HasFillFactor(90);

            entity.ToTable("INVENTORY_DETAILS_WMS_SNC", "syn");

            entity.Property(e => e.SIndId).HasColumnName("s_ind_id");
            entity.Property(e => e.SIndUsIdSync).HasColumnName("s_ind_us_id_sync");
            entity.Property(e => e.SIndVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ind_version");
            entity.Property(e => e.SIndFactorSku2pack)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ind_factor_sku2pack");
            entity.Property(e => e.SIndInId).HasColumnName("s_ind_in_id");
            entity.Property(e => e.SIndIsCreated).HasColumnName("s_ind_is_created");
            entity.Property(e => e.SIndIsModified).HasColumnName("s_ind_is_modified");
            entity.Property(e => e.SIndPackQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ind_pack_qty");
            entity.Property(e => e.SIndPrBarcode)
                .HasMaxLength(40)
                .HasColumnName("s_ind_pr_barcode");
            entity.Property(e => e.SIndPrCode)
                .HasMaxLength(500)
                .HasColumnName("s_ind_pr_code");
            entity.Property(e => e.SIndPrDescription)
                .HasMaxLength(200)
                .HasColumnName("s_ind_pr_description");
            entity.Property(e => e.SIndPrId).HasColumnName("s_ind_pr_id");
            entity.Property(e => e.SIndPrIsSerial).HasColumnName("s_ind_pr_is_serial");
            entity.Property(e => e.SIndPrbType)
                .HasMaxLength(20)
                .HasColumnName("s_ind_prb_type");
            entity.Property(e => e.SIndQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ind_qty");
            entity.Property(e => e.SIndSkuQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ind_sku_qty");
            entity.Property(e => e.SIndWhlCode)
                .HasMaxLength(32)
                .HasColumnName("s_ind_whl_code");
            entity.Property(e => e.SIndWhlId).HasColumnName("s_ind_whl_id");
        });

        modelBuilder.Entity<InventoryHeader>(entity =>
        {
            entity.HasKey(e => e.IvhId).HasFillFactor(90);

            entity.ToTable("INVENTORY_HEADER", "whs");

            entity.Property(e => e.IvhId).HasColumnName("ivh_id");
            entity.Property(e => e.IvhActive)
                .HasDefaultValue((short)1)
                .HasColumnName("ivh_active");
            entity.Property(e => e.IvhAllItems)
                .HasDefaultValue((short)1)
                .HasColumnName("ivh_all_items");
            entity.Property(e => e.IvhBuId).HasColumnName("ivh_bu_id");
            entity.Property(e => e.IvhCdIdIvs).HasColumnName("ivh_cd_id_ivs");
            entity.Property(e => e.IvhCdIdIvt).HasColumnName("ivh_cd_id_ivt");
            entity.Property(e => e.IvhCode)
                .HasMaxLength(32)
                .HasColumnName("ivh_code");
            entity.Property(e => e.IvhCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ivh_create_date");
            entity.Property(e => e.IvhDateEnd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ivh_date_end");
            entity.Property(e => e.IvhDateStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ivh_date_start");
            entity.Property(e => e.IvhDescription)
                .HasMaxLength(32)
                .HasColumnName("ivh_description");
            entity.Property(e => e.IvhItemLotDate)
                .HasDefaultValue((short)-1)
                .HasColumnName("ivh_item_lot_date");
            entity.Property(e => e.IvhModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ivh_modified_date");
            entity.Property(e => e.IvhRemarks)
                .HasMaxLength(4000)
                .HasColumnName("ivh_remarks");
            entity.Property(e => e.IvhUsId).HasColumnName("ivh_us_id");

            entity.HasOne(d => d.IvhCdIdIvsNavigation).WithMany(p => p.InventoryHeaderIvhCdIdIvsNavigations)
                .HasForeignKey(d => d.IvhCdIdIvs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVH_REF_CD_IVS");

            entity.HasOne(d => d.IvhCdIdIvtNavigation).WithMany(p => p.InventoryHeaderIvhCdIdIvtNavigations)
                .HasForeignKey(d => d.IvhCdIdIvt)
                .HasConstraintName("FK_IVH_REF_CD_IVT");

            entity.HasOne(d => d.IvhUs).WithMany(p => p.InventoryHeaders)
                .HasForeignKey(d => d.IvhUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVH_REF_US");
        });

        modelBuilder.Entity<InventoryItem>(entity =>
        {
            entity.HasKey(e => e.IviId).HasFillFactor(90);

            entity.ToTable("INVENTORY_ITEM", "whs");

            entity.Property(e => e.IviId).HasColumnName("ivi_id");
            entity.Property(e => e.IviCdIdIit).HasColumnName("ivi_cd_id_iit");
            entity.Property(e => e.IviIldId).HasColumnName("ivi_ild_id");
            entity.Property(e => e.IviItId).HasColumnName("ivi_it_id");
            entity.Property(e => e.IviIvId).HasColumnName("ivi_iv_id");
            entity.Property(e => e.IviPlId).HasColumnName("ivi_pl_id");
            entity.Property(e => e.IviQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ivi_quantity");
            entity.Property(e => e.IviQuantityExpected)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ivi_quantity_expected");
            entity.Property(e => e.IviRemarks)
                .HasMaxLength(512)
                .HasColumnName("ivi_remarks");
            entity.Property(e => e.IviUomId).HasColumnName("ivi_uom_id");

            entity.HasOne(d => d.IviCdIdIitNavigation).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviCdIdIit)
                .HasConstraintName("FK_IVI_REF_CD_IIT");

            entity.HasOne(d => d.IviIld).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviIldId)
                .HasConstraintName("FK_IVID_REF_ILD");

            entity.HasOne(d => d.IviIt).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVI_REF_IT");

            entity.HasOne(d => d.IviIv).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviIvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVI_REF_IV");

            entity.HasOne(d => d.IviPl).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviPlId)
                .HasConstraintName("FK_IVL_REF_PL");

            entity.HasOne(d => d.IviUom).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.IviUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVI_REF_UOM");
        });

        modelBuilder.Entity<InventoryLinePhysicallocation>(entity =>
        {
            entity.HasKey(e => e.IplId)
                .HasName("PK_INVENTORY_LINE_PHYSICALLOCA")
                .HasFillFactor(90);

            entity.ToTable("INVENTORY_LINE_PHYSICALLOCATION", "whs");

            entity.Property(e => e.IplId).HasColumnName("ipl_id");
            entity.Property(e => e.IplIvId).HasColumnName("ipl_iv_id");
            entity.Property(e => e.IplPlId).HasColumnName("ipl_pl_id");

            entity.HasOne(d => d.IplIv).WithMany(p => p.InventoryLinePhysicallocations)
                .HasForeignKey(d => d.IplIvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPL_REF_IV");

            entity.HasOne(d => d.IplPl).WithMany(p => p.InventoryLinePhysicallocations)
                .HasForeignKey(d => d.IplPlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPL_REF_PL");
        });

        modelBuilder.Entity<InventoryLineThirdpartySite>(entity =>
        {
            entity.HasKey(e => e.IpltId).HasFillFactor(90);

            entity.ToTable("INVENTORY_LINE_THIRDPARTY_SITE", "whs");

            entity.Property(e => e.IpltId).HasColumnName("iplt_id");
            entity.Property(e => e.IpltIvId).HasColumnName("iplt_iv_id");
            entity.Property(e => e.IpltThpsId).HasColumnName("iplt_thps_id");

            entity.HasOne(d => d.IpltIv).WithMany(p => p.InventoryLineThirdpartySites)
                .HasForeignKey(d => d.IpltIvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPLT_REF_IV");

            entity.HasOne(d => d.IpltThps).WithMany(p => p.InventoryLineThirdpartySites)
                .HasForeignKey(d => d.IpltThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPLT_REF_THPS");
        });

        modelBuilder.Entity<InventorySerialLotWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SInsId, e.SInsUsIdSync, e.SInsVersion }).HasFillFactor(90);

            entity.ToTable("INVENTORY_SERIAL_LOT_WMS_SNC", "syn");

            entity.Property(e => e.SInsId).HasColumnName("s_ins_id");
            entity.Property(e => e.SInsUsIdSync).HasColumnName("s_ins_us_id_sync");
            entity.Property(e => e.SInsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ins_version");
            entity.Property(e => e.SInsIndId).HasColumnName("s_ins_ind_id");
            entity.Property(e => e.SInsIsCreated).HasColumnName("s_ins_is_created");
            entity.Property(e => e.SInsIsModified).HasColumnName("s_ins_is_modified");
            entity.Property(e => e.SInsIsSerial).HasColumnName("s_ins_is_serial");
            entity.Property(e => e.SInsQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_ins_qty");
            entity.Property(e => e.SInsSerials)
                .HasMaxLength(40)
                .HasColumnName("s_ins_serials");
        });

        modelBuilder.Entity<InventorySnc>(entity =>
        {
            entity.HasKey(e => new { e.SIvId, e.SIvSmId, e.SIvVersion }).HasFillFactor(90);

            entity.ToTable("INVENTORY_SNC", "syn");

            entity.Property(e => e.SIvId).HasColumnName("s_iv_id");
            entity.Property(e => e.SIvSmId).HasColumnName("s_iv_sm_id");
            entity.Property(e => e.SIvVersion)
                .HasMaxLength(25)
                .HasColumnName("s_iv_version");
            entity.Property(e => e.SIvCode)
                .HasMaxLength(32)
                .HasColumnName("s_iv_code");
            entity.Property(e => e.SIvCuId).HasColumnName("s_iv_cu_id");
            entity.Property(e => e.SIvDate)
                .HasColumnType("datetime")
                .HasColumnName("s_iv_date");
            entity.Property(e => e.SIvDescription)
                .HasMaxLength(255)
                .HasColumnName("s_iv_description");
            entity.Property(e => e.SIvRivId).HasColumnName("s_iv_riv_id");
            entity.Property(e => e.SIvUid)
                .HasMaxLength(128)
                .HasColumnName("s_iv_uid");
            entity.Property(e => e.SIvVtId).HasColumnName("s_iv_vt_id");
            entity.Property(e => e.SIvVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_iv_vt_uid");
        });

        modelBuilder.Entity<InventoryWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SInId, e.SInUsIdSync, e.SInVersion }).HasFillFactor(90);

            entity.ToTable("INVENTORY_WMS_SNC", "syn");

            entity.Property(e => e.SInId).HasColumnName("s_in_id");
            entity.Property(e => e.SInUsIdSync).HasColumnName("s_in_us_id_sync");
            entity.Property(e => e.SInVersion)
                .HasMaxLength(32)
                .HasColumnName("s_in_version");
            entity.Property(e => e.SInCdIdIns).HasColumnName("s_in_cd_id_ins");
            entity.Property(e => e.SInCode)
                .HasMaxLength(32)
                .HasColumnName("s_in_code");
            entity.Property(e => e.SInDate)
                .HasColumnType("datetime")
                .HasColumnName("s_in_date");
            entity.Property(e => e.SInDivisionCode)
                .HasMaxLength(32)
                .HasColumnName("s_in_division_code");
            entity.Property(e => e.SInIsCreated).HasColumnName("s_in_is_created");
            entity.Property(e => e.SInNum1)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_in_num1");
            entity.Property(e => e.SInNum2)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_in_num2");
            entity.Property(e => e.SInText1)
                .HasMaxLength(64)
                .HasColumnName("s_in_text1");
            entity.Property(e => e.SInText2)
                .HasMaxLength(64)
                .HasColumnName("s_in_text2");
            entity.Property(e => e.SInUsId).HasColumnName("s_in_us_id");
            entity.Property(e => e.SInWhCode)
                .HasMaxLength(32)
                .HasColumnName("s_in_wh_code");
            entity.Property(e => e.SInWhId).HasColumnName("s_in_wh_id");
        });

        modelBuilder.Entity<InventoryheaderItem>(entity =>
        {
            entity.HasKey(e => e.IvhiId).HasFillFactor(90);

            entity.ToTable("INVENTORYHEADER_ITEM", "whs");

            entity.Property(e => e.IvhiId).HasColumnName("ivhi_id");
            entity.Property(e => e.IvhiIcfId).HasColumnName("ivhi_icf_id");
            entity.Property(e => e.IvhiIcfvId).HasColumnName("ivhi_icfv_id");
            entity.Property(e => e.IvhiIvhId).HasColumnName("ivhi_ivh_id");

            entity.HasOne(d => d.IvhiIvh).WithMany(p => p.InventoryheaderItems)
                .HasForeignKey(d => d.IvhiIvhId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVHI_REF_IVH");
        });

        modelBuilder.Entity<InventorystatusTransition>(entity =>
        {
            entity.HasKey(e => e.IvstId).HasFillFactor(90);

            entity.ToTable("INVENTORYSTATUS_TRANSITION", "whs");

            entity.Property(e => e.IvstId).HasColumnName("ivst_id");
            entity.Property(e => e.IvstCdIdIvsFrom).HasColumnName("ivst_cd_id_ivs_from");
            entity.Property(e => e.IvstCdIdIvsTo).HasColumnName("ivst_cd_id_ivs_to");
            entity.Property(e => e.IvstCdIdIvtId).HasColumnName("ivst_cd_id_ivt_id");
            entity.Property(e => e.IvstExportData)
                .HasDefaultValue((short)-1)
                .HasColumnName("ivst_export_data");
            entity.Property(e => e.IvstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("ivst_extra_code");

            entity.HasOne(d => d.IvstCdIdIvsFromNavigation).WithMany(p => p.InventorystatusTransitionIvstCdIdIvsFromNavigations)
                .HasForeignKey(d => d.IvstCdIdIvsFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVS_ROM");

            entity.HasOne(d => d.IvstCdIdIvsToNavigation).WithMany(p => p.InventorystatusTransitionIvstCdIdIvsToNavigations)
                .HasForeignKey(d => d.IvstCdIdIvsTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVS_TO");

            entity.HasOne(d => d.IvstCdIdIvt).WithMany(p => p.InventorystatusTransitionIvstCdIdIvts)
                .HasForeignKey(d => d.IvstCdIdIvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVT");
        });

        modelBuilder.Entity<InventorystatusTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.IvtpId)
                .HasName("PK_INVENTORYSTATUS_TRANSITION_")
                .HasFillFactor(90);

            entity.ToTable("INVENTORYSTATUS_TRANSITION_PROFILE", "whs");

            entity.Property(e => e.IvtpId).HasColumnName("ivtp_id");
            entity.Property(e => e.IvtpIvstId).HasColumnName("ivtp_ivst_id");
            entity.Property(e => e.IvtpPrId).HasColumnName("ivtp_pr_id");

            entity.HasOne(d => d.IvtpPr).WithMany(p => p.InventorystatusTransitionProfiles)
                .HasForeignKey(d => d.IvtpPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVTP_REF_PR");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ItId)
                .HasName("PK_PRODUCT")
                .HasFillFactor(90);

            entity.ToTable("ITEM", "cmn");

            entity.HasIndex(e => e.ItCdIdItg, "it_cd_id_itg_idx").HasFillFactor(90);

            entity.HasIndex(e => e.ItCode, "it_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ItDescriptionLan1, "it_description_lan1_idx").HasFillFactor(90);

            entity.HasIndex(e => e.ItDescriptionLan2, "it_description_lan2_idx").HasFillFactor(90);

            entity.HasIndex(e => e.ItDescriptionLan3, "it_description_lan3_idx").HasFillFactor(90);

            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.ItActive)
                .HasDefaultValue((short)1)
                .HasColumnName("it_active");
            entity.Property(e => e.ItCdIdIbd).HasColumnName("it_cd_id_ibd");
            entity.Property(e => e.ItCdIdIgp).HasColumnName("it_cd_id_igp");
            entity.Property(e => e.ItCdIdIsg).HasColumnName("it_cd_id_isg");
            entity.Property(e => e.ItCdIdItg).HasColumnName("it_cd_id_itg");
            entity.Property(e => e.ItCdIdItp).HasColumnName("it_cd_id_itp");
            entity.Property(e => e.ItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.ItDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan2");
            entity.Property(e => e.ItDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan3");
            entity.Property(e => e.ItHasExpiryDate)
                .HasDefaultValue((short)-1)
                .HasColumnName("it_has_expiry_date");
            entity.Property(e => e.ItHasLot)
                .HasDefaultValue((short)-1)
                .HasColumnName("it_has_lot");
            entity.Property(e => e.ItHasMultipleUom).HasColumnName("it_has_multiple_uom");
            entity.Property(e => e.ItHasProductionDate)
                .HasDefaultValue((short)-1)
                .HasColumnName("it_has_production_date");
            entity.Property(e => e.ItHasSerial).HasColumnName("it_has_serial");
            entity.Property(e => e.ItImpUid)
                .HasMaxLength(128)
                .HasColumnName("it_imp_uid");
            entity.Property(e => e.ItIsAsset).HasColumnName("it_is_asset");
            entity.Property(e => e.ItIsBadReturn).HasColumnName("it_is_bad_return");
            entity.Property(e => e.ItIsDescription).HasColumnName("it_is_description");
            entity.Property(e => e.ItIsSaleable).HasColumnName("it_is_saleable");
            entity.Property(e => e.ItIsService).HasColumnName("it_is_service");
            entity.Property(e => e.ItItId).HasColumnName("it_it_id");
            entity.Property(e => e.ItOrder).HasColumnName("it_order");
            entity.Property(e => e.ItUomId).HasColumnName("it_uom_id");
            entity.Property(e => e.ItWeight)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(12, 5)")
                .HasColumnName("it_weight");

            entity.HasOne(d => d.ItCdIdIbdNavigation).WithMany(p => p.ItemItCdIdIbdNavigations)
                .HasForeignKey(d => d.ItCdIdIbd)
                .HasConstraintName("FK_IT_REF_CD_IBD");

            entity.HasOne(d => d.ItCdIdIgpNavigation).WithMany(p => p.ItemItCdIdIgpNavigations)
                .HasForeignKey(d => d.ItCdIdIgp)
                .HasConstraintName("FK_IT_REF_CD_IGP");

            entity.HasOne(d => d.ItCdIdIsgNavigation).WithMany(p => p.ItemItCdIdIsgNavigations)
                .HasForeignKey(d => d.ItCdIdIsg)
                .HasConstraintName("FK_IT_REF_CD_ISG");

            entity.HasOne(d => d.ItCdIdItgNavigation).WithMany(p => p.ItemItCdIdItgNavigations)
                .HasForeignKey(d => d.ItCdIdItg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IT_REF_CD_ITG");

            entity.HasOne(d => d.ItCdIdItpNavigation).WithMany(p => p.ItemItCdIdItpNavigations)
                .HasForeignKey(d => d.ItCdIdItp)
                .HasConstraintName("FK_IT_REF_CD_ITP");

            entity.HasOne(d => d.ItIt).WithMany(p => p.InverseItIt)
                .HasForeignKey(d => d.ItItId)
                .HasConstraintName("FK_ITEM_REFERENCE_ITEM");

            entity.HasOne(d => d.ItUom).WithMany(p => p.Items)
                .HasForeignKey(d => d.ItUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IT_REF_UOM");
        });

        modelBuilder.Entity<ItemApi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_API", "cmn");

            entity.Property(e => e.ItActive).HasColumnName("it_active");
            entity.Property(e => e.ItCdIdIbd).HasColumnName("it_cd_id_ibd");
            entity.Property(e => e.ItCdIdIgp).HasColumnName("it_cd_id_igp");
            entity.Property(e => e.ItCdIdIsg).HasColumnName("it_cd_id_isg");
            entity.Property(e => e.ItCdIdItg).HasColumnName("it_cd_id_itg");
            entity.Property(e => e.ItCdIdItp).HasColumnName("it_cd_id_itp");
            entity.Property(e => e.ItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.ItDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan2");
            entity.Property(e => e.ItDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan3");
            entity.Property(e => e.ItHasExpiryDate).HasColumnName("it_has_expiry_date");
            entity.Property(e => e.ItHasLot).HasColumnName("it_has_lot");
            entity.Property(e => e.ItHasMultipleUom).HasColumnName("it_has_multiple_uom");
            entity.Property(e => e.ItHasProductionDate).HasColumnName("it_has_production_date");
            entity.Property(e => e.ItHasSerial).HasColumnName("it_has_serial");
            entity.Property(e => e.ItId)
                .ValueGeneratedOnAdd()
                .HasColumnName("it_id");
            entity.Property(e => e.ItIsAsset).HasColumnName("it_is_asset");
            entity.Property(e => e.ItIsDescription).HasColumnName("it_is_description");
            entity.Property(e => e.ItIsSaleable).HasColumnName("it_is_saleable");
            entity.Property(e => e.ItIsService).HasColumnName("it_is_service");
            entity.Property(e => e.ItItId).HasColumnName("it_it_id");
            entity.Property(e => e.ItUomId).HasColumnName("it_uom_id");
            entity.Property(e => e.ItWeight)
                .HasColumnType("numeric(12, 5)")
                .HasColumnName("it_weight");
        });

        modelBuilder.Entity<ItemCategoryFamilyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_FAMILY_V", "cmn");

            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
            entity.Property(e => e.IclIcfvIdChild).HasColumnName("icl_icfv_id_child");
            entity.Property(e => e.IclIcfvIdParent).HasColumnName("icl_icfv_id_parent");
            entity.Property(e => e.IclId).HasColumnName("icl_id");
        });

        modelBuilder.Entity<ItemCategoryHierarchyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_HIERARCHY_V", "cmn");

            entity.Property(e => e.CtgCtgId).HasColumnName("ctg_ctg_id");
            entity.Property(e => e.CtgHierarchy)
                .HasMaxLength(102)
                .HasColumnName("ctg_hierarchy");
            entity.Property(e => e.CtgId).HasColumnName("ctg_id");
            entity.Property(e => e.CtgLevel).HasColumnName("ctg_level");
        });

        modelBuilder.Entity<ItemCategoryValue>(entity =>
        {
            entity.HasKey(e => e.IcvId).HasFillFactor(90);

            entity.ToTable("ITEM_CATEGORY_VALUE", "cmn");

            entity.HasIndex(e => new { e.IcvItId, e.IcvIcfvId, e.IcvIcfId }, "icv_it_icfv_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.IcvId).HasColumnName("icv_id");
            entity.Property(e => e.IcvIcfId).HasColumnName("icv_icf_id");
            entity.Property(e => e.IcvIcfvId).HasColumnName("icv_icfv_id");
            entity.Property(e => e.IcvItId).HasColumnName("icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(64)
                .HasColumnName("icv_value");

            entity.HasOne(d => d.IcvIcf).WithMany(p => p.ItemCategoryValues)
                .HasForeignKey(d => d.IcvIcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICV_REF_ICF");

            entity.HasOne(d => d.IcvIcfv).WithMany(p => p.ItemCategoryValues)
                .HasForeignKey(d => d.IcvIcfvId)
                .HasConstraintName("FK_ICV_REF_ICFV");

            entity.HasOne(d => d.IcvIt).WithMany(p => p.ItemCategoryValues)
                .HasForeignKey(d => d.IcvItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICV_REF_IT");
        });

        modelBuilder.Entity<ItemCategoryValueBrand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_BRAND", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueBrandSsfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_BRAND_ssfamily", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueCategoryBarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_category_barcode", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueFamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_FAMILY", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueGrossWeightBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_gross_weight_box", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueGrossWeightPc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_gross_weight_pc", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueGroupV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_GROUP_V", "cmn");

            entity.Property(e => e.IcvIcfId).HasColumnName("icv_icf_id");
            entity.Property(e => e.IcvIcfvId).HasColumnName("icv_icfv_id");
            entity.Property(e => e.IcvId).HasColumnName("icv_id");
            entity.Property(e => e.IcvItId).HasColumnName("icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(64)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueNetVolumeBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_net_volume_box", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueNetVolumePc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_net_volume_pc", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueNetWeightBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_net_weight_box", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueNetWeightPc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_net_weight_pc", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueProductionInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_production_info", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueSsfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_SSFAMILY", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueSstype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_SSTYPE", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueSubfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_SUBFAMILY", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueSubtype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_SUBTYPE", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemCategoryValueType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEM_CATEGORY_VALUE_TYPE", "dex");

            entity.Property(e => e.IIcvIcfId).HasColumnName("i_icv_icf_id");
            entity.Property(e => e.IIcvIcfvId).HasColumnName("i_icv_icfv_id");
            entity.Property(e => e.IIcvId).HasColumnName("i_icv_id");
            entity.Property(e => e.IIcvItId).HasColumnName("i_icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(255)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<ItemFinance>(entity =>
        {
            entity.HasKey(e => e.ItfId).HasFillFactor(90);

            entity.ToTable("ITEM_FINANCE", "sls");

            entity.HasIndex(e => new { e.ItfItId, e.ItfBuId }, "itf_it_bu_idx").HasFillFactor(90);

            entity.Property(e => e.ItfId).HasColumnName("itf_id");
            entity.Property(e => e.ItfBuId).HasColumnName("itf_bu_id");
            entity.Property(e => e.ItfCdIdTax).HasColumnName("itf_cd_id_tax");
            entity.Property(e => e.ItfDefaultPrice)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("itf_default_price");
            entity.Property(e => e.ItfItId).HasColumnName("itf_it_id");
            entity.Property(e => e.ItfMaxDiscount)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("itf_max_discount");

            entity.HasOne(d => d.ItfBu).WithMany(p => p.ItemFinances)
                .HasForeignKey(d => d.ItfBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITF_REF_BU");

            entity.HasOne(d => d.ItfCdIdTaxNavigation).WithMany(p => p.ItemFinances)
                .HasForeignKey(d => d.ItfCdIdTax)
                .HasConstraintName("FK_ITF_REF_CD_TAX");

            entity.HasOne(d => d.ItfIt).WithMany(p => p.ItemFinances)
                .HasForeignKey(d => d.ItfItId)
                .HasConstraintName("FK_ITF_REF_IT");
        });

        modelBuilder.Entity<ItemList>(entity =>
        {
            entity.HasKey(e => e.ItlId).HasFillFactor(90);

            entity.ToTable("ITEM_LIST", "sls");

            entity.Property(e => e.ItlId).HasColumnName("itl_id");
            entity.Property(e => e.ItlBuId).HasColumnName("itl_bu_id");
            entity.Property(e => e.ItlCdIdItls).HasColumnName("itl_cd_id_itls");
            entity.Property(e => e.ItlCdIdItlt).HasColumnName("itl_cd_id_itlt");
            entity.Property(e => e.ItlCode)
                .HasMaxLength(32)
                .HasColumnName("itl_code");
            entity.Property(e => e.ItlCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("itl_creation_date");
            entity.Property(e => e.ItlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("itl_description_lan1");
            entity.Property(e => e.ItlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("itl_description_lan2");
            entity.Property(e => e.ItlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("itl_description_lan3");
            entity.Property(e => e.ItlEndDate)
                .HasColumnType("datetime")
                .HasColumnName("itl_end_date");
            entity.Property(e => e.ItlOrgId).HasColumnName("itl_org_id");
            entity.Property(e => e.ItlPrId).HasColumnName("itl_pr_id");
            entity.Property(e => e.ItlStartDate)
                .HasColumnType("datetime")
                .HasColumnName("itl_start_date");
            entity.Property(e => e.ItlThpsId).HasColumnName("itl_thps_id");
            entity.Property(e => e.ItlUsId).HasColumnName("itl_us_id");
            entity.Property(e => e.ItlVtId).HasColumnName("itl_vt_id");
        });

        modelBuilder.Entity<ItemListDetail>(entity =>
        {
            entity.HasKey(e => e.ItldId).HasFillFactor(90);

            entity.ToTable("ITEM_LIST_DETAIL", "sls");

            entity.Property(e => e.ItldId).HasColumnName("itld_id");
            entity.Property(e => e.ItldDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itld_discount_line");
            entity.Property(e => e.ItldExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("itld_expiry_date");
            entity.Property(e => e.ItldGrouping).HasColumnName("itld_grouping");
            entity.Property(e => e.ItldItId).HasColumnName("itld_it_id");
            entity.Property(e => e.ItldItlId).HasColumnName("itld_itl_id");
            entity.Property(e => e.ItldLotNb)
                .HasMaxLength(64)
                .HasColumnName("itld_lot_nb");
            entity.Property(e => e.ItldPackPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itld_pack_price");
            entity.Property(e => e.ItldPackQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itld_pack_qty");
            entity.Property(e => e.ItldRemark)
                .HasMaxLength(1000)
                .HasColumnName("itld_remark");
            entity.Property(e => e.ItldUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itld_unit_price");
            entity.Property(e => e.ItldUnitQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itld_unit_qty");
        });

        modelBuilder.Entity<ItemListDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.SItldId, e.SItldSmId, e.SItldVersion }).HasFillFactor(90);

            entity.ToTable("ITEM_LIST_DETAIL_SNC", "syn");

            entity.Property(e => e.SItldId).HasColumnName("s_itld_id");
            entity.Property(e => e.SItldSmId).HasColumnName("s_itld_sm_id");
            entity.Property(e => e.SItldVersion)
                .HasMaxLength(32)
                .HasColumnName("s_itld_version");
            entity.Property(e => e.SItldDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_itld_discount_line");
            entity.Property(e => e.SItldExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_itld_expiry_date");
            entity.Property(e => e.SItldGrouping).HasColumnName("s_itld_grouping");
            entity.Property(e => e.SItldItId).HasColumnName("s_itld_it_id");
            entity.Property(e => e.SItldItlId).HasColumnName("s_itld_itl_id");
            entity.Property(e => e.SItldLotNb)
                .HasMaxLength(64)
                .HasColumnName("s_itld_lot_nb");
            entity.Property(e => e.SItldPackPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_itld_pack_price");
            entity.Property(e => e.SItldPackQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_itld_pack_qty");
            entity.Property(e => e.SItldRemark)
                .HasMaxLength(1000)
                .HasColumnName("s_itld_remark");
            entity.Property(e => e.SItldSynched).HasColumnName("s_itld_synched");
            entity.Property(e => e.SItldUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_itld_unit_price");
            entity.Property(e => e.SItldUnitQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_itld_unit_qty");
        });

        modelBuilder.Entity<ItemListSnc>(entity =>
        {
            entity.HasKey(e => new { e.SItlId, e.SItlSmId, e.SItlVersion }).HasFillFactor(90);

            entity.ToTable("ITEM_LIST_SNC", "syn");

            entity.Property(e => e.SItlId).HasColumnName("s_itl_id");
            entity.Property(e => e.SItlSmId).HasColumnName("s_itl_sm_id");
            entity.Property(e => e.SItlVersion)
                .HasMaxLength(32)
                .HasColumnName("s_itl_version");
            entity.Property(e => e.SItlBuId).HasColumnName("s_itl_bu_id");
            entity.Property(e => e.SItlCdIdItls).HasColumnName("s_itl_cd_id_itls");
            entity.Property(e => e.SItlCdIdItlt).HasColumnName("s_itl_cd_id_itlt");
            entity.Property(e => e.SItlCode)
                .HasMaxLength(32)
                .HasColumnName("s_itl_code");
            entity.Property(e => e.SItlCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_itl_creation_date");
            entity.Property(e => e.SItlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("s_itl_description_lan1");
            entity.Property(e => e.SItlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("s_itl_description_lan2");
            entity.Property(e => e.SItlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("s_itl_description_lan3");
            entity.Property(e => e.SItlEndDate)
                .HasColumnType("datetime")
                .HasColumnName("s_itl_end_date");
            entity.Property(e => e.SItlStartDate)
                .HasColumnType("datetime")
                .HasColumnName("s_itl_start_date");
            entity.Property(e => e.SItlThpsId).HasColumnName("s_itl_thps_id");
            entity.Property(e => e.SItlVtId).HasColumnName("s_itl_vt_id");
            entity.Property(e => e.SItlVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_itl_vt_uid");
        });

        modelBuilder.Entity<ItemLotDate>(entity =>
        {
            entity.HasKey(e => e.IldId).HasFillFactor(90);

            entity.ToTable("ITEM_LOT_DATE", "cmn");

            entity.HasIndex(e => new { e.IldItId, e.IldExpiryDate }, "ild_it_expiry_date_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.IldItId, e.IldNumber }, "ild_it_number_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.IldId).HasColumnName("ild_id");
            entity.Property(e => e.IldActive).HasColumnName("ild_active");
            entity.Property(e => e.IldCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ild_creation_date");
            entity.Property(e => e.IldExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("ild_expiry_date");
            entity.Property(e => e.IldItId).HasColumnName("ild_it_id");
            entity.Property(e => e.IldNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ild_number");
            entity.Property(e => e.IldProdutionDate)
                .HasColumnType("datetime")
                .HasColumnName("ild_prodution_date");
            entity.Property(e => e.IldShortDescription)
                .HasMaxLength(64)
                .HasColumnName("ild_short_description");

            entity.HasOne(d => d.IldIt).WithMany(p => p.ItemLotDates)
                .HasForeignKey(d => d.IldItId)
                .HasConstraintName("FK_ILD_REF_IT");
        });

        modelBuilder.Entity<ItemMsl>(entity =>
        {
            entity.HasKey(e => e.ImslId).HasFillFactor(90);

            entity.ToTable("ITEM_MSL", "sls");

            entity.HasIndex(e => e.ImslCode, "imsl_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImslId).HasColumnName("imsl_id");
            entity.Property(e => e.ImslActive)
                .HasDefaultValue((short)1)
                .HasColumnName("imsl_active");
            entity.Property(e => e.ImslBuId).HasColumnName("imsl_bu_id");
            entity.Property(e => e.ImslCdIdImslt).HasColumnName("imsl_cd_id_imslt");
            entity.Property(e => e.ImslCode)
                .HasMaxLength(64)
                .HasColumnName("imsl_code");
            entity.Property(e => e.ImslDateCreation)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("imsl_date_creation");
            entity.Property(e => e.ImslDateEnd)
                .HasColumnType("datetime")
                .HasColumnName("imsl_date_end");
            entity.Property(e => e.ImslDateStart)
                .HasColumnType("datetime")
                .HasColumnName("imsl_date_start");
            entity.Property(e => e.ImslDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("imsl_description_lan1");
            entity.Property(e => e.ImslDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("imsl_description_lan2");
            entity.Property(e => e.ImslDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("imsl_description_lan3");

            entity.HasOne(d => d.ImslBu).WithMany(p => p.ItemMsls)
                .HasForeignKey(d => d.ImslBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSL_REF_BU");

            entity.HasOne(d => d.ImslCdIdImsltNavigation).WithMany(p => p.ItemMsls)
                .HasForeignKey(d => d.ImslCdIdImslt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSL_REF_CD_IMSLT");
        });

        modelBuilder.Entity<ItemMslDetail>(entity =>
        {
            entity.HasKey(e => e.ImsldId).HasFillFactor(90);

            entity.ToTable("ITEM_MSL_DETAIL", "sls");

            entity.HasIndex(e => new { e.ImsldImslId, e.ImsldItId }, "imsld_imsl_it_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImsldId).HasColumnName("imsld_id");
            entity.Property(e => e.ImsldGrouping).HasColumnName("imsld_grouping");
            entity.Property(e => e.ImsldImslId).HasColumnName("imsld_imsl_id");
            entity.Property(e => e.ImsldItId).HasColumnName("imsld_it_id");

            entity.HasOne(d => d.ImsldImsl).WithMany(p => p.ItemMslDetails)
                .HasForeignKey(d => d.ImsldImslId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSLD_REF_IMSL");

            entity.HasOne(d => d.ImsldIt).WithMany(p => p.ItemMslDetails)
                .HasForeignKey(d => d.ImsldItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSLD_REF_IT");
        });

        modelBuilder.Entity<ItemMslGl>(entity =>
        {
            entity.HasKey(e => e.ImslgId).HasFillFactor(90);

            entity.ToTable("ITEM_MSL_GL", "sls");

            entity.HasIndex(e => new { e.ImslgImslId, e.ImslgGlId }, "imslg_imsl_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImslgId).HasColumnName("imslg_id");
            entity.Property(e => e.ImslgGlId).HasColumnName("imslg_gl_id");
            entity.Property(e => e.ImslgImslId).HasColumnName("imslg_imsl_id");

            entity.HasOne(d => d.ImslgGl).WithMany(p => p.ItemMslGls)
                .HasForeignKey(d => d.ImslgGlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSLG_REF_GL");

            entity.HasOne(d => d.ImslgImsl).WithMany(p => p.ItemMslGls)
                .HasForeignKey(d => d.ImslgImslId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSLG_REF_IMSL");
        });

        modelBuilder.Entity<ItemMslThp>(entity =>
        {
            entity.HasKey(e => e.ImsltId).HasFillFactor(90);

            entity.ToTable("ITEM_MSL_THPS", "sls");

            entity.HasIndex(e => e.ImsltImslId, "imslt_imsl_idx").HasFillFactor(90);

            entity.Property(e => e.ImsltId).HasColumnName("imslt_id");
            entity.Property(e => e.ImsltImslId).HasColumnName("imslt_imsl_id");
            entity.Property(e => e.ImsltThcfId).HasColumnName("imslt_thcf_id");
            entity.Property(e => e.ImsltThcfvId).HasColumnName("imslt_thcfv_id");
            entity.Property(e => e.ImsltThpsId).HasColumnName("imslt_thps_id");

            entity.HasOne(d => d.ImsltImsl).WithMany(p => p.ItemMslThps)
                .HasForeignKey(d => d.ImsltImslId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMSLT_REF_IMSL");

            entity.HasOne(d => d.ImsltThps).WithMany(p => p.ItemMslThps)
                .HasForeignKey(d => d.ImsltThpsId)
                .HasConstraintName("FK_IMSLT_REF_THPS");
        });

        modelBuilder.Entity<ItemPhoto>(entity =>
        {
            entity.HasKey(e => e.ItpId).HasFillFactor(90);

            entity.ToTable("ITEM_PHOTO", "cmn");

            entity.HasIndex(e => e.ItpItId, "itp_it_idx").HasFillFactor(90);

            entity.Property(e => e.ItpId).HasColumnName("itp_id");
            entity.Property(e => e.ItpFilename)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasColumnName("itp_filename");
            entity.Property(e => e.ItpItId).HasColumnName("itp_it_id");
            entity.Property(e => e.ItpOrder).HasColumnName("itp_order");

            entity.HasOne(d => d.ItpIt).WithMany(p => p.ItemPhotos)
                .HasForeignKey(d => d.ItpItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITP_REF_IT");
        });

        modelBuilder.Entity<ItemQuotaGroup>(entity =>
        {
            entity.HasKey(e => e.IqgId).HasFillFactor(90);

            entity.ToTable("ITEM_QUOTA_GROUP", "cmn");

            entity.Property(e => e.IqgId).HasColumnName("iqg_id");
            entity.Property(e => e.IqgActive).HasColumnName("iqg_active");
            entity.Property(e => e.IqgCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("iqg_code");
            entity.Property(e => e.IqgDescription)
                .HasMaxLength(50)
                .HasColumnName("iqg_description");
            entity.Property(e => e.IqgFromDate)
                .HasColumnType("datetime")
                .HasColumnName("iqg_from_date");
            entity.Property(e => e.IqgToDate)
                .HasColumnType("datetime")
                .HasColumnName("iqg_to_date");
        });

        modelBuilder.Entity<ItemTax>(entity =>
        {
            entity.HasKey(e => e.ItxId).HasFillFactor(90);

            entity.ToTable("ITEM_TAX", "sls");

            entity.HasIndex(e => new { e.ItxItId, e.ItxTaxId, e.ItxBuId }, "itx_it_tax_bu_id")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ItxId).HasColumnName("itx_id");
            entity.Property(e => e.ItxBuId).HasColumnName("itx_bu_id");
            entity.Property(e => e.ItxItId).HasColumnName("itx_it_id");
            entity.Property(e => e.ItxRate)
                .HasColumnType("numeric(10, 5)")
                .HasColumnName("itx_rate");
            entity.Property(e => e.ItxTaxId).HasColumnName("itx_tax_id");

            entity.HasOne(d => d.ItxBu).WithMany(p => p.ItemTaxes)
                .HasForeignKey(d => d.ItxBuId)
                .HasConstraintName("FK_ITX_REF_BU");

            entity.HasOne(d => d.ItxIt).WithMany(p => p.ItemTaxes)
                .HasForeignKey(d => d.ItxItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITX_REF_IT");

            entity.HasOne(d => d.ItxTax).WithMany(p => p.ItemTaxes)
                .HasForeignKey(d => d.ItxTaxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITX_REF_TAX");
        });

        modelBuilder.Entity<ItemUom>(entity =>
        {
            entity.HasKey(e => e.ItuId).HasFillFactor(90);

            entity.ToTable("ITEM_UOM", "cmn");

            entity.HasIndex(e => new { e.ItuItId, e.ItuUomId, e.ItuConvValue }, "itu_it_uom_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ItuId).HasColumnName("itu_id");
            entity.Property(e => e.ItuActive).HasColumnName("itu_active");
            entity.Property(e => e.ItuConvValue)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itu_conv_value");
            entity.Property(e => e.ItuConvValueIni)
                .HasColumnType("decimal(12, 5)")
                .HasColumnName("itu_conv_value_ini");
            entity.Property(e => e.ItuItId).HasColumnName("itu_it_id");
            entity.Property(e => e.ItuOracleUom)
                .HasMaxLength(64)
                .HasColumnName("itu_oracle_uom");
            entity.Property(e => e.ItuShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("itu_shortname");
            entity.Property(e => e.ItuUomId).HasColumnName("itu_uom_id");

            entity.HasOne(d => d.ItuIt).WithMany(p => p.ItemUoms)
                .HasForeignKey(d => d.ItuItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITU_REF_IT");

            entity.HasOne(d => d.ItuUom).WithMany(p => p.ItemUoms)
                .HasForeignKey(d => d.ItuUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITU_REF_UOM");
        });

        modelBuilder.Entity<ItemUomAdditionalInfo>(entity =>
        {
            entity.HasKey(e => e.ItuaId).HasFillFactor(90);

            entity.ToTable("ITEM_UOM_ADDITIONAL_INFO", "cmn");

            entity.Property(e => e.ItuaId).HasColumnName("itua_id");
            entity.Property(e => e.ItuaArea)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_area");
            entity.Property(e => e.ItuaDepth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_depth");
            entity.Property(e => e.ItuaHeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_height");
            entity.Property(e => e.ItuaItuId).HasColumnName("itua_itu_id");
            entity.Property(e => e.ItuaVolume)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_volume");
            entity.Property(e => e.ItuaWeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_weight");
            entity.Property(e => e.ItuaWidth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itua_width");

            entity.HasOne(d => d.ItuaItu).WithMany(p => p.ItemUomAdditionalInfos)
                .HasForeignKey(d => d.ItuaItuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITUA_REF_ITU");
        });

        modelBuilder.Entity<ItemUomBarcode>(entity =>
        {
            entity.HasKey(e => e.IubId).HasFillFactor(90);

            entity.ToTable("ITEM_UOM_BARCODE", "cmn");

            entity.HasIndex(e => e.IubBarcode, "itb_it_uom_barcode_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.IubId).HasColumnName("iub_id");
            entity.Property(e => e.IubActive)
                .HasDefaultValue((short)1)
                .HasColumnName("iub_active");
            entity.Property(e => e.IubBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("iub_barcode");
            entity.Property(e => e.IubItuId).HasColumnName("iub_itu_id");

            entity.HasOne(d => d.IubItu).WithMany(p => p.ItemUomBarcodes)
                .HasForeignKey(d => d.IubItuId)
                .HasConstraintName("FK_IUB_REF_ITU");
        });

        modelBuilder.Entity<ItemWarehouse>(entity =>
        {
            entity.HasKey(e => e.ItwId).HasFillFactor(90);

            entity.ToTable("ITEM_WAREHOUSE", "sls", tb =>
                {
                    tb.HasTrigger("tr_item_warehouse_Delete");
                    tb.HasTrigger("tr_item_warehouse_Insert");
                    tb.HasTrigger("tr_item_warehouse_Update");
                });

            entity.HasIndex(e => e.ItwPlIdWhs, "IDX-ITW_PL_ID_WHS").HasFillFactor(90);

            entity.HasIndex(e => e.ItwItId, "IDX-itw_it_id").HasFillFactor(90);

            entity.HasIndex(e => new { e.ItwPlIdWhs, e.ItwItId, e.ItwUomId }, "itw_pl_it_uom_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ItwId).HasColumnName("itw_id");
            entity.Property(e => e.ItwCreatedBy).HasColumnName("itw_created_by");
            entity.Property(e => e.ItwCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("itw_creation_date");
            entity.Property(e => e.ItwItId).HasColumnName("itw_it_id");
            entity.Property(e => e.ItwPlIdWhs).HasColumnName("itw_pl_id_whs");
            entity.Property(e => e.ItwQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity");
            entity.Property(e => e.ItwQuantityDamage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity_damage");
            entity.Property(e => e.ItwQuantityPreviewed)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("itw_quantity_previewed");
            entity.Property(e => e.ItwQuantityReserved)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity_reserved");
            entity.Property(e => e.ItwRemarks)
                .HasMaxLength(512)
                .HasColumnName("itw_remarks");
            entity.Property(e => e.ItwUomId).HasColumnName("itw_uom_id");
            entity.Property(e => e.ItwUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("itw_update_date");
            entity.Property(e => e.ItwUpdatedBy).HasColumnName("itw_updated_by");

            entity.HasOne(d => d.ItwIt).WithMany(p => p.ItemWarehouses)
                .HasForeignKey(d => d.ItwItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITW_REF_IT");

            entity.HasOne(d => d.ItwPlIdWhsNavigation).WithMany(p => p.ItemWarehouses)
                .HasForeignKey(d => d.ItwPlIdWhs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITW_REF_PL_WHS");

            entity.HasOne(d => d.ItwUom).WithMany(p => p.ItemWarehouses)
                .HasForeignKey(d => d.ItwUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITW_REF_UOM");
        });

        modelBuilder.Entity<ItemWarehouseCalculated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("item_warehouse_calculated", "sls");

            entity.Property(e => e.Correct)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("CORRECT");
            entity.Property(e => e.In)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("IN");
            entity.Property(e => e.ItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.ItwQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity");
            entity.Property(e => e.Out)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("OUT");
            entity.Property(e => e.Sold)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("SOLD");
        });

        modelBuilder.Entity<ItemWarehouseDetail>(entity =>
        {
            entity.HasKey(e => e.ItwdId).HasFillFactor(90);

            entity.ToTable("ITEM_WAREHOUSE_DETAIL", "sls");

            entity.Property(e => e.ItwdId).HasColumnName("itwd_id");
            entity.Property(e => e.ItwdIldId).HasColumnName("itwd_ild_id");
            entity.Property(e => e.ItwdItwId).HasColumnName("itwd_itw_id");
            entity.Property(e => e.ItwdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itwd_quantity");

            entity.HasOne(d => d.ItwdItw).WithMany(p => p.ItemWarehouseDetails)
                .HasForeignKey(d => d.ItwdItwId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITWD_REF_ITW");
        });

        modelBuilder.Entity<ItemWarehouseHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEM_WAREHOUSE_History", "sls");

            entity.Property(e => e.HostName)
                .HasMaxLength(128)
                .HasColumnName("HOST_NAME");
            entity.Property(e => e.ItwAction)
                .HasMaxLength(255)
                .HasColumnName("itw_action");
            entity.Property(e => e.ItwCreatedBy).HasColumnName("itw_created_by");
            entity.Property(e => e.ItwCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("itw_creation_date");
            entity.Property(e => e.ItwDateofaction)
                .HasColumnType("datetime")
                .HasColumnName("itw_dateofaction");
            entity.Property(e => e.ItwItId).HasColumnName("itw_it_id");
            entity.Property(e => e.ItwPlIdWhs).HasColumnName("itw_pl_id_whs");
            entity.Property(e => e.ItwQuantity)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("itw_quantity");
            entity.Property(e => e.ItwQuantityDamage)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("itw_quantity_damage");
            entity.Property(e => e.ItwQuantityReserved)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("itw_quantity_reserved");
            entity.Property(e => e.ItwRemarks)
                .HasMaxLength(100)
                .HasColumnName("itw_remarks");
            entity.Property(e => e.ItwUomId).HasColumnName("itw_uom_id");
            entity.Property(e => e.ItwUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("itw_update_date");
            entity.Property(e => e.ItwUpdatedBy).HasColumnName("itw_updated_by");
            entity.Property(e => e.SuserName)
                .HasMaxLength(128)
                .HasColumnName("SUSER_NAME");
        });

        modelBuilder.Entity<ItemcategoryFamily>(entity =>
        {
            entity.HasKey(e => e.IcfId).HasFillFactor(90);

            entity.ToTable("ITEMCATEGORY_FAMILY", "cmn");

            entity.HasIndex(e => new { e.IcfCode, e.IcfBuId }, "icf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.IcfIcfId, "icf_icf_idx").HasFillFactor(90);

            entity.Property(e => e.IcfId).HasColumnName("icf_id");
            entity.Property(e => e.IcfBuId).HasColumnName("icf_bu_id");
            entity.Property(e => e.IcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icf_code");
            entity.Property(e => e.IcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan1");
            entity.Property(e => e.IcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan2");
            entity.Property(e => e.IcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan3");
            entity.Property(e => e.IcfIcfId).HasColumnName("icf_icf_id");
            entity.Property(e => e.IcfIsLov)
                .HasDefaultValue((short)1)
                .HasColumnName("icf_is_lov");
            entity.Property(e => e.IcfLevel).HasColumnName("icf_level");
            entity.Property(e => e.IcfRegex)
                .HasMaxLength(100)
                .HasColumnName("icf_regex");

            entity.HasOne(d => d.IcfBu).WithMany(p => p.ItemcategoryFamilies)
                .HasForeignKey(d => d.IcfBuId)
                .HasConstraintName("FK_ICF_REF_BU");

            entity.HasOne(d => d.IcfIcf).WithMany(p => p.InverseIcfIcf)
                .HasForeignKey(d => d.IcfIcfId)
                .HasConstraintName("FK_ICF_REF_ICF");
        });

        modelBuilder.Entity<ItemcategoryFamilyValue>(entity =>
        {
            entity.HasKey(e => e.IcfvId).HasFillFactor(90);

            entity.ToTable("ITEMCATEGORY_FAMILY_VALUE", "cmn");

            entity.HasIndex(e => new { e.IcfvIcfId, e.IcfvCode }, "icfv_icf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvOrder).HasColumnName("icfv_order");

            entity.HasOne(d => d.IcfvIcf).WithMany(p => p.ItemcategoryFamilyValues)
                .HasForeignKey(d => d.IcfvIcfId)
                .HasConstraintName("FK_ICFV_REF_ICF");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueBrand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_BRAND", "dex");

            entity.Property(e => e.IBrCode)
                .HasMaxLength(16)
                .HasColumnName("i_br_code");
            entity.Property(e => e.IBrDescription)
                .HasMaxLength(255)
                .HasColumnName("i_br_description");
            entity.Property(e => e.IBrDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("i_br_description_ar");
            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueBrandSsfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_BRAND_ssfamily", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.IPgCode)
                .HasMaxLength(98)
                .IsUnicode(false)
                .HasColumnName("i_pg_code");
            entity.Property(e => e.IPgDescription)
                .HasMaxLength(194)
                .HasColumnName("i_pg_description");
            entity.Property(e => e.IPgDescriptionAr)
                .HasMaxLength(194)
                .HasColumnName("i_pg_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueBrandSsfamilyOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_BRAND_ssfamily_old", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.IPgCode)
                .HasMaxLength(65)
                .IsUnicode(false)
                .HasColumnName("i_pg_code");
            entity.Property(e => e.IPgDescription)
                .HasMaxLength(129)
                .HasColumnName("i_pg_description");
            entity.Property(e => e.IPgDescriptionAr)
                .HasMaxLength(129)
                .HasColumnName("i_pg_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueCategoryBarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_category_barcode", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasMaxLength(512)
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasMaxLength(512)
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasMaxLength(512)
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueFamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_FAMILY", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.IPgCode)
                .HasMaxLength(16)
                .HasColumnName("i_pg_code");
            entity.Property(e => e.IPgDescription)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description");
            entity.Property(e => e.IPgDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueGrossWeightBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_gross_weight_box", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueGrossWeightPc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_gross_weight_pc", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueNetVolumeBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_net_volume_box", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueNetVolumePc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_net_volume_pc", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueNetWeightBox>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_net_weight_box", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueNetWeightPc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_net_weight_pc", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueProductionInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_production_info", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("i_icfv_code");
            entity.Property(e => e.IIcfvDescriptionLan1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("i_icfv_description_lan1");
            entity.Property(e => e.IIcfvDescriptionLan2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("i_icfv_description_lan2");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueSsfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_SSFAMILY", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.IPgCode)
                .HasMaxLength(16)
                .HasColumnName("i_pg_code");
            entity.Property(e => e.IPgDescription)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description");
            entity.Property(e => e.IPgDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueSstype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_SSTYPE", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.ITpCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("i_tp_code");
            entity.Property(e => e.ITpDescription)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description");
            entity.Property(e => e.ITpDescriptionAr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueSubfamily>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_SUBFAMILY", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.IPgCode)
                .HasMaxLength(16)
                .HasColumnName("i_pg_code");
            entity.Property(e => e.IPgDescription)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description");
            entity.Property(e => e.IPgDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("i_pg_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueSubtype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_SUBTYPE", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.ITpCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("i_tp_code");
            entity.Property(e => e.ITpDescription)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description");
            entity.Property(e => e.ITpDescriptionAr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description_ar");
        });

        modelBuilder.Entity<ItemcategoryFamilyValueType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_FAMILY_VALUE_TYPE", "dex");

            entity.Property(e => e.IIcfId).HasColumnName("i_icf_id");
            entity.Property(e => e.IIcfvId).HasColumnName("i_icfv_id");
            entity.Property(e => e.ITpCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("i_tp_code");
            entity.Property(e => e.ITpDescription)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description");
            entity.Property(e => e.ITpDescriptionAr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_tp_description_ar");
        });

        modelBuilder.Entity<ItemcategoryGroup>(entity =>
        {
            entity.HasKey(e => e.ItgcId).HasFillFactor(90);

            entity.ToTable("ITEMCATEGORY_GROUP", "cmn");

            entity.HasIndex(e => new { e.ItgcIcfId, e.ItgcCdIdItg }, "itgc_icf_itg_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.ItgcIcfId, e.ItgcOrder }, "itgc_icf_order_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ItgcId).HasColumnName("itgc_id");
            entity.Property(e => e.ItgcActive)
                .HasDefaultValue((short)1)
                .HasColumnName("itgc_active");
            entity.Property(e => e.ItgcCdIdItg).HasColumnName("itgc_cd_id_itg");
            entity.Property(e => e.ItgcIcfId).HasColumnName("itgc_icf_id");
            entity.Property(e => e.ItgcMandatory)
                .HasDefaultValue((short)1)
                .HasColumnName("itgc_mandatory");
            entity.Property(e => e.ItgcOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("itgc_order");

            entity.HasOne(d => d.ItgcCdIdItgNavigation).WithMany(p => p.ItemcategoryGroups)
                .HasForeignKey(d => d.ItgcCdIdItg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFC_REF_CD_ITG");

            entity.HasOne(d => d.ItgcIcf).WithMany(p => p.ItemcategoryGroups)
                .HasForeignKey(d => d.ItgcIcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFC_REF_ICF");
        });

        modelBuilder.Entity<ItemcategoryTypeTreeV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_TYPE_TREE_V", "cmn");

            entity.Property(e => e.BuHierarchy)
                .HasMaxLength(1002)
                .HasColumnName("bu_hierarchy");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.HasChild).HasColumnName("has_child");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Parent).HasColumnName("parent");
        });

        modelBuilder.Entity<ItemcategoryTypeV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_TYPE_V", "cmn");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.HasChild).HasColumnName("has_child");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Parent).HasColumnName("parent");
        });

        modelBuilder.Entity<ItemcategoryValueLink>(entity =>
        {
            entity.HasKey(e => e.IclId).HasFillFactor(90);

            entity.ToTable("ITEMCATEGORY_VALUE_LINK", "cmn");

            entity.Property(e => e.IclId).HasColumnName("icl_id");
            entity.Property(e => e.IclIcfvIdChild).HasColumnName("icl_icfv_id_child");
            entity.Property(e => e.IclIcfvIdParent).HasColumnName("icl_icfv_id_parent");

            entity.HasOne(d => d.IclIcfvIdChildNavigation).WithMany(p => p.ItemcategoryValueLinkIclIcfvIdChildNavigations)
                .HasForeignKey(d => d.IclIcfvIdChild)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICL_REF_ICFV_CHILD");

            entity.HasOne(d => d.IclIcfvIdParentNavigation).WithMany(p => p.ItemcategoryValueLinkIclIcfvIdParentNavigations)
                .HasForeignKey(d => d.IclIcfvIdParent)
                .HasConstraintName("FK_ICL_REF_ICFV_PARENT");
        });

        modelBuilder.Entity<ItemcategoryValueLinkV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITEMCATEGORY_VALUE_LINK_V", "cmn");

            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
            entity.Property(e => e.IclIcfvIdChild).HasColumnName("icl_icfv_id_child");
            entity.Property(e => e.IclIcfvIdParent).HasColumnName("icl_icfv_id_parent");
            entity.Property(e => e.IclId).HasColumnName("icl_id");
        });

        modelBuilder.Entity<Itemcontainer>(entity =>
        {
            entity.HasKey(e => e.IcId).HasFillFactor(90);

            entity.ToTable("ITEMCONTAINER", "sls");

            entity.Property(e => e.IcId).HasColumnName("ic_id");
            entity.Property(e => e.IcActive).HasColumnName("ic_active");
            entity.Property(e => e.IcCode)
                .HasMaxLength(10)
                .HasColumnName("ic_code");
            entity.Property(e => e.IcDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ic_description_lan1");
            entity.Property(e => e.IcDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ic_description_lan2");
            entity.Property(e => e.IcDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ic_description_lan3");
        });

        modelBuilder.Entity<ItemcontainerDetail>(entity =>
        {
            entity.HasKey(e => e.IcdId).HasFillFactor(90);

            entity.ToTable("ITEMCONTAINER_DETAIL", "sls");

            entity.Property(e => e.IcdId).HasColumnName("icd_id");
            entity.Property(e => e.IcdIcId).HasColumnName("icd_ic_id");
            entity.Property(e => e.IcdItId).HasColumnName("icd_it_id");
            entity.Property(e => e.IcdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("icd_quantity");
            entity.Property(e => e.IcdQuantityMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("icd_quantity_max");
            entity.Property(e => e.IcdQuantityMin)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("icd_quantity_min");
            entity.Property(e => e.IcdUomId).HasColumnName("icd_uom_id");

            entity.HasOne(d => d.IcdIc).WithMany(p => p.ItemcontainerDetails)
                .HasForeignKey(d => d.IcdIcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICD_REF_IC");

            entity.HasOne(d => d.IcdIt).WithMany(p => p.ItemcontainerDetails)
                .HasForeignKey(d => d.IcdItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITEMCONT_REFERENCE_ITEM");

            entity.HasOne(d => d.IcdUom).WithMany(p => p.ItemcontainerDetails)
                .HasForeignKey(d => d.IcdUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITEMCONT_REFERENCE_UOM");
        });

        modelBuilder.Entity<ItemcontainerThpCategoryValue>(entity =>
        {
            entity.HasKey(e => e.IctcvId)
                .HasName("PK_ITEMCONTAINER_THP_CATEGORY_")
                .HasFillFactor(90);

            entity.ToTable("ITEMCONTAINER_THP_CATEGORY_VALUE", "cmn");

            entity.Property(e => e.IctcvId).HasColumnName("ictcv_id");
            entity.Property(e => e.IctcvActive).HasColumnName("ictcv_active");
            entity.Property(e => e.IctcvFromDate)
                .HasColumnType("datetime")
                .HasColumnName("ictcv_from_date");
            entity.Property(e => e.IctcvIcId).HasColumnName("ictcv_ic_id");
            entity.Property(e => e.IctcvQuantity).HasColumnName("ictcv_quantity");
            entity.Property(e => e.IctcvThcfvId).HasColumnName("ictcv_thcfv_id");
            entity.Property(e => e.IctcvToDate)
                .HasColumnType("datetime")
                .HasColumnName("ictcv_to_date");

            entity.HasOne(d => d.IctcvIc).WithMany(p => p.ItemcontainerThpCategoryValues)
                .HasForeignKey(d => d.IctcvIcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICTCV_REF_IC");

            entity.HasOne(d => d.IctcvThcfv).WithMany(p => p.ItemcontainerThpCategoryValues)
                .HasForeignKey(d => d.IctcvThcfvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ICTCV_REF_THCFV");
        });

        modelBuilder.Entity<ItmThpTransactiontype>(entity =>
        {
            entity.HasKey(e => e.ItttId).HasFillFactor(90);

            entity.ToTable("ITM_THP_TRANSACTIONTYPE", "sls");

            entity.Property(e => e.ItttId).HasColumnName("ittt_id");
            entity.Property(e => e.ItttBuId).HasColumnName("ittt_bu_id");
            entity.Property(e => e.ItttItId).HasColumnName("ittt_it_id");
            entity.Property(e => e.ItttThpId).HasColumnName("ittt_thp_id");
            entity.Property(e => e.ItttThpsId).HasColumnName("ittt_thps_id");
            entity.Property(e => e.ItttTstId).HasColumnName("ittt_tst_id");

            entity.HasOne(d => d.ItttBu).WithMany(p => p.ItmThpTransactiontypes)
                .HasForeignKey(d => d.ItttBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITTT_REF_BU");

            entity.HasOne(d => d.ItttIt).WithMany(p => p.ItmThpTransactiontypes)
                .HasForeignKey(d => d.ItttItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittt_REF_IT");

            entity.HasOne(d => d.ItttThp).WithMany(p => p.ItmThpTransactiontypes)
                .HasForeignKey(d => d.ItttThpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittt_REF_THP");

            entity.HasOne(d => d.ItttThps).WithMany(p => p.ItmThpTransactiontypes)
                .HasForeignKey(d => d.ItttThpsId)
                .HasConstraintName("FK_ittt_REF_THPS");

            entity.HasOne(d => d.ItttTst).WithMany(p => p.ItmThpTransactiontypes)
                .HasForeignKey(d => d.ItttTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittt_REF_TST");
        });

        modelBuilder.Entity<ItmThpsUomTransactiontype>(entity =>
        {
            entity.HasKey(e => e.IttuId).HasFillFactor(90);

            entity.ToTable("ITM_THPS_UOM_TRANSACTIONTYPE", "sls");

            entity.Property(e => e.IttuId).HasColumnName("ittu_id");
            entity.Property(e => e.IttuBuId).HasColumnName("ittu_bu_id");
            entity.Property(e => e.IttuDateFrom)
                .HasColumnType("datetime")
                .HasColumnName("ittu_date_from");
            entity.Property(e => e.IttuDateTo)
                .HasColumnType("datetime")
                .HasColumnName("ittu_date_to");
            entity.Property(e => e.IttuIndex).HasColumnName("ittu_index");
            entity.Property(e => e.IttuItId).HasColumnName("ittu_it_id");
            entity.Property(e => e.IttuQlvId).HasColumnName("ittu_qlv_id");
            entity.Property(e => e.IttuTstId).HasColumnName("ittu_tst_id");
            entity.Property(e => e.IttuUomId).HasColumnName("ittu_uom_id");

            entity.HasOne(d => d.IttuBu).WithMany(p => p.ItmThpsUomTransactiontypes)
                .HasForeignKey(d => d.IttuBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ITTU_REF_BU");

            entity.HasOne(d => d.IttuIt).WithMany(p => p.ItmThpsUomTransactiontypes)
                .HasForeignKey(d => d.IttuItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittu_REF_IT");

            entity.HasOne(d => d.IttuTst).WithMany(p => p.ItmThpsUomTransactiontypes)
                .HasForeignKey(d => d.IttuTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittu_REF_TST");
        });

        modelBuilder.Entity<ItmThpsUomTransactiontypeException>(entity =>
        {
            entity.HasKey(e => e.IttueId).HasFillFactor(90);

            entity.ToTable("ITM_THPS_UOM_TRANSACTIONTYPE_Exception", "sls");

            entity.Property(e => e.IttueId).HasColumnName("ittue_id");
            entity.Property(e => e.IttueBuId).HasColumnName("ittue_bu_id");
            entity.Property(e => e.IttueDateFrom)
                .HasColumnType("datetime")
                .HasColumnName("ittue_date_from");
            entity.Property(e => e.IttueDateTo)
                .HasColumnType("datetime")
                .HasColumnName("ittue_date_to");
            entity.Property(e => e.IttueItId).HasColumnName("ittue_it_id");
            entity.Property(e => e.IttueThpsId).HasColumnName("ittue_thps_id");
            entity.Property(e => e.IttueTstId).HasColumnName("ittue_tst_id");
            entity.Property(e => e.IttueUomId).HasColumnName("ittue_uom_id");

            entity.HasOne(d => d.IttueIt).WithMany(p => p.ItmThpsUomTransactiontypeExceptions)
                .HasForeignKey(d => d.IttueItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittue_REF_IT");

            entity.HasOne(d => d.IttueTst).WithMany(p => p.ItmThpsUomTransactiontypeExceptions)
                .HasForeignKey(d => d.IttueTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ittue_REF_TST");
        });

        modelBuilder.Entity<ItmThpsUomTransactiontypeV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ITM_THPS_UOM_TRANSACTIONTYPE_V", "cmn");

            entity.Property(e => e.IttuBuId).HasColumnName("ittu_bu_id");
            entity.Property(e => e.IttuId).HasColumnName("ittu_id");
            entity.Property(e => e.IttuIndex).HasColumnName("ittu_index");
            entity.Property(e => e.IttuItId).HasColumnName("ittu_it_id");
            entity.Property(e => e.IttuTstId).HasColumnName("ittu_tst_id");
            entity.Property(e => e.IttuUomId).HasColumnName("ittu_uom_id");
            entity.Property(e => e.QlvRefId).HasColumnName("qlv_ref_id");
        });

        modelBuilder.Entity<JsonQueryLog>(entity =>
        {
            entity.HasKey(e => e.JqlId).HasFillFactor(90);

            entity.ToTable("JSON_QUERY_LOG", "dex");

            entity.Property(e => e.JqlId).HasColumnName("jql_id");
            entity.Property(e => e.JqlAnyId).HasColumnName("jql_any_id");
            entity.Property(e => e.JqlAttribut01)
                .HasMaxLength(4000)
                .HasColumnName("jql_attribut01");
            entity.Property(e => e.JqlAttribut02)
                .HasMaxLength(4000)
                .HasColumnName("jql_attribut02");
            entity.Property(e => e.JqlAttribut03)
                .HasMaxLength(4000)
                .HasColumnName("jql_attribut03");
            entity.Property(e => e.JqlAttribut04)
                .HasMaxLength(4000)
                .HasColumnName("jql_attribut04");
            entity.Property(e => e.JqlAttribut05)
                .HasMaxLength(4000)
                .HasColumnName("jql_attribut05");
            entity.Property(e => e.JqlCallingProcedure)
                .HasMaxLength(512)
                .HasColumnName("jql_calling_procedure");
            entity.Property(e => e.JqlDatetime)
                .HasColumnType("datetime")
                .HasColumnName("jql_datetime");
            entity.Property(e => e.JqlRequest).HasColumnName("jql_request");
            entity.Property(e => e.JqlResponse).HasColumnName("jql_response");
            entity.Property(e => e.JqlStatus)
                .HasMaxLength(32)
                .HasColumnName("jql_status");
            entity.Property(e => e.JqlStatusText)
                .HasMaxLength(4000)
                .HasColumnName("jql_status_text");
            entity.Property(e => e.JqlTransactionumber)
                .HasMaxLength(250)
                .HasColumnName("jql_transactionumber");
            entity.Property(e => e.JqlUri)
                .HasMaxLength(4000)
                .HasColumnName("jql_uri");
            entity.Property(e => e.JqlVersion)
                .HasMaxLength(250)
                .HasColumnName("jql_version");
        });

        modelBuilder.Entity<Listprice>(entity =>
        {
            entity.HasKey(e => e.LpId)
                .HasName("PK_PRICELIST")
                .HasFillFactor(90);

            entity.ToTable("LISTPRICE", "sls");

            entity.HasIndex(e => e.LpCode, "pl_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.LpId).HasColumnName("lp_id");
            entity.Property(e => e.LpActive).HasColumnName("lp_active");
            entity.Property(e => e.LpBuId).HasColumnName("lp_bu_id");
            entity.Property(e => e.LpCdIdCur).HasColumnName("lp_cd_id_cur");
            entity.Property(e => e.LpCode)
                .HasMaxLength(2000)
                .HasColumnName("lp_code");
            entity.Property(e => e.LpDescriptionLan1).HasColumnName("lp_description_lan1");
            entity.Property(e => e.LpDescriptionLan2).HasColumnName("lp_description_lan2");
            entity.Property(e => e.LpDescriptionLan3).HasColumnName("lp_description_lan3");
            entity.Property(e => e.LpFromDate).HasColumnName("lp_from_date");
            entity.Property(e => e.LpLevel).HasColumnName("lp_level");
            entity.Property(e => e.LpToDate).HasColumnName("lp_to_date");

            entity.HasOne(d => d.LpBu).WithMany(p => p.Listprices)
                .HasForeignKey(d => d.LpBuId)
                .HasConstraintName("FK_PL_REF_BU");

            entity.HasOne(d => d.LpCdIdCurNavigation).WithMany(p => p.Listprices)
                .HasForeignKey(d => d.LpCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PL_REF_CD_CUR");
        });

        modelBuilder.Entity<ListpriceItem>(entity =>
        {
            entity.HasKey(e => e.LpiId)
                .HasName("PK_PRICELIST_ITEM")
                .HasFillFactor(90);

            entity.ToTable("LISTPRICE_ITEM", "sls");

            entity.HasIndex(e => new { e.LpiLpId, e.LpiItId, e.LpiUomId }, "pli_pl_it_uom_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.LpiId).HasColumnName("lpi_id");
            entity.Property(e => e.LpiDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_discount");
            entity.Property(e => e.LpiItId).HasColumnName("lpi_it_id");
            entity.Property(e => e.LpiLpId).HasColumnName("lpi_lp_id");
            entity.Property(e => e.LpiMaxDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_max_discount");
            entity.Property(e => e.LpiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_price");
            entity.Property(e => e.LpiUomId).HasColumnName("lpi_uom_id");

            entity.HasOne(d => d.LpiIt).WithMany(p => p.ListpriceItems)
                .HasForeignKey(d => d.LpiItId)
                .HasConstraintName("FK_PLI_REF_IT");

            entity.HasOne(d => d.LpiLp).WithMany(p => p.ListpriceItems)
                .HasForeignKey(d => d.LpiLpId)
                .HasConstraintName("FK_PLI_REF_PL");

            entity.HasOne(d => d.LpiUom).WithMany(p => p.ListpriceItems)
                .HasForeignKey(d => d.LpiUomId)
                .HasConstraintName("FK_PLI_REF_UOM");
        });

        modelBuilder.Entity<ListpriceItemException>(entity =>
        {
            entity.HasKey(e => e.LpixId).HasFillFactor(90);

            entity.ToTable("LISTPRICE_ITEM_EXCEPTION", "sls");

            entity.Property(e => e.LpixId).HasColumnName("lpix_id");
            entity.Property(e => e.LpixDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpix_discount");
            entity.Property(e => e.LpixEndDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("lpix_end_date");
            entity.Property(e => e.LpixLpiId).HasColumnName("lpix_lpi_id");
            entity.Property(e => e.LpixMaxDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpix_max_discount");
            entity.Property(e => e.LpixPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpix_price");
            entity.Property(e => e.LpixStartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("lpix_start_date");

            entity.HasOne(d => d.LpixLpi).WithMany(p => p.ListpriceItemExceptions)
                .HasForeignKey(d => d.LpixLpiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LPIX_REF_LPI");
        });

        modelBuilder.Entity<ListpriceThirdpartyGroup>(entity =>
        {
            entity.HasKey(e => e.PltgId)
                .HasName("PK_PRICELIST_CUSTOMER_GROUP")
                .HasFillFactor(90);

            entity.ToTable("LISTPRICE_THIRDPARTY_GROUP", "sls");

            entity.Property(e => e.PltgId).HasColumnName("pltg_id");
            entity.Property(e => e.PltgCdIdTpg).HasColumnName("pltg_cd_id_tpg");
            entity.Property(e => e.PltgThpId).HasColumnName("pltg_thp_id");
        });

        modelBuilder.Entity<ListpriceThirdpartySite>(entity =>
        {
            entity.HasKey(e => e.LptId)
                .HasName("PK_PRICELIST_THIRDPARTYSITE")
                .HasFillFactor(90);

            entity.ToTable("LISTPRICE_THIRDPARTY_SITE", "sls");

            entity.HasIndex(e => e.LptThpsId, "IDX_lph_thps_id").HasFillFactor(90);

            entity.HasIndex(e => e.LptLpId, "IDX_lpt_pl_id").HasFillFactor(90);

            entity.Property(e => e.LptId).HasColumnName("lpt_id");
            entity.Property(e => e.LptLpId).HasColumnName("lpt_lp_id");
            entity.Property(e => e.LptThpsId).HasColumnName("lpt_thps_id");
        });

        modelBuilder.Entity<ListpriceUser>(entity =>
        {
            entity.HasKey(e => e.LpuId)
                .HasName("PK_PRICELIST_USER")
                .HasFillFactor(90);

            entity.ToTable("LISTPRICE_USER", "sls");

            entity.Property(e => e.LpuId).HasColumnName("lpu_id");
            entity.Property(e => e.LpuLpId).HasColumnName("lpu_lp_id");
            entity.Property(e => e.LpuUsId).HasColumnName("lpu_us_id");
        });

        modelBuilder.Entity<LoadRequest190af438eba847d3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoadRequest190af438eba847d3", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<LoadRequestDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SLrdId, e.SLrdSmId, e.SLrdVersion }).HasFillFactor(90);

            entity.ToTable("LOAD_REQUEST_DETAILS_SNC", "syn");

            entity.Property(e => e.SLrdId).HasColumnName("s_lrd_id");
            entity.Property(e => e.SLrdSmId).HasColumnName("s_lrd_sm_id");
            entity.Property(e => e.SLrdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_lrd_version");
            entity.Property(e => e.SLrdIsCreated).HasColumnName("s_lrd_is_created");
            entity.Property(e => e.SLrdLrId).HasColumnName("s_lrd_lr_id");
            entity.Property(e => e.SLrdLrUid)
                .HasMaxLength(128)
                .HasColumnName("s_lrd_lr_uid");
            entity.Property(e => e.SLrdPackQtyLod).HasColumnName("s_lrd_pack_qty_lod");
            entity.Property(e => e.SLrdPackQtyRqt).HasColumnName("s_lrd_pack_qty_rqt");
            entity.Property(e => e.SLrdPackQtyVld).HasColumnName("s_lrd_pack_qty_vld");
            entity.Property(e => e.SLrdPrId).HasColumnName("s_lrd_pr_id");
            entity.Property(e => e.SLrdSynched).HasColumnName("s_lrd_synched");
            entity.Property(e => e.SLrdUnitPerPack)
                .HasColumnType("numeric(8, 2)")
                .HasColumnName("s_lrd_unit_per_pack");
            entity.Property(e => e.SLrdUnitQtyLod)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_lrd_unit_qty_lod");
            entity.Property(e => e.SLrdUnitQtyRqt)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_lrd_unit_qty_rqt");
            entity.Property(e => e.SLrdUnitQtyVld)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_lrd_unit_qty_vld");
        });

        modelBuilder.Entity<LoadRequestSnc>(entity =>
        {
            entity.HasKey(e => new { e.SLrId, e.SLrVersion, e.SLrSmId }).HasFillFactor(90);

            entity.ToTable("LOAD_REQUEST_SNC", "syn");

            entity.Property(e => e.SLrId).HasColumnName("s_lr_id");
            entity.Property(e => e.SLrVersion)
                .HasMaxLength(25)
                .HasColumnName("s_lr_version");
            entity.Property(e => e.SLrSmId).HasColumnName("s_lr_sm_id");
            entity.Property(e => e.SLrCode)
                .HasMaxLength(32)
                .HasColumnName("s_lr_code");
            entity.Property(e => e.SLrComment)
                .HasMaxLength(100)
                .HasColumnName("s_lr_comment");
            entity.Property(e => e.SLrDate)
                .HasMaxLength(32)
                .HasColumnName("s_lr_date");
            entity.Property(e => e.SLrIsCreated).HasColumnName("s_lr_is_created");
            entity.Property(e => e.SLrMovementDate)
                .HasColumnType("datetime")
                .HasColumnName("s_lr_movement_date");
            entity.Property(e => e.SLrSignFilename)
                .HasMaxLength(100)
                .HasColumnName("s_lr_sign_filename");
            entity.Property(e => e.SLrStatus).HasColumnName("s_lr_status");
            entity.Property(e => e.SLrSynched).HasColumnName("s_lr_synched");
            entity.Property(e => e.SLrUid)
                .HasMaxLength(128)
                .HasColumnName("s_lr_uid");
        });

        modelBuilder.Entity<MapMarkersType>(entity =>
        {
            entity.HasKey(e => e.MktId).HasFillFactor(90);

            entity.ToTable("MAP_MARKERS_TYPE", "rwt");

            entity.HasIndex(e => e.MktCode, "mkt_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MktId).HasColumnName("mkt_id");
            entity.Property(e => e.MktCode)
                .HasMaxLength(32)
                .HasColumnName("mkt_code");
            entity.Property(e => e.MktColumnName)
                .HasMaxLength(64)
                .HasColumnName("mkt_column_name");
            entity.Property(e => e.MktDescriptionLan1)
                .HasMaxLength(128)
                .HasColumnName("mkt_description_lan1");
            entity.Property(e => e.MktDescriptionLan2)
                .HasMaxLength(128)
                .HasColumnName("mkt_description_lan2");
            entity.Property(e => e.MktDescriptionLan3)
                .HasMaxLength(128)
                .HasColumnName("mkt_description_lan3");
            entity.Property(e => e.MktIcon)
                .HasMaxLength(128)
                .HasColumnName("mkt_icon");
            entity.Property(e => e.MktRoot)
                .HasDefaultValue(1000000)
                .HasColumnName("mkt_root");
            entity.Property(e => e.MktSourceTable)
                .HasMaxLength(64)
                .HasColumnName("mkt_source_table");
        });

        modelBuilder.Entity<MarketAlert>(entity =>
        {
            entity.HasKey(e => e.MaId).HasFillFactor(90);

            entity.ToTable("MARKET_ALERT", "cmn");

            entity.Property(e => e.MaId).HasColumnName("ma_id");
            entity.Property(e => e.MaOrgId).HasColumnName("ma_org_id");
            entity.Property(e => e.MaRemarks)
                .HasMaxLength(128)
                .HasColumnName("ma_remarks");
            entity.Property(e => e.MaSmId).HasColumnName("ma_sm_id");
            entity.Property(e => e.MaText1)
                .HasMaxLength(32)
                .HasColumnName("ma_text1");
            entity.Property(e => e.MaText2)
                .HasMaxLength(32)
                .HasColumnName("ma_text2");
            entity.Property(e => e.MaText3)
                .HasMaxLength(32)
                .HasColumnName("ma_text3");
            entity.Property(e => e.MaUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ma_uid");
            entity.Property(e => e.MaVtId).HasColumnName("ma_vt_id");
        });

        modelBuilder.Entity<MarketAlertDetail>(entity =>
        {
            entity.HasKey(e => e.MadId).HasFillFactor(90);

            entity.ToTable("MARKET_ALERT_DETAILS", "cmn");

            entity.Property(e => e.MadId).HasColumnName("mad_id");
            entity.Property(e => e.MadCdIdAlt).HasColumnName("mad_cd_id_alt");
            entity.Property(e => e.MadCdIdComp).HasColumnName("mad_cd_id_comp");
            entity.Property(e => e.MadComments)
                .HasMaxLength(512)
                .HasColumnName("mad_comments");
            entity.Property(e => e.MadMaId).HasColumnName("mad_ma_id");
            entity.Property(e => e.MadOrgId).HasColumnName("mad_org_id");
            entity.Property(e => e.MadPicture)
                .HasMaxLength(32)
                .HasColumnName("mad_picture");
            entity.Property(e => e.MadUid)
                .HasMaxLength(128)
                .HasColumnName("mad_uid");
        });

        modelBuilder.Entity<MarketAlertDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SMadId, e.SMadSmId, e.SMadVersion }).HasFillFactor(90);

            entity.ToTable("MARKET_ALERT_DETAILS_SNC", "syn");

            entity.Property(e => e.SMadId).HasColumnName("s_mad_id");
            entity.Property(e => e.SMadSmId).HasColumnName("s_mad_sm_id");
            entity.Property(e => e.SMadVersion)
                .HasMaxLength(32)
                .HasColumnName("s_mad_version");
            entity.Property(e => e.SMadCdIdAlt).HasColumnName("s_mad_cd_id_alt");
            entity.Property(e => e.SMadCdIdComp).HasColumnName("s_mad_cd_id_comp");
            entity.Property(e => e.SMadComments)
                .HasMaxLength(512)
                .HasColumnName("s_mad_comments");
            entity.Property(e => e.SMadMaId).HasColumnName("s_mad_ma_id");
            entity.Property(e => e.SMadMaUid)
                .HasMaxLength(128)
                .HasColumnName("s_mad_ma_uid");
            entity.Property(e => e.SMadPicture)
                .HasMaxLength(32)
                .HasColumnName("s_mad_picture");
            entity.Property(e => e.SMadSynched)
                .HasMaxLength(10)
                .HasColumnName("s_mad_synched");
            entity.Property(e => e.SMadUid)
                .HasMaxLength(128)
                .HasColumnName("s_mad_uid");
        });

        modelBuilder.Entity<MarketAlertSnc>(entity =>
        {
            entity.HasKey(e => new { e.SMaId, e.SMaVersion, e.SMaSmId }).HasFillFactor(90);

            entity.ToTable("MARKET_ALERT_SNC", "syn");

            entity.Property(e => e.SMaId).HasColumnName("s_ma_id");
            entity.Property(e => e.SMaVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ma_version");
            entity.Property(e => e.SMaSmId).HasColumnName("s_ma_sm_id");
            entity.Property(e => e.SMaRemarks)
                .HasMaxLength(128)
                .HasColumnName("s_ma_remarks");
            entity.Property(e => e.SMaSynched)
                .HasMaxLength(10)
                .HasColumnName("s_ma_synched");
            entity.Property(e => e.SMaText1)
                .HasMaxLength(32)
                .HasColumnName("s_ma_text1");
            entity.Property(e => e.SMaText2)
                .HasMaxLength(32)
                .HasColumnName("s_ma_text2");
            entity.Property(e => e.SMaText3)
                .HasMaxLength(32)
                .HasColumnName("s_ma_text3");
            entity.Property(e => e.SMaUid)
                .HasMaxLength(128)
                .HasColumnName("s_ma_uid");
            entity.Property(e => e.SMaVtId).HasColumnName("s_ma_vt_id");
            entity.Property(e => e.SMaVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_ma_vt_uid");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.HasKey(e => e.MnId).HasFillFactor(90);

            entity.ToTable("MENU", "cmn");

            entity.HasIndex(e => e.MnOrder, "mi_order_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MnId).HasColumnName("mn_id");
            entity.Property(e => e.MnActive)
                .HasDefaultValue((short)1)
                .HasColumnName("mn_active");
            entity.Property(e => e.MnCdIdMnu).HasColumnName("mn_cd_id_mnu");
            entity.Property(e => e.MnCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mn_code");
            entity.Property(e => e.MnCommand)
                .HasMaxLength(255)
                .HasColumnName("mn_command");
            entity.Property(e => e.MnDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("mn_description_lan1");
            entity.Property(e => e.MnDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("mn_description_lan2");
            entity.Property(e => e.MnDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("mn_description_lan3");
            entity.Property(e => e.MnIcon)
                .HasMaxLength(255)
                .HasColumnName("mn_icon");
            entity.Property(e => e.MnIsAction)
                .HasDefaultValue((short)-1)
                .HasColumnName("mn_is_action");
            entity.Property(e => e.MnIsFunctionality).HasColumnName("mn_is_functionality");
            entity.Property(e => e.MnIsSystem).HasColumnName("mn_is_system");
            entity.Property(e => e.MnLevel).HasColumnName("mn_level");
            entity.Property(e => e.MnMnId).HasColumnName("mn_mn_id");
            entity.Property(e => e.MnOrder).HasColumnName("mn_order");

            entity.HasOne(d => d.MnMn).WithMany(p => p.InverseMnMn)
                .HasForeignKey(d => d.MnMnId)
                .HasConstraintName("FK_MN_REF_MN");
        });

        modelBuilder.Entity<MenuActionLog>(entity =>
        {
            entity.HasKey(e => e.MalId).HasFillFactor(90);

            entity.ToTable("MENU_ACTION_LOG", "cmn");

            entity.Property(e => e.MalId).HasColumnName("mal_id");
            entity.Property(e => e.MalActionCode)
                .HasMaxLength(128)
                .HasColumnName("mal_action_code");
            entity.Property(e => e.MalEndDate)
                .HasColumnType("datetime")
                .HasColumnName("mal_end_date");
            entity.Property(e => e.MalStartDate)
                .HasColumnType("datetime")
                .HasColumnName("mal_start_date");
            entity.Property(e => e.MalUsId).HasColumnName("mal_us_id");
            entity.Property(e => e.MalVtId).HasColumnName("mal_vt_id");
        });

        modelBuilder.Entity<MenuActionLogV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MENU_ACTION_LOG_V", "cmn");

            entity.Property(e => e.MalEndTime)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("mal_end_time");
            entity.Property(e => e.MalStartTime)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("mal_start_time");
            entity.Property(e => e.MalTimeSpent).HasColumnName("mal_time_spent");
            entity.Property(e => e.SalesmanCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("salesman_code");
            entity.Property(e => e.SalesmanName)
                .HasMaxLength(25)
                .HasColumnName("salesman_name");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.TimeIn)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("time_in");
            entity.Property(e => e.TimeOut)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("time_out");
            entity.Property(e => e.TstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan1");
            entity.Property(e => e.TstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan2");
            entity.Property(e => e.TstDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan3");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.VtDate).HasColumnName("vt_date");
            entity.Property(e => e.VtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtTimeSpent).HasColumnName("vt_time_spent");
        });

        modelBuilder.Entity<MenuDetail>(entity =>
        {
            entity.HasKey(e => e.MndId).HasFillFactor(90);

            entity.ToTable("MENU_DETAIL", "cmn");

            entity.HasIndex(e => e.MndMnId, "mnd_mn_idx").HasFillFactor(90);

            entity.Property(e => e.MndId).HasColumnName("mnd_id");
            entity.Property(e => e.MndCdIdAct).HasColumnName("mnd_cd_id_act");
            entity.Property(e => e.MndInpage).HasColumnName("mnd_inpage");
            entity.Property(e => e.MndInsearch).HasColumnName("mnd_insearch");
            entity.Property(e => e.MndMnId).HasColumnName("mnd_mn_id");
        });

        modelBuilder.Entity<MenuFavorite>(entity =>
        {
            entity.HasKey(e => e.MnfId).HasFillFactor(90);

            entity.ToTable("MENU_FAVORITE", "cmn");

            entity.Property(e => e.MnfId).HasColumnName("mnf_id");
            entity.Property(e => e.MnfMnId).HasColumnName("mnf_mn_id");
            entity.Property(e => e.MnfOrder).HasColumnName("mnf_order");
        });

        modelBuilder.Entity<MenuPage>(entity =>
        {
            entity.HasKey(e => e.MnpId).HasFillFactor(90);

            entity.ToTable("MENU_PAGE", "cmn");

            entity.Property(e => e.MnpId).HasColumnName("mnp_id");
            entity.Property(e => e.MnpMaximized).HasColumnName("mnp_maximized");
            entity.Property(e => e.MnpMnId).HasColumnName("mnp_mn_id");
            entity.Property(e => e.MnpPagePath)
                .HasMaxLength(200)
                .HasColumnName("mnp_page_path");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MsgId).HasFillFactor(90);

            entity.ToTable("MESSAGE", "cmn");

            entity.HasIndex(e => e.MsgCode, "idx_msg_code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MsgId).HasColumnName("msg_id");
            entity.Property(e => e.MsgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("msg_code");
            entity.Property(e => e.MsgDescriptionLan1)
                .HasMaxLength(200)
                .HasColumnName("msg_description_lan1");
            entity.Property(e => e.MsgDescriptionLan2)
                .HasMaxLength(200)
                .HasColumnName("msg_description_lan2");
            entity.Property(e => e.MsgDescriptionLan3)
                .HasMaxLength(200)
                .HasColumnName("msg_description_lan3");
        });

        modelBuilder.Entity<MobileChart>(entity =>
        {
            entity.HasKey(e => e.McId)
                .HasName("PK_MOBILE_CHARTS")
                .HasFillFactor(90);

            entity.ToTable("MOBILE_CHART", "cmn");

            entity.Property(e => e.McId).HasColumnName("mc_id");
            entity.Property(e => e.McBarColors)
                .HasMaxLength(500)
                .HasColumnName("mc_bar_colors");
            entity.Property(e => e.McChartClass)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_class");
            entity.Property(e => e.McChartCode)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_code");
            entity.Property(e => e.McChartType)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_type");
            entity.Property(e => e.McDescFontSize).HasColumnName("mc_desc_font_size");
            entity.Property(e => e.McDescTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_desc_text_color");
            entity.Property(e => e.McHeight).HasColumnName("mc_height");
            entity.Property(e => e.McLineCode)
                .HasMaxLength(32)
                .HasColumnName("mc_line_code");
            entity.Property(e => e.McLineDescription)
                .HasMaxLength(4000)
                .HasColumnName("mc_line_description");
            entity.Property(e => e.McOrder).HasColumnName("mc_order");
            entity.Property(e => e.McQuery).HasColumnName("mc_query");
            entity.Property(e => e.McUsId).HasColumnName("mc_us_id");
            entity.Property(e => e.McValueFontSize).HasColumnName("mc_value_font_size");
            entity.Property(e => e.McValueTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_value_text_color");
            entity.Property(e => e.McValueTextStyle)
                .HasMaxLength(32)
                .HasColumnName("mc_value_text_style");
            entity.Property(e => e.McWidth).HasColumnName("mc_width");
            entity.Property(e => e.McXFontSize).HasColumnName("mc_x_font_size");
            entity.Property(e => e.McXLabelWidth).HasColumnName("mc_x_label_width");
            entity.Property(e => e.McXTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_x_text_color");
            entity.Property(e => e.McYFontSize).HasColumnName("mc_y_font_size");
            entity.Property(e => e.McYLabelCount).HasColumnName("mc_y_label_count");
            entity.Property(e => e.McYLabelWidth).HasColumnName("mc_y_label_width");
            entity.Property(e => e.McYTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_y_text_color");
        });

        modelBuilder.Entity<MobileChart1>(entity =>
        {
            entity.HasKey(e => e.McId)
                .HasName("PK_MOBILE_CHARTS")
                .HasFillFactor(90);

            entity.ToTable("MOBILE_CHART");

            entity.Property(e => e.McId).HasColumnName("mc_id");
            entity.Property(e => e.McBarColors)
                .HasMaxLength(500)
                .HasColumnName("mc_bar_colors");
            entity.Property(e => e.McChartClass)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_class");
            entity.Property(e => e.McChartCode)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_code");
            entity.Property(e => e.McChartType)
                .HasMaxLength(32)
                .HasColumnName("mc_chart_type");
            entity.Property(e => e.McDescFontSize).HasColumnName("mc_desc_font_size");
            entity.Property(e => e.McDescTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_desc_text_color");
            entity.Property(e => e.McHeight).HasColumnName("mc_height");
            entity.Property(e => e.McLineCode)
                .HasMaxLength(32)
                .HasColumnName("mc_line_code");
            entity.Property(e => e.McLineDescription)
                .HasMaxLength(4000)
                .HasColumnName("mc_line_description");
            entity.Property(e => e.McOrder).HasColumnName("mc_order");
            entity.Property(e => e.McQuery).HasColumnName("mc_query");
            entity.Property(e => e.McUsId).HasColumnName("mc_us_id");
            entity.Property(e => e.McValueFontSize).HasColumnName("mc_value_font_size");
            entity.Property(e => e.McValueTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_value_text_color");
            entity.Property(e => e.McValueTextStyle)
                .HasMaxLength(32)
                .HasColumnName("mc_value_text_style");
            entity.Property(e => e.McWidth).HasColumnName("mc_width");
            entity.Property(e => e.McXFontSize).HasColumnName("mc_x_font_size");
            entity.Property(e => e.McXLabelWidth).HasColumnName("mc_x_label_width");
            entity.Property(e => e.McXTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_x_text_color");
            entity.Property(e => e.McYFontSize).HasColumnName("mc_y_font_size");
            entity.Property(e => e.McYLabelCount).HasColumnName("mc_y_label_count");
            entity.Property(e => e.McYLabelWidth).HasColumnName("mc_y_label_width");
            entity.Property(e => e.McYTextColor)
                .HasMaxLength(32)
                .HasColumnName("mc_y_text_color");
        });

        modelBuilder.Entity<MobileGrid>(entity =>
        {
            entity.HasKey(e => e.MgId).HasFillFactor(90);

            entity.ToTable("MOBILE_GRID", "cmn");

            entity.Property(e => e.MgId).HasColumnName("mg_id");
            entity.Property(e => e.MgBackground)
                .HasMaxLength(64)
                .HasColumnName("mg_background");
            entity.Property(e => e.MgBackgroundTint)
                .HasMaxLength(16)
                .HasColumnName("mg_background_tint");
            entity.Property(e => e.MgCheckboxField)
                .HasMaxLength(32)
                .HasDefaultValue("")
                .HasColumnName("mg_checkbox_field");
            entity.Property(e => e.MgColId)
                .HasDefaultValue(0)
                .HasColumnName("mg_col_id");
            entity.Property(e => e.MgField)
                .HasMaxLength(32)
                .HasColumnName("mg_field");
            entity.Property(e => e.MgFontSize).HasColumnName("mg_font_size");
            entity.Property(e => e.MgGridCode)
                .HasMaxLength(32)
                .HasColumnName("mg_grid_code");
            entity.Property(e => e.MgHeader)
                .HasMaxLength(32)
                .HasColumnName("mg_header");
            entity.Property(e => e.MgHeight)
                .HasDefaultValue(0)
                .HasColumnName("mg_height");
            entity.Property(e => e.MgInputType)
                .HasMaxLength(10)
                .HasDefaultValue("text")
                .HasColumnName("mg_input_type");
            entity.Property(e => e.MgLabelMargin).HasColumnName("mg_label_margin");
            entity.Property(e => e.MgMaxLength)
                .HasDefaultValue(10)
                .HasColumnName("mg_max_length");
            entity.Property(e => e.MgOrder)
                .HasDefaultValue(1)
                .HasColumnName("mg_order");
            entity.Property(e => e.MgSelectAllOnFocus)
                .HasDefaultValue(1)
                .HasColumnName("mg_select_all_on_focus");
            entity.Property(e => e.MgTextColor)
                .HasMaxLength(32)
                .HasDefaultValue("")
                .HasColumnName("mg_text_color");
            entity.Property(e => e.MgTextStyle)
                .HasMaxLength(32)
                .HasColumnName("mg_text_style");
            entity.Property(e => e.MgUgmId).HasColumnName("mg_ugm_id");
            entity.Property(e => e.MgUsId).HasColumnName("mg_us_id");
            entity.Property(e => e.MgViewType)
                .HasMaxLength(32)
                .HasDefaultValue("textview")
                .HasColumnName("mg_view_type");
            entity.Property(e => e.MgWidth)
                .HasDefaultValue(140)
                .HasColumnName("mg_width");
            entity.Property(e => e.MgWithlabel)
                .HasDefaultValue(1)
                .HasColumnName("mg_withlabel");
        });

        modelBuilder.Entity<MobileJob>(entity =>
        {
            entity.HasKey(e => e.MjId).HasFillFactor(90);

            entity.ToTable("MOBILE_JOB", "utl");

            entity.Property(e => e.MjId).HasColumnName("mj_id");
            entity.Property(e => e.MjActionCode)
                .HasMaxLength(32)
                .HasColumnName("mj_action_code");
            entity.Property(e => e.MjActive).HasColumnName("mj_active");
            entity.Property(e => e.MjDirectoryPath)
                .HasMaxLength(255)
                .HasColumnName("mj_directory_path");
            entity.Property(e => e.MjExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("mj_expiry_date");
            entity.Property(e => e.MjFileName)
                .HasMaxLength(64)
                .HasColumnName("mj_file_name");
            entity.Property(e => e.MjScript)
                .HasMaxLength(4000)
                .HasColumnName("mj_script");
            entity.Property(e => e.MjStartDate)
                .HasColumnType("datetime")
                .HasColumnName("mj_start_date");
            entity.Property(e => e.MjUsId).HasColumnName("mj_us_id");
        });

        modelBuilder.Entity<MobileLog>(entity =>
        {
            entity.HasKey(e => e.MlId).HasFillFactor(90);

            entity.ToTable("MOBILE_LOG", "syn");

            entity.Property(e => e.MlId).HasColumnName("ml_id");
            entity.Property(e => e.MlDate)
                .HasColumnType("datetime")
                .HasColumnName("ml_date");
            entity.Property(e => e.MlDescription)
                .IsUnicode(false)
                .HasColumnName("ml_description");
            entity.Property(e => e.MlDevice)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("ml_device");
            entity.Property(e => e.MlServerDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ml_server_date");
            entity.Property(e => e.MlSmId).HasColumnName("ml_sm_id");
            entity.Property(e => e.MlTag)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ml_tag");
            entity.Property(e => e.MlType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ml_type");
        });

        modelBuilder.Entity<MobileMenu>(entity =>
        {
            entity.HasKey(e => e.MmId)
                .HasName("MOBILE_MENU")
                .HasFillFactor(90);

            entity.ToTable("MOBILE_MENUS", "cmn");

            entity.Property(e => e.MmId).HasColumnName("mm_id");
            entity.Property(e => e.MmActionCode)
                .HasMaxLength(64)
                .HasColumnName("mm_action_code");
            entity.Property(e => e.MmActive).HasColumnName("mm_active");
            entity.Property(e => e.MmBackgroundStyle)
                .HasMaxLength(100)
                .HasColumnName("mm_background_style");
            entity.Property(e => e.MmClass)
                .HasMaxLength(255)
                .HasColumnName("mm_class");
            entity.Property(e => e.MmCommand)
                .HasMaxLength(255)
                .HasColumnName("mm_command");
            entity.Property(e => e.MmDescription)
                .HasMaxLength(255)
                .HasColumnName("mm_description");
            entity.Property(e => e.MmDetailsLan1)
                .HasMaxLength(255)
                .HasColumnName("mm_details_lan1");
            entity.Property(e => e.MmDetailsLan2)
                .HasMaxLength(255)
                .HasColumnName("mm_details_lan2");
            entity.Property(e => e.MmDetailsLan3)
                .HasMaxLength(255)
                .HasColumnName("mm_details_lan3");
            entity.Property(e => e.MmGridCode)
                .HasMaxLength(32)
                .HasColumnName("mm_grid_code");
            entity.Property(e => e.MmGroup)
                .HasMaxLength(64)
                .HasColumnName("mm_group");
            entity.Property(e => e.MmHeight)
                .HasDefaultValue(0)
                .HasColumnName("mm_height");
            entity.Property(e => e.MmIcon)
                .HasMaxLength(255)
                .HasColumnName("mm_icon");
            entity.Property(e => e.MmIconAlign)
                .HasMaxLength(16)
                .HasColumnName("mm_icon_align");
            entity.Property(e => e.MmIsAction).HasColumnName("mm_is_action");
            entity.Property(e => e.MmLevel)
                .HasDefaultValue((short)1)
                .HasColumnName("mm_level");
            entity.Property(e => e.MmMmId).HasColumnName("mm_mm_id");
            entity.Property(e => e.MmOrder).HasColumnName("mm_order");
            entity.Property(e => e.MmParameters)
                .HasMaxLength(1000)
                .HasColumnName("mm_parameters");
            entity.Property(e => e.MmSelecteyeCode)
                .HasMaxLength(50)
                .HasColumnName("mm_selecteye_code");
            entity.Property(e => e.MmSession)
                .HasMaxLength(1000)
                .HasColumnName("mm_session");
            entity.Property(e => e.MmTextSize)
                .HasDefaultValue(10)
                .HasColumnName("mm_text_size");
            entity.Property(e => e.MmTextStyle)
                .HasMaxLength(20)
                .HasColumnName("mm_text_style");
            entity.Property(e => e.MmTitleLan1)
                .HasMaxLength(255)
                .HasColumnName("mm_title_lan1");
            entity.Property(e => e.MmTitleLan2)
                .HasMaxLength(255)
                .HasColumnName("mm_title_lan2");
            entity.Property(e => e.MmTitleLan3)
                .HasMaxLength(255)
                .HasColumnName("mm_title_lan3");
            entity.Property(e => e.MmUsrId).HasColumnName("mm_usr_id");
            entity.Property(e => e.MmWidth)
                .HasDefaultValue(0)
                .HasColumnName("mm_width");
        });

        modelBuilder.Entity<MobileProfile>(entity =>
        {
            entity.HasKey(e => e.MprId).HasFillFactor(90);

            entity.ToTable("MOBILE_PROFILE", "cmn");

            entity.Property(e => e.MprId).HasColumnName("mpr_id");
            entity.Property(e => e.MprActive).HasColumnName("mpr_active");
            entity.Property(e => e.MprCode)
                .HasMaxLength(32)
                .HasColumnName("mpr_code");
            entity.Property(e => e.MprCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("mpr_creation_date");
            entity.Property(e => e.MprDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("mpr_description_lan1");
            entity.Property(e => e.MprDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("mpr_description_lan2");
            entity.Property(e => e.MprDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("mpr_description_lan3");
            entity.Property(e => e.MprUsIdCr).HasColumnName("mpr_us_id_cr");
        });

        modelBuilder.Entity<MobileStoredProcedure>(entity =>
        {
            entity.HasKey(e => e.MspId).HasFillFactor(90);

            entity.ToTable("MOBILE_STORED_PROCEDURE", "cmn");

            entity.HasIndex(e => new { e.MspName, e.MspRow }, "msp_name_row_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MspId).HasColumnName("msp_id");
            entity.Property(e => e.MspAtribute01)
                .HasMaxLength(4000)
                .HasColumnName("msp_atribute_01");
            entity.Property(e => e.MspAtribute02)
                .HasMaxLength(4000)
                .HasColumnName("msp_atribute_02");
            entity.Property(e => e.MspCommand)
                .HasMaxLength(4000)
                .HasColumnName("msp_command");
            entity.Property(e => e.MspComments)
                .HasMaxLength(4000)
                .HasColumnName("msp_comments");
            entity.Property(e => e.MspMdId).HasColumnName("msp_md_id");
            entity.Property(e => e.MspName)
                .HasMaxLength(64)
                .HasColumnName("msp_name");
            entity.Property(e => e.MspRow).HasColumnName("msp_row");
        });

        modelBuilder.Entity<MobileStyle>(entity =>
        {
            entity.HasKey(e => e.MsId).HasFillFactor(90);

            entity.ToTable("MOBILE_STYLE", "cmn");

            entity.Property(e => e.MsId).HasColumnName("ms_id");
            entity.Property(e => e.MsBackgroundColor)
                .HasMaxLength(64)
                .HasColumnName("ms_background_color");
            entity.Property(e => e.MsBackgroundStyle)
                .HasMaxLength(64)
                .HasColumnName("ms_background_style");
            entity.Property(e => e.MsFkId).HasColumnName("ms_fk_id");
            entity.Property(e => e.MsFkTable)
                .HasMaxLength(64)
                .HasColumnName("ms_fk_table");
            entity.Property(e => e.MsFontFamily)
                .HasMaxLength(64)
                .HasColumnName("ms_font_family");
            entity.Property(e => e.MsHeight).HasColumnName("ms_height");
            entity.Property(e => e.MsIcon)
                .HasMaxLength(64)
                .HasColumnName("ms_icon");
            entity.Property(e => e.MsIconColor)
                .HasMaxLength(64)
                .HasColumnName("ms_icon_color");
            entity.Property(e => e.MsTextColor)
                .HasMaxLength(64)
                .HasColumnName("ms_text_color");
            entity.Property(e => e.MsTextSize).HasColumnName("ms_text_size");
            entity.Property(e => e.MsTextStyle)
                .HasMaxLength(64)
                .HasColumnName("ms_text_style");
            entity.Property(e => e.MsUsId).HasColumnName("ms_us_id");
            entity.Property(e => e.MsWidth).HasColumnName("ms_width");
        });

        modelBuilder.Entity<MobilemenusProfile>(entity =>
        {
            entity.HasKey(e => e.MmpId).HasFillFactor(90);

            entity.ToTable("MOBILEMENUS_PROFILE", "cmn");

            entity.Property(e => e.MmpId).HasColumnName("mmp_id");
            entity.Property(e => e.MmpMmId).HasColumnName("mmp_mm_id");
            entity.Property(e => e.MmpPrId).HasColumnName("mmp_pr_id");

            entity.HasOne(d => d.MmpMm).WithMany(p => p.MobilemenusProfiles)
                .HasForeignKey(d => d.MmpMmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MMP_REF_MM");

            entity.HasOne(d => d.MmpPr).WithMany(p => p.MobilemenusProfiles)
                .HasForeignKey(d => d.MmpPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MMP_REF_PR");
        });

        modelBuilder.Entity<ModifiedField>(entity =>
        {
            entity.HasKey(e => e.ModId).HasFillFactor(90);

            entity.ToTable("MODIFIED_FIELDS", "cmn");

            entity.Property(e => e.ModId).HasColumnName("mod_id");
            entity.Property(e => e.ModDate)
                .HasColumnType("datetime")
                .HasColumnName("mod_date");
            entity.Property(e => e.ModField)
                .HasMaxLength(512)
                .HasColumnName("mod_field");
            entity.Property(e => e.ModPk).HasColumnName("mod_pk");
            entity.Property(e => e.ModSynched).HasColumnName("mod_synched");
            entity.Property(e => e.ModTable)
                .HasMaxLength(128)
                .HasColumnName("mod_table");
            entity.Property(e => e.ModUsId).HasColumnName("mod_us_id");
            entity.Property(e => e.ModVersion)
                .HasMaxLength(64)
                .HasColumnName("mod_version");
            entity.Property(e => e.NewValue)
                .HasMaxLength(512)
                .HasColumnName("new_value");
            entity.Property(e => e.OldValue)
                .HasMaxLength(512)
                .HasColumnName("old_value");
        });

        modelBuilder.Entity<ModifierLineElligible>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MODIFIER_LINE_ELLIGIBLE");

            entity.Property(e => e.MleElligible)
                .HasDefaultValue(1)
                .HasColumnName("mle_elligible");
            entity.Property(e => e.MleGroupNo)
                .HasDefaultValue(-1)
                .HasColumnName("mle_group_no");
            entity.Property(e => e.MleGroupingNo).HasColumnName("mle_grouping_no");
            entity.Property(e => e.MleHL)
                .HasMaxLength(8)
                .HasColumnName("mle_h_l");
            entity.Property(e => e.MleId).HasColumnName("mle_id");
            entity.Property(e => e.MleMhId).HasColumnName("mle_mh_id");
            entity.Property(e => e.MleMlId).HasColumnName("mle_ml_id");
            entity.Property(e => e.MleVersion)
                .HasMaxLength(32)
                .HasColumnName("mle_version");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.HasKey(e => e.MdId).HasFillFactor(90);

            entity.ToTable("MODULE", "cmn");

            entity.HasIndex(e => e.MdCode, "md_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MdId).HasColumnName("md_id");
            entity.Property(e => e.MdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("md_code");
            entity.Property(e => e.MdDescription)
                .HasMaxLength(255)
                .HasColumnName("md_description");
        });

        modelBuilder.Entity<Movement>(entity =>
        {
            entity.HasKey(e => e.MvId)
                .HasName("PK_SALES")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENT", "sls");

            entity.HasIndex(e => new { e.MvUsId, e.MvBuId, e.MvNumber }, "mv_bu_us_number_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.MvUid, "mv_uid")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvExportedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_exported_date");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("mv_uid");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvVersion)
                .HasMaxLength(128)
                .HasColumnName("mv_version");

            entity.HasOne(d => d.MvBu).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MV_REF_BU");

            entity.HasOne(d => d.MvCdIdCmsNavigation).WithMany(p => p.MovementMvCdIdCmsNavigations)
                .HasForeignKey(d => d.MvCdIdCms)
                .HasConstraintName("FK_MV_REF_CD_CMS");

            entity.HasOne(d => d.MvCdIdSrcNavigation).WithMany(p => p.MovementMvCdIdSrcNavigations)
                .HasForeignKey(d => d.MvCdIdSrc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MV_REF_CD_SRC");

            entity.HasOne(d => d.MvMss).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvMssId)
                .HasConstraintName("FK_MV_REF_MSS");

            entity.HasOne(d => d.MvMvt).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MV_REF_MVT");

            entity.HasOne(d => d.MvPlIdWhsFromNavigation).WithMany(p => p.MovementMvPlIdWhsFromNavigations)
                .HasForeignKey(d => d.MvPlIdWhsFrom)
                .HasConstraintName("FK_MV_REF_PL_WHS_FROM");

            entity.HasOne(d => d.MvPlIdWhsToNavigation).WithMany(p => p.MovementMvPlIdWhsToNavigations)
                .HasForeignKey(d => d.MvPlIdWhsTo)
                .HasConstraintName("FK_MV_REF_PL_WHS_TO");

            entity.HasOne(d => d.MvSgd).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvSgdId)
                .HasConstraintName("FK_MV_REF_SGD");

            entity.HasOne(d => d.MvThp).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvThpId)
                .HasConstraintName("FK_MV_REF_THP");

            entity.HasOne(d => d.MvUs).WithMany(p => p.Movements)
                .HasForeignKey(d => d.MvUsId)
                .HasConstraintName("FK_MV_REF_US");
        });

        modelBuilder.Entity<MovementItem>(entity =>
        {
            entity.HasKey(e => e.MviId)
                .HasName("PK_SALES_DETAILS")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENT_ITEM", "sls");

            entity.HasIndex(e => e.MviUomId, "NonClusteredIndex-20160803-162247").HasFillFactor(90);

            entity.HasIndex(e => e.MviMvId, "mvi_mv_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.MviItId, e.MviMvId, e.MviUomId }, "mvi_mv_it_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MviId).HasColumnName("mvi_id");
            entity.Property(e => e.MviCdIdRct).HasColumnName("mvi_cd_id_rct");
            entity.Property(e => e.MviDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_discount_amount");
            entity.Property(e => e.MviDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_discount_percentage");
            entity.Property(e => e.MviItId).HasColumnName("mvi_it_id");
            entity.Property(e => e.MviLineSequence).HasColumnName("mvi_line_sequence");
            entity.Property(e => e.MviLpId).HasColumnName("mvi_lp_id");
            entity.Property(e => e.MviMvId).HasColumnName("mvi_mv_id");
            entity.Property(e => e.MviMvOrgId).HasColumnName("mvi_mv_org_id");
            entity.Property(e => e.MviMviId).HasColumnName("mvi_mvi_id");
            entity.Property(e => e.MviMvtoId).HasColumnName("mvi_mvto_id");
            entity.Property(e => e.MviOrgId).HasColumnName("mvi_org_id");
            entity.Property(e => e.MviPlIdWhs).HasColumnName("mvi_pl_id_whs");
            entity.Property(e => e.MviPnId).HasColumnName("mvi_pn_id");
            entity.Property(e => e.MviPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_price");
            entity.Property(e => e.MviPriceChanged).HasColumnName("mvi_price_changed");
            entity.Property(e => e.MviQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_quantity");
            entity.Property(e => e.MviQuantity2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_quantity2");
            entity.Property(e => e.MviRemarks)
                .HasMaxLength(255)
                .HasColumnName("mvi_remarks");
            entity.Property(e => e.MviTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_amount");
            entity.Property(e => e.MviTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_amount_bc");
            entity.Property(e => e.MviTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_discount");
            entity.Property(e => e.MviTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_discount_bc");
            entity.Property(e => e.MviTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_tax");
            entity.Property(e => e.MviTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvi_total_tax_bc");
            entity.Property(e => e.MviUomId).HasColumnName("mvi_uom_id");

            entity.HasOne(d => d.MviIt).WithMany(p => p.MovementItems)
                .HasForeignKey(d => d.MviItId)
                .HasConstraintName("FK_MVT_REF_IT");

            entity.HasOne(d => d.MviLp).WithMany(p => p.MovementItems)
                .HasForeignKey(d => d.MviLpId)
                .HasConstraintName("FK_MVI_REF_LP");

            entity.HasOne(d => d.MviMv).WithMany(p => p.MovementItems)
                .HasForeignKey(d => d.MviMvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MVI_REF_MV");

            entity.HasOne(d => d.MviMvi).WithMany(p => p.InverseMviMvi)
                .HasForeignKey(d => d.MviMviId)
                .HasConstraintName("FK_MVI_REF_MVI");

            entity.HasOne(d => d.MviMvto).WithMany(p => p.MovementItems)
                .HasForeignKey(d => d.MviMvtoId)
                .HasConstraintName("FK_MVI_REF_MVTO");

            entity.HasOne(d => d.MviUom).WithMany(p => p.MovementItems)
                .HasForeignKey(d => d.MviUomId)
                .HasConstraintName("FK_MVI_REF_UOM");
        });

        modelBuilder.Entity<MovementItemDetail>(entity =>
        {
            entity.HasKey(e => e.MvidId).HasFillFactor(90);

            entity.ToTable("MOVEMENT_ITEM_DETAIL", "sls");

            entity.Property(e => e.MvidId).HasColumnName("mvid_id");
            entity.Property(e => e.MvidIldId).HasColumnName("mvid_ild_id");
            entity.Property(e => e.MvidMviId).HasColumnName("mvid_mvi_id");
            entity.Property(e => e.MvidOrgId).HasColumnName("mvid_org_id");
            entity.Property(e => e.MvidQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvid_quantity");
            entity.Property(e => e.MvidQuantity2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("mvid_quantity2");

            entity.HasOne(d => d.MvidMvi).WithMany(p => p.MovementItemDetails)
                .HasForeignKey(d => d.MvidMviId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MVIW_REF_MVI");
        });

        modelBuilder.Entity<MovementItemHistory>(entity =>
        {
            entity.HasKey(e => e.MvihId).HasFillFactor(90);

            entity.ToTable("MOVEMENT_ITEM_HISTORY", "sls");

            entity.Property(e => e.MvihId).HasColumnName("mvih_id");
            entity.Property(e => e.MvihApprovedDate)
                .HasColumnType("datetime")
                .HasColumnName("mvih_approved_date");
            entity.Property(e => e.MvihApprovedQty)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("numeric(6, 2)")
                .HasColumnName("mvih_approved_qty");
            entity.Property(e => e.MvihItId).HasColumnName("mvih_it_id");
            entity.Property(e => e.MvihMvId).HasColumnName("mvih_mv_id");
            entity.Property(e => e.MvihMviId).HasColumnName("mvih_mvi_id");
            entity.Property(e => e.MvihRequestedDate)
                .HasColumnType("datetime")
                .HasColumnName("mvih_requested_date");
            entity.Property(e => e.MvihRequestedQty)
                .HasColumnType("numeric(6, 2)")
                .HasColumnName("mvih_requested_qty");
            entity.Property(e => e.MvihUsIdApp).HasColumnName("mvih_us_id_app");
            entity.Property(e => e.MvihUsIdCr).HasColumnName("mvih_us_id_cr");

            entity.HasOne(d => d.MvihIt).WithMany(p => p.MovementItemHistories)
                .HasForeignKey(d => d.MvihItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MOVEMENT_ITEM_HISTORY_ITEM");

            entity.HasOne(d => d.MvihMv).WithMany(p => p.MovementItemHistories)
                .HasForeignKey(d => d.MvihMvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MOVEMENT_ITEM_HISTORY_MOVEMENT");

            entity.HasOne(d => d.MvihMvi).WithMany(p => p.MovementItemHistories)
                .HasForeignKey(d => d.MvihMviId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MOVEMENT_ITEM_HISTORY_MOVEMENT_ITEM");

            entity.HasOne(d => d.MvihUsIdAppNavigation).WithMany(p => p.MovementItemHistoryMvihUsIdAppNavigations)
                .HasForeignKey(d => d.MvihUsIdApp)
                .HasConstraintName("FK_MOVEMENT_ITEM_HISTORY_USER_app");

            entity.HasOne(d => d.MvihUsIdCrNavigation).WithMany(p => p.MovementItemHistoryMvihUsIdCrNavigations)
                .HasForeignKey(d => d.MvihUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MOVEMENT_ITEM_HISTORY_USER_cr");
        });

        modelBuilder.Entity<MovementLink>(entity =>
        {
            entity.HasKey(e => e.MvlId).HasFillFactor(90);

            entity.ToTable("MOVEMENT_LINK", "sls");

            entity.Property(e => e.MvlId).HasColumnName("mvl_id");
            entity.Property(e => e.MvlMvId).HasColumnName("mvl_mv_id");
            entity.Property(e => e.MvlMvIdLink).HasColumnName("mvl_mv_id_link");
            entity.Property(e => e.MvlOrgId).HasColumnName("mvl_org_id");
            entity.Property(e => e.MvlTsIdLink).HasColumnName("mvl_ts_id_link");

            entity.HasOne(d => d.MvlMv).WithMany(p => p.MovementLinkMvlMvs)
                .HasForeignKey(d => d.MvlMvId)
                .HasConstraintName("FK_MVL_REF_MV");

            entity.HasOne(d => d.MvlMvIdLinkNavigation).WithMany(p => p.MovementLinkMvlMvIdLinkNavigations)
                .HasForeignKey(d => d.MvlMvIdLink)
                .HasConstraintName("FK_MVL_REF_MV_LINK");

            entity.HasOne(d => d.MvlTsIdLinkNavigation).WithMany(p => p.MovementLinks)
                .HasForeignKey(d => d.MvlTsIdLink)
                .HasConstraintName("FK_MOVEMENT_LINK_TRANSACTION");
        });

        modelBuilder.Entity<MovementSequence>(entity =>
        {
            entity.HasKey(e => e.MvsId).HasFillFactor(90);

            entity.ToTable("MOVEMENT_SEQUENCE", "sls");

            entity.HasIndex(e => new { e.MvsBuId, e.MvsUsId, e.MvsMvtId, e.MvsOrder }, "mvt_bu_us_mvt_sq_ord_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MvsId).HasColumnName("mvs_id");
            entity.Property(e => e.MvsActive)
                .HasDefaultValue(1)
                .HasColumnName("mvs_active");
            entity.Property(e => e.MvsBuId).HasColumnName("mvs_bu_id");
            entity.Property(e => e.MvsLength).HasColumnName("mvs_length");
            entity.Property(e => e.MvsMvtId).HasColumnName("mvs_mvt_id");
            entity.Property(e => e.MvsOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("mvs_order");
            entity.Property(e => e.MvsPrefix)
                .HasMaxLength(16)
                .HasColumnName("mvs_prefix");
            entity.Property(e => e.MvsSqId).HasColumnName("mvs_sq_id");
            entity.Property(e => e.MvsUsId).HasColumnName("mvs_us_id");

            entity.HasOne(d => d.MvsBu).WithMany(p => p.MovementSequences)
                .HasForeignKey(d => d.MvsBuId)
                .HasConstraintName("FK_MVS_REF_BU");

            entity.HasOne(d => d.MvsMvt).WithMany(p => p.MovementSequences)
                .HasForeignKey(d => d.MvsMvtId)
                .HasConstraintName("FK_MVS_REF_MVT");

            entity.HasOne(d => d.MvsSq).WithMany(p => p.MovementSequences)
                .HasForeignKey(d => d.MvsSqId)
                .HasConstraintName("FK_MVS_REF_SQ");

            entity.HasOne(d => d.MvsUs).WithMany(p => p.MovementSequences)
                .HasForeignKey(d => d.MvsUsId)
                .HasConstraintName("FK_MVS_REF_US");
        });

        modelBuilder.Entity<MovementStatusHistory>(entity =>
        {
            entity.HasKey(e => e.MvshId).HasFillFactor(90);

            entity.ToTable("MOVEMENT_STATUS_HISTORY", "sls");

            entity.Property(e => e.MvshId).HasColumnName("mvsh_id");
            entity.Property(e => e.MvshComments)
                .HasMaxLength(255)
                .HasColumnName("mvsh_comments");
            entity.Property(e => e.MvshCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("mvsh_create_date");
            entity.Property(e => e.MvshMssId).HasColumnName("mvsh_mss_id");
            entity.Property(e => e.MvshMvId).HasColumnName("mvsh_mv_id");
            entity.Property(e => e.MvshUsId).HasColumnName("mvsh_us_id");

            entity.HasOne(d => d.MvshMss).WithMany(p => p.MovementStatusHistories)
                .HasForeignKey(d => d.MvshMssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MVSH_REF_MSS");

            entity.HasOne(d => d.MvshMv).WithMany(p => p.MovementStatusHistories)
                .HasForeignKey(d => d.MvshMvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MVSH_REF_MV");

            entity.HasOne(d => d.MvshUs).WithMany(p => p.MovementStatusHistories)
                .HasForeignKey(d => d.MvshUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MVSH_REF_US");
        });

        modelBuilder.Entity<MovementSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MOVEMENT_SUMMARY", "cmn");

            entity.Property(e => e.FPlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("f_pl_description_lan1");
            entity.Property(e => e.FPlDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("f_pl_description_lan2");
            entity.Property(e => e.FPlDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("f_pl_description_lan3");
            entity.Property(e => e.FPlId).HasColumnName("f_pl_id");
            entity.Property(e => e.ItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.ItDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan2");
            entity.Property(e => e.ItDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan3");
            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.MssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan1");
            entity.Property(e => e.MssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan2");
            entity.Property(e => e.MssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan3");
            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvDate).HasColumnName("mv_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mvt_code");
            entity.Property(e => e.MvtId).HasColumnName("mvt_id");
            entity.Property(e => e.TPlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("t_pl_description_lan1");
            entity.Property(e => e.TPlDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("t_pl_description_lan2");
            entity.Property(e => e.TPlDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("t_pl_description_lan3");
            entity.Property(e => e.TPlId).HasColumnName("t_pl_id");
            entity.Property(e => e.TotalQty)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("total_qty");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomNameLan1)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan1");
            entity.Property(e => e.UomNameLan2)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan2");
            entity.Property(e => e.UomNameLan3)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan3");
        });

        modelBuilder.Entity<MovementType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MOVEMENT_TYPE", "sls");

            entity.Property(e => e.MvtAccountingPost).HasColumnName("mvt_accounting_post");
            entity.Property(e => e.MvtAllowDiscountAmountChange).HasColumnName("mvt_allow_discount_amount_change");
            entity.Property(e => e.MvtAllowDiscountChange).HasColumnName("mvt_allow_discount_change");
            entity.Property(e => e.MvtAllowPriceChange).HasColumnName("mvt_allow_price_change");
            entity.Property(e => e.MvtApplyConstraints).HasColumnName("mvt_apply_constraints");
            entity.Property(e => e.MvtAutoSequence).HasColumnName("mvt_auto_sequence");
            entity.Property(e => e.MvtCdIdMod).HasColumnName("mvt_cd_id_mod");
            entity.Property(e => e.MvtCdIdTpt).HasColumnName("mvt_cd_id_tpt");
            entity.Property(e => e.MvtCheckAvailability).HasColumnName("mvt_check_availability");
            entity.Property(e => e.MvtCheckCreditLimit).HasColumnName("mvt_check_credit_limit");
            entity.Property(e => e.MvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mvt_code");
            entity.Property(e => e.MvtDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan1");
            entity.Property(e => e.MvtDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan2");
            entity.Property(e => e.MvtDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan3");
            entity.Property(e => e.MvtDqIdWhsSelection).HasColumnName("mvt_dq_id_whs_selection");
            entity.Property(e => e.MvtDqItemSelection).HasColumnName("mvt_dq_item_selection");
            entity.Property(e => e.MvtDqUomSelection).HasColumnName("mvt_dq_uom_selection");
            entity.Property(e => e.MvtId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mvt_id");
            entity.Property(e => e.MvtManageSerial).HasColumnName("mvt_manage_serial");
            entity.Property(e => e.MvtMvtIdSource).HasColumnName("mvt_mvt_id_source");
            entity.Property(e => e.MvtNameLan1)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan1");
            entity.Property(e => e.MvtNameLan2)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan2");
            entity.Property(e => e.MvtNameLan3)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan3");
            entity.Property(e => e.MvtNotes)
                .HasMaxLength(50)
                .HasColumnName("mvt_notes");
            entity.Property(e => e.MvtPrintCopies).HasColumnName("mvt_print_copies");
            entity.Property(e => e.MvtPrintingCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mvt_printing_code");
            entity.Property(e => e.MvtShowPrice).HasColumnName("mvt_show_price");
            entity.Property(e => e.MvtStatusFcCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mvt_status_fc_code");
            entity.Property(e => e.MvtUpdateCost).HasColumnName("mvt_update_cost");
            entity.Property(e => e.MvtUpdateQuantityFrom).HasColumnName("mvt_update_quantity_from");
            entity.Property(e => e.MvtUpdateQuantityTo).HasColumnName("mvt_update_quantity_to");
        });

        modelBuilder.Entity<MovementitemquotaMvt>(entity =>
        {
            entity.HasKey(e => e.MiqmId).HasFillFactor(90);

            entity.ToTable("MOVEMENTITEMQUOTA_MVT", "sls");

            entity.HasIndex(e => new { e.MiqmMvtId, e.MiqmMssId, e.MiqmMiqId }, "miqm_miq_mvt_mss_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MiqmId).HasColumnName("miqm_id");
            entity.Property(e => e.MiqmFrom).HasColumnName("miqm_from");
            entity.Property(e => e.MiqmMiqId).HasColumnName("miqm_miq_id");
            entity.Property(e => e.MiqmMssId).HasColumnName("miqm_mss_id");
            entity.Property(e => e.MiqmMvtId).HasColumnName("miqm_mvt_id");
            entity.Property(e => e.MiqmTo).HasColumnName("miqm_to");

            entity.HasOne(d => d.MiqmMiq).WithMany(p => p.MovementitemquotaMvts)
                .HasForeignKey(d => d.MiqmMiqId)
                .HasConstraintName("FK_miqm_REF_MIQ");

            entity.HasOne(d => d.MiqmMss).WithMany(p => p.MovementitemquotaMvts)
                .HasForeignKey(d => d.MiqmMssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_miqm_REF_MSS");

            entity.HasOne(d => d.MiqmMvt).WithMany(p => p.MovementitemquotaMvts)
                .HasForeignKey(d => d.MiqmMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_miqm_REF_MVT");
        });

        modelBuilder.Entity<Movementitemquotum>(entity =>
        {
            entity.HasKey(e => e.MiqId).HasFillFactor(90);

            entity.ToTable("MOVEMENTITEMQUOTA", "sls");

            entity.HasIndex(e => new { e.MiqMvtId, e.MiqMssId }, "miq_mvt_mss_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MiqId).HasColumnName("miq_id");
            entity.Property(e => e.MiqMssId).HasColumnName("miq_mss_id");
            entity.Property(e => e.MiqMvtId).HasColumnName("miq_mvt_id");

            entity.HasOne(d => d.MiqMss).WithMany(p => p.Movementitemquota)
                .HasForeignKey(d => d.MiqMssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MIQ_REF_MSS");

            entity.HasOne(d => d.MiqMvt).WithMany(p => p.Movementitemquota)
                .HasForeignKey(d => d.MiqMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MIQ_REF_MVT");
        });

        modelBuilder.Entity<Movementstatus>(entity =>
        {
            entity.HasKey(e => e.MssId)
                .HasName("PK_MOVEMENT_STATUS")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENTSTATUS", "sls");

            entity.HasIndex(e => e.MssCode, "mss_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MssId).HasColumnName("mss_id");
            entity.Property(e => e.MssCausesValidation)
                .HasDefaultValue((short)1)
                .HasColumnName("mss_causes_validation");
            entity.Property(e => e.MssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("mss_code");
            entity.Property(e => e.MssConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mss_confirmation_code");
            entity.Property(e => e.MssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan1");
            entity.Property(e => e.MssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan2");
            entity.Property(e => e.MssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("mss_description_lan3");
            entity.Property(e => e.MssLabelCode)
                .HasMaxLength(640)
                .IsUnicode(false)
                .HasColumnName("mss_label_code");
            entity.Property(e => e.MssOrder)
                .HasDefaultValue(1)
                .HasColumnName("mss_order");
            entity.Property(e => e.MssStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mss_style");
        });

        modelBuilder.Entity<MovementstatusTransition>(entity =>
        {
            entity.HasKey(e => e.MsstId).HasFillFactor(90);

            entity.ToTable("MOVEMENTSTATUS_TRANSITION", "sls");

            entity.HasIndex(e => new { e.MsstMvtId, e.MsstMssIdFrom, e.MsstMssIdTo }, "msst_mvt_mss_from_to_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MsstId).HasColumnName("msst_id");
            entity.Property(e => e.MsstAutoAllocateLxp)
                .HasDefaultValue((short)-1)
                .HasColumnName("msst_auto_allocate_lxp");
            entity.Property(e => e.MsstAutoCreateFromSource).HasColumnName("msst_auto_create_from_source");
            entity.Property(e => e.MsstCheckAvailabilityFrom).HasColumnName("msst_check_availability_from");
            entity.Property(e => e.MsstCheckAvailabilityTo).HasColumnName("msst_check_availability_to");
            entity.Property(e => e.MsstExportData)
                .HasDefaultValue((short)-1)
                .HasColumnName("msst_export_data");
            entity.Property(e => e.MsstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("msst_extra_code");
            entity.Property(e => e.MsstLxpRequired).HasColumnName("msst_lxp_required");
            entity.Property(e => e.MsstMssIdFrom).HasColumnName("msst_mss_id_from");
            entity.Property(e => e.MsstMssIdGenerate).HasColumnName("msst_mss_id_generate");
            entity.Property(e => e.MsstMssIdTo).HasColumnName("msst_mss_id_to");
            entity.Property(e => e.MsstMvPlFromIsOwner)
                .HasDefaultValue((short)-1)
                .HasColumnName("msst_mv_pl_from_is_owner");
            entity.Property(e => e.MsstMvPlToIsOwner)
                .HasDefaultValue((short)-1)
                .HasColumnName("msst_mv_pl_to_is_owner");
            entity.Property(e => e.MsstMvUsIsOwner)
                .HasDefaultValue((short)-1)
                .HasColumnName("msst_mv_us_is_owner");
            entity.Property(e => e.MsstMvtId).HasColumnName("msst_mvt_id");
            entity.Property(e => e.MsstMvtIdGenerate).HasColumnName("msst_mvt_id_generate");
            entity.Property(e => e.MsstMvtIdSource).HasColumnName("msst_mvt_id_source");
            entity.Property(e => e.MsstReserveQuantityFrom).HasColumnName("msst_reserve_quantity_from");
            entity.Property(e => e.MsstReserveQuantityTo).HasColumnName("msst_reserve_quantity_to");
            entity.Property(e => e.MsstUpdateQuantityFrom).HasColumnName("msst_update_quantity_from");
            entity.Property(e => e.MsstUpdateQuantityTo).HasColumnName("msst_update_quantity_to");

            entity.HasOne(d => d.MsstMssIdFromNavigation).WithMany(p => p.MovementstatusTransitionMsstMssIdFromNavigations)
                .HasForeignKey(d => d.MsstMssIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSST_REF_MSS_FROM");

            entity.HasOne(d => d.MsstMssIdGenerateNavigation).WithMany(p => p.MovementstatusTransitionMsstMssIdGenerateNavigations)
                .HasForeignKey(d => d.MsstMssIdGenerate)
                .HasConstraintName("FK_MSST_REF_MSS_GEN");

            entity.HasOne(d => d.MsstMssIdToNavigation).WithMany(p => p.MovementstatusTransitionMsstMssIdToNavigations)
                .HasForeignKey(d => d.MsstMssIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSST_REF_MSS_TO");

            entity.HasOne(d => d.MsstMvt).WithMany(p => p.MovementstatusTransitionMsstMvts)
                .HasForeignKey(d => d.MsstMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSST_REF_MVT");

            entity.HasOne(d => d.MsstMvtIdGenerateNavigation).WithMany(p => p.MovementstatusTransitionMsstMvtIdGenerateNavigations)
                .HasForeignKey(d => d.MsstMvtIdGenerate)
                .HasConstraintName("FK_MSST_REF_MVT_GEN");
        });

        modelBuilder.Entity<MovementstatusTransitionBu>(entity =>
        {
            entity.HasKey(e => e.MstbId)
                .HasName("PK_MOVEMENTSTATUS_TRANSITION_B")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENTSTATUS_TRANSITION_BU", "sls");

            entity.HasIndex(e => new { e.MstbBuId, e.MstbMsstId }, "mstb_msst_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MstbId).HasColumnName("mstb_id");
            entity.Property(e => e.MstbBuId).HasColumnName("mstb_bu_id");
            entity.Property(e => e.MstbMsstId).HasColumnName("mstb_msst_id");

            entity.HasOne(d => d.MstbBu).WithMany(p => p.MovementstatusTransitionBus)
                .HasForeignKey(d => d.MstbBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSTB_REF_BU");

            entity.HasOne(d => d.MstbMsst).WithMany(p => p.MovementstatusTransitionBus)
                .HasForeignKey(d => d.MstbMsstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSTB_REF_MSST");
        });

        modelBuilder.Entity<MovementstatusTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.MstpId)
                .HasName("PK_MOVEMENTSTATUS_TRANSITION_P")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENTSTATUS_TRANSITION_PROFILE", "sls");

            entity.HasIndex(e => e.MstpMsstId, "mstp_msst_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.MstpMsstId, e.MstpPrId }, "mstp_msst_pr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MstpId).HasColumnName("mstp_id");
            entity.Property(e => e.MstpMsstId).HasColumnName("mstp_msst_id");
            entity.Property(e => e.MstpPrId).HasColumnName("mstp_pr_id");

            entity.HasOne(d => d.MstpMsst).WithMany(p => p.MovementstatusTransitionProfiles)
                .HasForeignKey(d => d.MstpMsstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSTP_REF_MSST");

            entity.HasOne(d => d.MstpPr).WithMany(p => p.MovementstatusTransitionProfiles)
                .HasForeignKey(d => d.MstpPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSTP_REF_PR");
        });

        modelBuilder.Entity<MovementstatusUiGenericpage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MOVEMENTSTATUS_UI_GENERICPAGE", "sls");

            entity.HasIndex(e => new { e.MgMssId, e.MgGpId }, "mg_mss_gp_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MgGpId).HasColumnName("mg_gp_id");
            entity.Property(e => e.MgId)
                .ValueGeneratedOnAdd()
                .HasColumnName("mg_id");
            entity.Property(e => e.MgMssId).HasColumnName("mg_mss_id");
        });

        modelBuilder.Entity<Movementtype1>(entity =>
        {
            entity.HasKey(e => e.MvtId).HasFillFactor(90);

            entity.ToTable("MOVEMENTTYPE", "sls");

            entity.Property(e => e.MvtId).HasColumnName("mvt_id");
            entity.Property(e => e.MvtAccountingPost).HasColumnName("mvt_accounting_post");
            entity.Property(e => e.MvtAllowDiscountAmountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_discount_amount_change");
            entity.Property(e => e.MvtAllowDiscountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_discount_change");
            entity.Property(e => e.MvtAllowPriceChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_price_change");
            entity.Property(e => e.MvtApplyConstraints).HasColumnName("mvt_apply_constraints");
            entity.Property(e => e.MvtAutoCreateFromSource).HasColumnName("mvt_auto_create_from_source");
            entity.Property(e => e.MvtAutoSequence).HasColumnName("mvt_auto_sequence");
            entity.Property(e => e.MvtCdIdMod).HasColumnName("mvt_cd_id_mod");
            entity.Property(e => e.MvtCdIdTpt).HasColumnName("mvt_cd_id_tpt");
            entity.Property(e => e.MvtCheckAvailability).HasColumnName("mvt_check_availability");
            entity.Property(e => e.MvtCheckCreditLimit).HasColumnName("mvt_check_credit_limit");
            entity.Property(e => e.MvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mvt_code");
            entity.Property(e => e.MvtDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan1");
            entity.Property(e => e.MvtDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan2");
            entity.Property(e => e.MvtDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan3");
            entity.Property(e => e.MvtDqIdWhsSelection).HasColumnName("mvt_dq_id_whs_selection");
            entity.Property(e => e.MvtDqItemSelection).HasColumnName("mvt_dq_item_selection");
            entity.Property(e => e.MvtDqUomSelection).HasColumnName("mvt_dq_uom_selection");
            entity.Property(e => e.MvtManageExpiryDate).HasColumnName("mvt_manage_expiry_date");
            entity.Property(e => e.MvtManageLot).HasColumnName("mvt_manage_lot");
            entity.Property(e => e.MvtManageProductionDate).HasColumnName("mvt_manage_production_date");
            entity.Property(e => e.MvtManageSerial).HasColumnName("mvt_manage_serial");
            entity.Property(e => e.MvtMvtIdSource).HasColumnName("mvt_mvt_id_source");
            entity.Property(e => e.MvtNameLan1)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan1");
            entity.Property(e => e.MvtNameLan2)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan2");
            entity.Property(e => e.MvtNameLan3)
                .HasMaxLength(50)
                .HasColumnName("mvt_name_lan3");
            entity.Property(e => e.MvtNotes)
                .HasMaxLength(50)
                .HasColumnName("mvt_notes");
            entity.Property(e => e.MvtPreviewQuantityFrom).HasColumnName("mvt_preview_quantity_from");
            entity.Property(e => e.MvtPreviewQuantityTo).HasColumnName("mvt_preview_quantity_to");
            entity.Property(e => e.MvtPrintCopies).HasColumnName("mvt_print_copies");
            entity.Property(e => e.MvtPrintingCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mvt_printing_code");
            entity.Property(e => e.MvtReserveQuantityFrom).HasColumnName("mvt_reserve_quantity_from");
            entity.Property(e => e.MvtReserveQuantityTo).HasColumnName("mvt_reserve_quantity_to");
            entity.Property(e => e.MvtShowPrice).HasColumnName("mvt_show_price");
            entity.Property(e => e.MvtStatusFcCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mvt_status_fc_code");
            entity.Property(e => e.MvtUpdateCost).HasColumnName("mvt_update_cost");
            entity.Property(e => e.MvtUpdateQuantityFrom)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_update_quantity_from");
            entity.Property(e => e.MvtUpdateQuantityTo)
                .HasDefaultValue((short)1)
                .HasColumnName("mvt_update_quantity_to");
        });

        modelBuilder.Entity<Movementtype2>(entity =>
        {
            entity.HasKey(e => e.MvtId)
                .HasName("PK_MOVEMENT_TYPE")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENTTYPE_", "sls");

            entity.Property(e => e.MvtId).HasColumnName("mvt_id");
            entity.Property(e => e.MvtAccountingPost).HasColumnName("mvt_accounting_post");
            entity.Property(e => e.MvtAllowDiscountAmountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_discount_amount_change");
            entity.Property(e => e.MvtAllowDiscountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_discount_change");
            entity.Property(e => e.MvtAllowPriceChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_allow_price_change");
            entity.Property(e => e.MvtApplyConstraints).HasColumnName("mvt_apply_constraints");
            entity.Property(e => e.MvtAutoCreateFromSource).HasColumnName("mvt_auto_create_from_source");
            entity.Property(e => e.MvtAutoSequence).HasColumnName("mvt_auto_sequence");
            entity.Property(e => e.MvtCdIdMod).HasColumnName("mvt_cd_id_mod");
            entity.Property(e => e.MvtCdIdTpt).HasColumnName("mvt_cd_id_tpt");
            entity.Property(e => e.MvtCheckAvailability).HasColumnName("mvt_check_availability");
            entity.Property(e => e.MvtCheckCreditLimit).HasColumnName("mvt_check_credit_limit");
            entity.Property(e => e.MvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mvt_code");
            entity.Property(e => e.MvtDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan1");
            entity.Property(e => e.MvtDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan2");
            entity.Property(e => e.MvtDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("mvt_description_lan3");
            entity.Property(e => e.MvtDqIdWhsSelection).HasColumnName("mvt_dq_id_whs_selection");
            entity.Property(e => e.MvtDqItemSelection).HasColumnName("mvt_dq_item_selection");
            entity.Property(e => e.MvtDqUomSelection).HasColumnName("mvt_dq_uom_selection");
            entity.Property(e => e.MvtGenerateDueInvoice).HasColumnName("mvt_generate_due_invoice");
            entity.Property(e => e.MvtHoldQuantity).HasColumnName("mvt_hold_quantity");
            entity.Property(e => e.MvtManageLotexprod).HasColumnName("mvt_manage_lotexprod");
            entity.Property(e => e.MvtManageSerial).HasColumnName("mvt_manage_serial");
            entity.Property(e => e.MvtMvtIdSource).HasColumnName("mvt_mvt_id_source");
            entity.Property(e => e.MvtNameLan1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mvt_name_lan1");
            entity.Property(e => e.MvtNameLan2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mvt_name_lan2");
            entity.Property(e => e.MvtNameLan3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mvt_name_lan3");
            entity.Property(e => e.MvtNotes)
                .HasMaxLength(50)
                .HasColumnName("mvt_notes");
            entity.Property(e => e.MvtPreviewQuantity)
                .HasColumnType("smalldatetime")
                .HasColumnName("mvt_preview_quantity");
            entity.Property(e => e.MvtPrintCopies).HasColumnName("mvt_print_copies");
            entity.Property(e => e.MvtPrintingCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mvt_printing_code");
            entity.Property(e => e.MvtQuantityMultiplier).HasColumnName("mvt_quantity_multiplier");
            entity.Property(e => e.MvtReserveQuantity).HasColumnName("mvt_reserve_quantity");
            entity.Property(e => e.MvtShowPrice).HasColumnName("mvt_show_price");
            entity.Property(e => e.MvtStatusFcCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mvt_status_fc_code");
            entity.Property(e => e.MvtUpdateCost).HasColumnName("mvt_update_cost");
            entity.Property(e => e.MvtUpdateQuantityFrom)
                .HasDefaultValue((short)-1)
                .HasColumnName("mvt_update_quantity_from");
            entity.Property(e => e.MvtUpdateQuantityTo)
                .HasDefaultValue((short)1)
                .HasColumnName("mvt_update_quantity_to");

            entity.HasOne(d => d.MvtCdIdModNavigation).WithMany(p => p.Movementtype2MvtCdIdModNavigations)
                .HasForeignKey(d => d.MvtCdIdMod)
                .HasConstraintName("FK_MVT_REF_CD_MOD");

            entity.HasOne(d => d.MvtCdIdTptNavigation).WithMany(p => p.Movementtype2MvtCdIdTptNavigations)
                .HasForeignKey(d => d.MvtCdIdTpt)
                .HasConstraintName("FK_MVT_REF_CD_TPT");
        });

        modelBuilder.Entity<MovementtypeOption>(entity =>
        {
            entity.HasKey(e => e.MvtoId)
                .HasName("PK_MOVEMENT_TYPE_OPTION")
                .HasFillFactor(90);

            entity.ToTable("MOVEMENTTYPE_OPTION", "sls");

            entity.Property(e => e.MvtoId).HasColumnName("mvto_id");
            entity.Property(e => e.MvtoMvtId).HasColumnName("mvto_mvt_id");

            entity.HasOne(d => d.MvtoMvt).WithMany(p => p.MovementtypeOptions)
                .HasForeignKey(d => d.MvtoMvtId)
                .HasConstraintName("FK_MVTO_REF_MVT");
        });

        modelBuilder.Entity<MovementtypeUiGenericpage>(entity =>
        {
            entity.HasKey(e => e.MtgpId).HasFillFactor(90);

            entity.ToTable("MOVEMENTTYPE_UI_GENERICPAGE", "sls");

            entity.HasIndex(e => new { e.MtgpMvtId, e.MtgpGpId }, "mtgp_mvt_gp_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.MtgpId).HasColumnName("mtgp_id");
            entity.Property(e => e.MtgpGpId).HasColumnName("mtgp_gp_id");
            entity.Property(e => e.MtgpMvtId).HasColumnName("mtgp_mvt_id");

            entity.HasOne(d => d.MtgpGp).WithMany(p => p.MovementtypeUiGenericpages)
                .HasForeignKey(d => d.MtgpGpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTGP_REF_GP");

            entity.HasOne(d => d.MtgpMvt).WithMany(p => p.MovementtypeUiGenericpages)
                .HasForeignKey(d => d.MtgpMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MTGP_REF_MVT");
        });

        modelBuilder.Entity<NetSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("NetSales", "dex");

            entity.Property(e => e.NesVtId).HasColumnName("nes_vt_id");
            entity.Property(e => e.NetSalestotal).HasColumnType("numeric(38, 5)");
        });

        modelBuilder.Entity<Newmenu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEWMENU", "cmn");

            entity.Property(e => e.MnDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("mn_description_lan1");
            entity.Property(e => e.MnDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("mn_description_lan2");
            entity.Property(e => e.MnId).HasColumnName("mn_id");
        });

        modelBuilder.Entity<NoDeliveryReasonSnc>(entity =>
        {
            entity.HasKey(e => new { e.SNdrId, e.SNdrSmId, e.SNdrVersion }).HasFillFactor(90);

            entity.ToTable("NO_DELIVERY_REASON_SNC", "syn");

            entity.Property(e => e.SNdrId).HasColumnName("s_ndr_id");
            entity.Property(e => e.SNdrSmId).HasColumnName("s_ndr_sm_id");
            entity.Property(e => e.SNdrVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ndr_version");
            entity.Property(e => e.SNdrCdIdNdr).HasColumnName("s_ndr_cd_id_ndr");
            entity.Property(e => e.SNdrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ndr_creation_date");
            entity.Property(e => e.SNdrDvId).HasColumnName("s_ndr_dv_id");
            entity.Property(e => e.SNdrNotes)
                .HasMaxLength(4000)
                .HasColumnName("s_ndr_notes");
            entity.Property(e => e.SNdrSynched).HasColumnName("s_ndr_synched");
            entity.Property(e => e.SNdrUsId).HasColumnName("s_ndr_us_id");
            entity.Property(e => e.SNdrVtId).HasColumnName("s_ndr_vt_id");
        });

        modelBuilder.Entity<NoReasonsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SNrId, e.SNrSmId, e.SNrVersion }).HasFillFactor(90);

            entity.ToTable("NO_REASONS_SNC", "syn");

            entity.Property(e => e.SNrId).HasColumnName("s_nr_id");
            entity.Property(e => e.SNrSmId).HasColumnName("s_nr_sm_id");
            entity.Property(e => e.SNrVersion)
                .HasMaxLength(25)
                .HasColumnName("s_nr_version");
            entity.Property(e => e.SNrCdId).HasColumnName("s_nr_cd_id");
            entity.Property(e => e.SNrCode)
                .HasMaxLength(6)
                .HasColumnName("s_nr_code");
            entity.Property(e => e.SNrSynched).HasColumnName("s_nr_synched");
            entity.Property(e => e.SNrVtId).HasColumnName("s_nr_vt_id");
            entity.Property(e => e.SNrVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_nr_vt_uid");
        });

        modelBuilder.Entity<NoVisit>(entity =>
        {
            entity.HasKey(e => e.NvId).HasFillFactor(90);

            entity.ToTable("NO_VISIT", "cmn");

            entity.Property(e => e.NvId).HasColumnName("nv_id");
            entity.Property(e => e.NvCdIdNvr).HasColumnName("nv_cd_id_nvr");
            entity.Property(e => e.NvComments)
                .HasMaxLength(200)
                .HasColumnName("nv_comments");
            entity.Property(e => e.NvDate)
                .HasColumnType("datetime")
                .HasColumnName("nv_date");
            entity.Property(e => e.NvVtId).HasColumnName("nv_vt_id");

            entity.HasOne(d => d.NvCdIdNvrNavigation).WithMany(p => p.NoVisits)
                .HasForeignKey(d => d.NvCdIdNvr)
                .HasConstraintName("FK_NV_REF_CD");

            entity.HasOne(d => d.NvVt).WithMany(p => p.NoVisits)
                .HasForeignKey(d => d.NvVtId)
                .HasConstraintName("FK_NO_VISIT_REFERENCE_VISIT");
        });

        modelBuilder.Entity<NotifyDevice>(entity =>
        {
            entity.HasKey(e => e.NdId).HasFillFactor(90);

            entity.ToTable("NOTIFY_DEVICE", "utl");

            entity.Property(e => e.NdId).HasColumnName("nd_id");
            entity.Property(e => e.NdAction1)
                .HasMaxLength(128)
                .HasColumnName("nd_action1");
            entity.Property(e => e.NdAction2)
                .HasMaxLength(128)
                .HasColumnName("nd_action2");
            entity.Property(e => e.NdCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("nd_creation_date");
            entity.Property(e => e.NdIcon)
                .HasMaxLength(126)
                .HasColumnName("nd_icon");
            entity.Property(e => e.NdMessage)
                .HasMaxLength(1000)
                .HasColumnName("nd_message");
            entity.Property(e => e.NdStatus).HasColumnName("nd_status");
            entity.Property(e => e.NdTitle)
                .HasMaxLength(126)
                .HasColumnName("nd_title");
            entity.Property(e => e.NdUsId).HasColumnName("nd_us_id");
        });

        modelBuilder.Entity<Operation>(entity =>
        {
            entity.HasKey(e => e.OpId).HasFillFactor(90);

            entity.ToTable("OPERATION", "whs");

            entity.Property(e => e.OpId).HasColumnName("op_id");
            entity.Property(e => e.OpBuId).HasColumnName("op_bu_id");
            entity.Property(e => e.OpCdIdCms).HasColumnName("op_cd_id_cms");
            entity.Property(e => e.OpCdIdCur).HasColumnName("op_cd_id_cur");
            entity.Property(e => e.OpCdIdSrc).HasColumnName("op_cd_id_src");
            entity.Property(e => e.OpCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("op_create_date");
            entity.Property(e => e.OpCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_cur_rate");
            entity.Property(e => e.OpDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("op_date");
            entity.Property(e => e.OpDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_discount");
            entity.Property(e => e.OpDueDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("op_due_date");
            entity.Property(e => e.OpInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_inv_cur_rate");
            entity.Property(e => e.OpModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("op_modified_date");
            entity.Property(e => e.OpNumber)
                .HasMaxLength(40)
                .HasColumnName("op_number");
            entity.Property(e => e.OpOpId).HasColumnName("op_op_id");
            entity.Property(e => e.OpOpsId).HasColumnName("op_ops_id");
            entity.Property(e => e.OpOptId).HasColumnName("op_opt_id");
            entity.Property(e => e.OpOrgId).HasColumnName("op_org_id");
            entity.Property(e => e.OpOurReference)
                .HasMaxLength(10)
                .HasColumnName("op_our_reference");
            entity.Property(e => e.OpPlIdWhs).HasColumnName("op_pl_id_whs");
            entity.Property(e => e.OpPlIdWhsTo).HasColumnName("op_pl_id_whs_to");
            entity.Property(e => e.OpRemarks)
                .HasMaxLength(255)
                .HasColumnName("op_remarks");
            entity.Property(e => e.OpSgdId).HasColumnName("op_sgd_id");
            entity.Property(e => e.OpTheirReference)
                .HasMaxLength(10)
                .HasColumnName("op_their_reference");
            entity.Property(e => e.OpThpsId).HasColumnName("op_thps_id");
            entity.Property(e => e.OpTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total");
            entity.Property(e => e.OpTotalBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total_bc");
            entity.Property(e => e.OpTotalDiscount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total_discount");
            entity.Property(e => e.OpTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total_discount_bc");
            entity.Property(e => e.OpTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total_tax");
            entity.Property(e => e.OpTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("op_total_tax_bc");
            entity.Property(e => e.OpTsId).HasColumnName("op_ts_id");
            entity.Property(e => e.OpUmvId).HasColumnName("op_umv_id");
            entity.Property(e => e.OpUsId).HasColumnName("op_us_id");
            entity.Property(e => e.OpUsIdCreatedby).HasColumnName("op_us_id_createdby");

            entity.HasOne(d => d.OpBu).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_op_REF_BU");

            entity.HasOne(d => d.OpCdIdCmsNavigation).WithMany(p => p.OperationOpCdIdCmsNavigations)
                .HasForeignKey(d => d.OpCdIdCms)
                .HasConstraintName("FK_op_REF_CD_CMS");

            entity.HasOne(d => d.OpCdIdCurNavigation).WithMany(p => p.OperationOpCdIdCurNavigations)
                .HasForeignKey(d => d.OpCdIdCur)
                .HasConstraintName("FK_op_REF_CD_CUR");

            entity.HasOne(d => d.OpCdIdSrcNavigation).WithMany(p => p.OperationOpCdIdSrcNavigations)
                .HasForeignKey(d => d.OpCdIdSrc)
                .HasConstraintName("FK_op_REF_CD_SRC");

            entity.HasOne(d => d.OpOps).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpOpsId)
                .HasConstraintName("FK_op_REF_opS");

            entity.HasOne(d => d.OpOpt).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpOptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_op_REF_opT");

            entity.HasOne(d => d.OpPlIdWhsNavigation).WithMany(p => p.OperationOpPlIdWhsNavigations)
                .HasForeignKey(d => d.OpPlIdWhs)
                .HasConstraintName("FK_op_REF_WHS");

            entity.HasOne(d => d.OpPlIdWhsToNavigation).WithMany(p => p.OperationOpPlIdWhsToNavigations)
                .HasForeignKey(d => d.OpPlIdWhsTo)
                .HasConstraintName("FK_op_REF_WHS_TO");

            entity.HasOne(d => d.OpSgd).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpSgdId)
                .HasConstraintName("FK_op_REF_SGD");

            entity.HasOne(d => d.OpThps).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpThpsId)
                .HasConstraintName("FK_op_REF_THPS");

            entity.HasOne(d => d.OpTs).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpTsId)
                .HasConstraintName("FK_op_REF_TS");

            entity.HasOne(d => d.OpUmv).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpUmvId)
                .HasConstraintName("FK_op_REF_UMV");

            entity.HasOne(d => d.OpUs).WithMany(p => p.Operations)
                .HasForeignKey(d => d.OpUsId)
                .HasConstraintName("FK_op_REF_US");
        });

        modelBuilder.Entity<OperationBatch>(entity =>
        {
            entity.HasKey(e => e.OpbId).HasFillFactor(90);

            entity.ToTable("OPERATION_BATCH", "whs");

            entity.Property(e => e.OpbId).HasColumnName("opb_id");
            entity.Property(e => e.OpbBatchNb)
                .HasMaxLength(30)
                .HasColumnName("opb_batch_nb");
            entity.Property(e => e.OpbBuId).HasColumnName("opb_bu_id");
            entity.Property(e => e.OpbDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("opb_date");
            entity.Property(e => e.OpbNumber)
                .HasMaxLength(40)
                .HasColumnName("opb_number");
            entity.Property(e => e.OpbOpId).HasColumnName("opb_op_id");
            entity.Property(e => e.OpbOpsId).HasColumnName("opb_ops_id");
            entity.Property(e => e.OpbOptId).HasColumnName("opb_opt_id");
            entity.Property(e => e.OpbPlIdWhs).HasColumnName("opb_pl_id_whs");
            entity.Property(e => e.OpbPlIdWhsTo).HasColumnName("opb_pl_id_whs_to");
            entity.Property(e => e.OpbRemarks)
                .HasMaxLength(255)
                .HasColumnName("opb_remarks");
            entity.Property(e => e.OpbSeq).HasColumnName("opb_seq");
            entity.Property(e => e.OpbSync)
                .HasMaxLength(30)
                .HasColumnName("opb_sync");
            entity.Property(e => e.OpbThpsId).HasColumnName("opb_thps_id");
            entity.Property(e => e.OpbUsId).HasColumnName("opb_us_id");

            entity.HasOne(d => d.OpbBu).WithMany(p => p.OperationBatches)
                .HasForeignKey(d => d.OpbBuId)
                .HasConstraintName("FK_opb_REF_BU");

            entity.HasOne(d => d.OpbOps).WithMany(p => p.OperationBatches)
                .HasForeignKey(d => d.OpbOpsId)
                .HasConstraintName("FK_opb_REF_opS");

            entity.HasOne(d => d.OpbOpt).WithMany(p => p.OperationBatches)
                .HasForeignKey(d => d.OpbOptId)
                .HasConstraintName("FK_opb_REF_opT");

            entity.HasOne(d => d.OpbPlIdWhsNavigation).WithMany(p => p.OperationBatchOpbPlIdWhsNavigations)
                .HasForeignKey(d => d.OpbPlIdWhs)
                .HasConstraintName("FK_opb_REF_WHS");

            entity.HasOne(d => d.OpbPlIdWhsToNavigation).WithMany(p => p.OperationBatchOpbPlIdWhsToNavigations)
                .HasForeignKey(d => d.OpbPlIdWhsTo)
                .HasConstraintName("FK_opb_REF_WHS_TO");

            entity.HasOne(d => d.OpbThps).WithMany(p => p.OperationBatches)
                .HasForeignKey(d => d.OpbThpsId)
                .HasConstraintName("FK_opb_REF_THPS");

            entity.HasOne(d => d.OpbUs).WithMany(p => p.OperationBatches)
                .HasForeignKey(d => d.OpbUsId)
                .HasConstraintName("FK_opb_REF_US");
        });

        modelBuilder.Entity<OperationBatchItem>(entity =>
        {
            entity.HasKey(e => e.OpbiId).HasFillFactor(90);

            entity.ToTable("OPERATION_BATCH_ITEM", "whs");

            entity.Property(e => e.OpbiId).HasColumnName("opbi_id");
            entity.Property(e => e.OpbiItCode)
                .HasMaxLength(100)
                .HasColumnName("opbi_it_code");
            entity.Property(e => e.OpbiItId).HasColumnName("opbi_it_id");
            entity.Property(e => e.OpbiLineSequence).HasColumnName("opbi_line_sequence");
            entity.Property(e => e.OpbiOpbId).HasColumnName("opbi_opb_id");
            entity.Property(e => e.OpbiOpiId).HasColumnName("opbi_opi_id");
            entity.Property(e => e.OpbiOptoId).HasColumnName("opbi_opto_id");
            entity.Property(e => e.OpbiPlIdLoc).HasColumnName("opbi_pl_id_loc");
            entity.Property(e => e.OpbiPlIdWhs).HasColumnName("opbi_pl_id_whs");
            entity.Property(e => e.OpbiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opbi_quantity");
            entity.Property(e => e.OpbiQuantity2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opbi_quantity2");
            entity.Property(e => e.OpbiRemarks)
                .HasMaxLength(255)
                .HasColumnName("opbi_remarks");
            entity.Property(e => e.OpbiUomId).HasColumnName("opbi_uom_id");

            entity.HasOne(d => d.OpbiIt).WithMany(p => p.OperationBatchItems)
                .HasForeignKey(d => d.OpbiItId)
                .HasConstraintName("FK_opbi_REF_IT");

            entity.HasOne(d => d.OpbiOpb).WithMany(p => p.OperationBatchItems)
                .HasForeignKey(d => d.OpbiOpbId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_opbi_REF_opb");

            entity.HasOne(d => d.OpbiOpi).WithMany(p => p.OperationBatchItems)
                .HasForeignKey(d => d.OpbiOpiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_opbi_REF_opi");

            entity.HasOne(d => d.OpbiOpto).WithMany(p => p.OperationBatchItems)
                .HasForeignKey(d => d.OpbiOptoId)
                .HasConstraintName("FK_opbi_REF_OPTO");

            entity.HasOne(d => d.OpbiPlIdLocNavigation).WithMany(p => p.OperationBatchItemOpbiPlIdLocNavigations)
                .HasForeignKey(d => d.OpbiPlIdLoc)
                .HasConstraintName("FK_opbi_REF_PL_LOC");

            entity.HasOne(d => d.OpbiPlIdWhsNavigation).WithMany(p => p.OperationBatchItemOpbiPlIdWhsNavigations)
                .HasForeignKey(d => d.OpbiPlIdWhs)
                .HasConstraintName("FK_opbi_REF_PL_WHS");

            entity.HasOne(d => d.OpbiUom).WithMany(p => p.OperationBatchItems)
                .HasForeignKey(d => d.OpbiUomId)
                .HasConstraintName("FK_opbi_REF_UOM");
        });

        modelBuilder.Entity<OperationBatchItemDetail>(entity =>
        {
            entity.HasKey(e => e.OpbidId).HasFillFactor(90);

            entity.ToTable("OPERATION_BATCH_ITEM_DETAIL", "whs");

            entity.Property(e => e.OpbidId).HasColumnName("opbid_id");
            entity.Property(e => e.OpbidExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("opbid_expiry_date");
            entity.Property(e => e.OpbidIldId).HasColumnName("opbid_ild_id");
            entity.Property(e => e.OpbidLotSerial)
                .HasMaxLength(64)
                .HasColumnName("opbid_lot_serial");
            entity.Property(e => e.OpbidOpbiId).HasColumnName("opbid_opbi_id");
            entity.Property(e => e.OpbidOpidId).HasColumnName("opbid_opid_id");
            entity.Property(e => e.OpbidPlIdLoc).HasColumnName("opbid_pl_id_loc");
            entity.Property(e => e.OpbidPlIdWhs).HasColumnName("opbid_pl_id_whs");
            entity.Property(e => e.OpbidProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("opbid_production_date");
            entity.Property(e => e.OpbidQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opbid_quantity");
            entity.Property(e => e.OpbidQuantity2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opbid_quantity2");

            entity.HasOne(d => d.OpbidOpbi).WithMany(p => p.OperationBatchItemDetails)
                .HasForeignKey(d => d.OpbidOpbiId)
                .HasConstraintName("FK_OPbID_REF_OPbI");

            entity.HasOne(d => d.OpbidOpid).WithMany(p => p.OperationBatchItemDetails)
                .HasForeignKey(d => d.OpbidOpidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPbID_REF_OPId");

            entity.HasOne(d => d.OpbidPlIdLocNavigation).WithMany(p => p.OperationBatchItemDetailOpbidPlIdLocNavigations)
                .HasForeignKey(d => d.OpbidPlIdLoc)
                .HasConstraintName("FK_opbid_REF_PL_LOC");

            entity.HasOne(d => d.OpbidPlIdWhsNavigation).WithMany(p => p.OperationBatchItemDetailOpbidPlIdWhsNavigations)
                .HasForeignKey(d => d.OpbidPlIdWhs)
                .HasConstraintName("FK_opbid_REF_PL_WHS");
        });

        modelBuilder.Entity<OperationItem>(entity =>
        {
            entity.HasKey(e => e.OpiId).HasFillFactor(90);

            entity.ToTable("OPERATION_ITEM", "whs");

            entity.Property(e => e.OpiId).HasColumnName("opi_id");
            entity.Property(e => e.OpiCdIdRett).HasColumnName("opi_cd_id_rett");
            entity.Property(e => e.OpiCostPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_cost_price");
            entity.Property(e => e.OpiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_discount_amount");
            entity.Property(e => e.OpiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_discount_percentage");
            entity.Property(e => e.OpiItId).HasColumnName("opi_it_id");
            entity.Property(e => e.OpiLineSequence).HasColumnName("opi_line_sequence");
            entity.Property(e => e.OpiLpId).HasColumnName("opi_lp_id");
            entity.Property(e => e.OpiOpId).HasColumnName("opi_op_id");
            entity.Property(e => e.OpiOpOrgId).HasColumnName("opi_op_org_id");
            entity.Property(e => e.OpiOpiId).HasColumnName("opi_opi_id");
            entity.Property(e => e.OpiOptoId).HasColumnName("opi_opto_id");
            entity.Property(e => e.OpiOrgId).HasColumnName("opi_org_id");
            entity.Property(e => e.OpiPicked)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_picked");
            entity.Property(e => e.OpiPlIdLoc).HasColumnName("opi_pl_id_loc");
            entity.Property(e => e.OpiPlIdWhs).HasColumnName("opi_pl_id_whs");
            entity.Property(e => e.OpiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_price");
            entity.Property(e => e.OpiPriceChanged).HasColumnName("opi_price_changed");
            entity.Property(e => e.OpiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_quantity");
            entity.Property(e => e.OpiRemarks)
                .HasMaxLength(255)
                .HasColumnName("opi_remarks");
            entity.Property(e => e.OpiTotalAmount)
                .HasComputedColumnSql("(([opi_price]*[opi_quantity])*((1)-[opi_discount_percentage]/(100))+[opi_total_tax])", false)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("opi_total_amount");
            entity.Property(e => e.OpiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_total_amount_bc");
            entity.Property(e => e.OpiTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_total_discount");
            entity.Property(e => e.OpiTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_total_discount_bc");
            entity.Property(e => e.OpiTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_total_tax");
            entity.Property(e => e.OpiTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opi_total_tax_bc");
            entity.Property(e => e.OpiUomId).HasColumnName("opi_uom_id");

            entity.HasOne(d => d.OpiIt).WithMany(p => p.OperationItems)
                .HasForeignKey(d => d.OpiItId)
                .HasConstraintName("FK_opi_REF_IT");

            entity.HasOne(d => d.OpiLp).WithMany(p => p.OperationItems)
                .HasForeignKey(d => d.OpiLpId)
                .HasConstraintName("FK_opi_REF_LP");

            entity.HasOne(d => d.OpiOp).WithMany(p => p.OperationItems)
                .HasForeignKey(d => d.OpiOpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_opi_REF_op");

            entity.HasOne(d => d.OpiOpi).WithMany(p => p.InverseOpiOpi)
                .HasForeignKey(d => d.OpiOpiId)
                .HasConstraintName("FK_opi_REF_opi");

            entity.HasOne(d => d.OpiOpto).WithMany(p => p.OperationItems)
                .HasForeignKey(d => d.OpiOptoId)
                .HasConstraintName("FK_opi_REF_OPTO");

            entity.HasOne(d => d.OpiPlIdLocNavigation).WithMany(p => p.OperationItemOpiPlIdLocNavigations)
                .HasForeignKey(d => d.OpiPlIdLoc)
                .HasConstraintName("FK_opi_REF_PL_LOC");

            entity.HasOne(d => d.OpiPlIdWhsNavigation).WithMany(p => p.OperationItemOpiPlIdWhsNavigations)
                .HasForeignKey(d => d.OpiPlIdWhs)
                .HasConstraintName("FK_opi_REF_PL_WHS");

            entity.HasOne(d => d.OpiUom).WithMany(p => p.OperationItems)
                .HasForeignKey(d => d.OpiUomId)
                .HasConstraintName("FK_opi_REF_UOM");
        });

        modelBuilder.Entity<OperationItemDetail>(entity =>
        {
            entity.HasKey(e => e.OpidId).HasFillFactor(90);

            entity.ToTable("OPERATION_ITEM_DETAIL", "whs");

            entity.Property(e => e.OpidId).HasColumnName("opid_id");
            entity.Property(e => e.OpidIldId).HasColumnName("opid_ild_id");
            entity.Property(e => e.OpidOpiId).HasColumnName("opid_opi_id");
            entity.Property(e => e.OpidOrgId).HasColumnName("opid_org_id");
            entity.Property(e => e.OpidPlIdLoc).HasColumnName("opid_pl_id_loc");
            entity.Property(e => e.OpidPlIdWhs).HasColumnName("opid_pl_id_whs");
            entity.Property(e => e.OpidQuantity)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opid_quantity");
            entity.Property(e => e.OpidQuantity2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("opid_quantity2");

            entity.HasOne(d => d.OpidOpi).WithMany(p => p.OperationItemDetails)
                .HasForeignKey(d => d.OpidOpiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OPID_REF_OPI");

            entity.HasOne(d => d.OpidPlIdLocNavigation).WithMany(p => p.OperationItemDetailOpidPlIdLocNavigations)
                .HasForeignKey(d => d.OpidPlIdLoc)
                .HasConstraintName("FK_opid_REF_PL_LOC");

            entity.HasOne(d => d.OpidPlIdWhsNavigation).WithMany(p => p.OperationItemDetailOpidPlIdWhsNavigations)
                .HasForeignKey(d => d.OpidPlIdWhs)
                .HasConstraintName("FK_opid_REF_PL_WHS");
        });

        modelBuilder.Entity<OperationPackaging>(entity =>
        {
            entity.HasKey(e => e.OppId).HasFillFactor(90);

            entity.ToTable("OPERATION_PACKAGING", "whs");

            entity.Property(e => e.OppId).HasColumnName("opp_id");
            entity.Property(e => e.OpQuantity).HasColumnName("op_quantity");
            entity.Property(e => e.OppOpId).HasColumnName("opp_op_id");
            entity.Property(e => e.OppOpbId).HasColumnName("opp_opb_id");
            entity.Property(e => e.OppPckId).HasColumnName("opp_pck_id");

            entity.HasOne(d => d.OppOp).WithMany(p => p.OperationPackagings)
                .HasForeignKey(d => d.OppOpId)
                .HasConstraintName("FK_opp_REF_op");

            entity.HasOne(d => d.OppOpb).WithMany(p => p.OperationPackagings)
                .HasForeignKey(d => d.OppOpbId)
                .HasConstraintName("FK_opp_REF_opb");

            entity.HasOne(d => d.OppPck).WithMany(p => p.OperationPackagings)
                .HasForeignKey(d => d.OppPckId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_opp_REF_pck");
        });

        modelBuilder.Entity<OperationTransaction>(entity =>
        {
            entity.HasKey(e => e.OptId).HasFillFactor(90);

            entity.ToTable("OPERATION_TRANSACTION", "whs");

            entity.Property(e => e.OptId).HasColumnName("opt_id");
            entity.Property(e => e.OptDate)
                .HasColumnType("datetime")
                .HasColumnName("opt_date");
            entity.Property(e => e.OptItId).HasColumnName("opt_it_id");
            entity.Property(e => e.OptOperation)
                .HasMaxLength(50)
                .HasColumnName("opt_operation");
            entity.Property(e => e.OptOperationref1)
                .HasMaxLength(50)
                .HasColumnName("opt_operationref1");
            entity.Property(e => e.OptOperationref2)
                .HasMaxLength(50)
                .HasColumnName("opt_operationref2");
            entity.Property(e => e.OptQty)
                .HasColumnType("numeric(12, 3)")
                .HasColumnName("opt_qty");
            entity.Property(e => e.OptSync)
                .HasMaxLength(50)
                .HasColumnName("opt_sync");
            entity.Property(e => e.OptUsId).HasColumnName("opt_us_id");
            entity.Property(e => e.OptWhlIdFrom).HasColumnName("opt_whl_id_from");
            entity.Property(e => e.OptWhlIdTo).HasColumnName("opt_whl_id_to");
        });

        modelBuilder.Entity<Operationstatus>(entity =>
        {
            entity.HasKey(e => e.OpsId).HasFillFactor(90);

            entity.ToTable("OPERATIONSTATUS", "whs");

            entity.Property(e => e.OpsId).HasColumnName("ops_id");
            entity.Property(e => e.OpsCausesValidation)
                .HasDefaultValue((short)1)
                .HasColumnName("ops_causes_validation");
            entity.Property(e => e.OpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ops_code");
            entity.Property(e => e.OpsConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ops_confirmation_code");
            entity.Property(e => e.OpsDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("ops_description_lan1");
            entity.Property(e => e.OpsDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("ops_description_lan2");
            entity.Property(e => e.OpsDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("ops_description_lan3");
            entity.Property(e => e.OpsLabelCode)
                .HasMaxLength(64)
                .HasColumnName("ops_label_code");
            entity.Property(e => e.OpsOrder)
                .HasDefaultValue(1)
                .HasColumnName("ops_order");
            entity.Property(e => e.OpsStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ops_style");
        });

        modelBuilder.Entity<Operationtype>(entity =>
        {
            entity.HasKey(e => e.OptId).HasFillFactor(90);

            entity.ToTable("OPERATIONTYPE", "whs");

            entity.Property(e => e.OptId).HasColumnName("opt_id");
            entity.Property(e => e.OptCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("opt_code");
            entity.Property(e => e.OptDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("opt_description_lan1");
            entity.Property(e => e.OptDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("opt_description_lan2");
            entity.Property(e => e.OptDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("opt_description_lan3");
            entity.Property(e => e.OptManageLot).HasColumnName("opt_manage_lot");
            entity.Property(e => e.OptManageSerial).HasColumnName("opt_manage_serial");
            entity.Property(e => e.OptNameLan1)
                .HasMaxLength(50)
                .HasColumnName("opt_name_lan1");
            entity.Property(e => e.OptNameLan2)
                .HasMaxLength(50)
                .HasColumnName("opt_name_lan2");
            entity.Property(e => e.OptNameLan3)
                .HasMaxLength(50)
                .HasColumnName("opt_name_lan3");
            entity.Property(e => e.OptNotes)
                .HasMaxLength(50)
                .HasColumnName("opt_notes");
            entity.Property(e => e.OptShowPrice).HasColumnName("opt_show_price");
        });

        modelBuilder.Entity<OperationtypeOption>(entity =>
        {
            entity.HasKey(e => e.OptoId).HasFillFactor(90);

            entity.ToTable("OPERATIONTYPE_OPTION", "whs");

            entity.Property(e => e.OptoId).HasColumnName("opto_id");
            entity.Property(e => e.OptoCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("opto_code");
            entity.Property(e => e.OptoDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("opto_description_lan1");
            entity.Property(e => e.OptoDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("opto_description_lan2");
            entity.Property(e => e.OptoDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("opto_description_lan3");
            entity.Property(e => e.OptoManageLot).HasColumnName("opto_manage_lot");
            entity.Property(e => e.OptoManageSerial).HasColumnName("opto_manage_serial");
            entity.Property(e => e.OptoOptId).HasColumnName("opto_opt_id");
            entity.Property(e => e.OptoShowPrice).HasColumnName("opto_show_price");

            entity.HasOne(d => d.OptoOpt).WithMany(p => p.OperationtypeOptions)
                .HasForeignKey(d => d.OptoOptId)
                .HasConstraintName("FK_opto_REF_OPT");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PckId).HasFillFactor(90);

            entity.ToTable("PACKAGE", "cmn");

            entity.Property(e => e.PckId).HasColumnName("pck_id");
            entity.Property(e => e.PckArea)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_area");
            entity.Property(e => e.PckBarcode)
                .HasMaxLength(128)
                .HasColumnName("pck_barcode");
            entity.Property(e => e.PckCdIdPckt).HasColumnName("pck_cd_id_pckt");
            entity.Property(e => e.PckCode)
                .HasMaxLength(32)
                .HasColumnName("pck_code");
            entity.Property(e => e.PckCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("pck_creation_date");
            entity.Property(e => e.PckDepth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_depth");
            entity.Property(e => e.PckDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pck_description_lan1");
            entity.Property(e => e.PckDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pck_description_lan2");
            entity.Property(e => e.PckDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pck_description_lan3");
            entity.Property(e => e.PckHeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_height");
            entity.Property(e => e.PckPckId).HasColumnName("pck_pck_id");
            entity.Property(e => e.PckUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("pck_update_date");
            entity.Property(e => e.PckUsIdCr).HasColumnName("pck_us_id_cr");
            entity.Property(e => e.PckUsIdUp).HasColumnName("pck_us_id_up");
            entity.Property(e => e.PckVolume)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_volume");
            entity.Property(e => e.PckWeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_weight");
            entity.Property(e => e.PckWidth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pck_width");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaId).HasFillFactor(90);

            entity.ToTable("PAYMENT", "sls");

            entity.HasIndex(e => new { e.PaUsId, e.PaBuId, e.PaNumber }, "idx_pa_us_bu_number_cd_id_pat")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.PaCdIdPat, e.PaUsId, e.PaBuId, e.PaNumber }, "idx_us_bu_number_cd_id_pat").HasFillFactor(90);

            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.PaApproved).HasColumnName("pa_approved");
            entity.Property(e => e.PaBuId).HasColumnName("pa_bu_id");
            entity.Property(e => e.PaCdIdCur).HasColumnName("pa_cd_id_cur");
            entity.Property(e => e.PaCdIdPat).HasColumnName("pa_cd_id_pat");
            entity.Property(e => e.PaCdIdSrc).HasColumnName("pa_cd_id_src");
            entity.Property(e => e.PaCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("pa_create_date");
            entity.Property(e => e.PaDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_date");
            entity.Property(e => e.PaJournalno)
                .HasMaxLength(255)
                .HasColumnName("pa_journalno");
            entity.Property(e => e.PaLinenumber).HasColumnName("pa_linenumber");
            entity.Property(e => e.PaModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_modified_date");
            entity.Property(e => e.PaMvId).HasColumnName("pa_mv_id");
            entity.Property(e => e.PaNumber)
                .HasMaxLength(16)
                .HasColumnName("pa_number");
            entity.Property(e => e.PaOrgId).HasColumnName("pa_org_id");
            entity.Property(e => e.PaPssId).HasColumnName("pa_pss_id");
            entity.Property(e => e.PaPyId).HasColumnName("pa_py_id");
            entity.Property(e => e.PaRemarks)
                .HasMaxLength(255)
                .HasColumnName("pa_remarks");
            entity.Property(e => e.PaRoundAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_round_amount");
            entity.Property(e => e.PaSgdId).HasColumnName("pa_sgd_id");
            entity.Property(e => e.PaThpsId).HasColumnName("pa_thps_id");
            entity.Property(e => e.PaTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_total_amount");
            entity.Property(e => e.PaTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_total_amount_bc");
            entity.Property(e => e.PaUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("pa_uid");
            entity.Property(e => e.PaUsId).HasColumnName("pa_us_id");
            entity.Property(e => e.PaVoid)
                .HasDefaultValue((short)-1)
                .HasColumnName("pa_void");
            entity.Property(e => e.PaVtId).HasColumnName("pa_vt_id");

            entity.HasOne(d => d.PaBu).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaBuId)
                .HasConstraintName("FK_PA_REF_BU");

            entity.HasOne(d => d.PaCdIdCurNavigation).WithMany(p => p.PaymentPaCdIdCurNavigations)
                .HasForeignKey(d => d.PaCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PA_REF_CD_CUR");

            entity.HasOne(d => d.PaCdIdPatNavigation).WithMany(p => p.PaymentPaCdIdPatNavigations)
                .HasForeignKey(d => d.PaCdIdPat)
                .HasConstraintName("FK_PA_REF_CD_PAT");

            entity.HasOne(d => d.PaCdIdSrcNavigation).WithMany(p => p.PaymentPaCdIdSrcNavigations)
                .HasForeignKey(d => d.PaCdIdSrc)
                .HasConstraintName("FK_PA_REF_CD_SRC");

            entity.HasOne(d => d.PaMv).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaMvId)
                .HasConstraintName("FK_PA_REF_MV");

            entity.HasOne(d => d.PaThps).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaThpsId)
                .HasConstraintName("FK_PAYMENT_THIRDPARTY_SITE");

            entity.HasOne(d => d.PaUs).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaUsId)
                .HasConstraintName("FK_PA_REF_US");

            entity.HasOne(d => d.PaVt).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaVtId)
                .HasConstraintName("FK_PA_REF_Vt");
        });

        modelBuilder.Entity<PaymentDetail>(entity =>
        {
            entity.HasKey(e => e.PadId)
                .HasName("PK_PAYMENT_DETAILS")
                .HasFillFactor(90);

            entity.ToTable("PAYMENT_DETAIL", "sls");

            entity.HasIndex(e => e.PadPaId, "pad_pa_id_idx").HasFillFactor(90);

            entity.Property(e => e.PadId).HasColumnName("pad_id");
            entity.Property(e => e.PadAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_amount");
            entity.Property(e => e.PadAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_amount_bc");
            entity.Property(e => e.PadBuId).HasColumnName("pad_bu_id");
            entity.Property(e => e.PadCcDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("pad_cc_date");
            entity.Property(e => e.PadCcName)
                .HasMaxLength(70)
                .HasColumnName("pad_cc_name");
            entity.Property(e => e.PadCcNumber)
                .HasMaxLength(16)
                .HasColumnName("pad_cc_number");
            entity.Property(e => e.PadCdIdBnk).HasColumnName("pad_cd_id_bnk");
            entity.Property(e => e.PadCdIdCct).HasColumnName("pad_cd_id_cct");
            entity.Property(e => e.PadCdIdCur).HasColumnName("pad_cd_id_cur");
            entity.Property(e => e.PadCdIdPam).HasColumnName("pad_cd_id_pam");
            entity.Property(e => e.PadCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("pad_create_date");
            entity.Property(e => e.PadCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_cur_rate");
            entity.Property(e => e.PadInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_inv_cur_rate");
            entity.Property(e => e.PadIsCreditcard)
                .HasDefaultValue(0)
                .HasColumnName("pad_is_creditcard");
            entity.Property(e => e.PadJournalno)
                .HasMaxLength(255)
                .HasColumnName("pad_journalno");
            entity.Property(e => e.PadLineSequence).HasColumnName("pad_line_sequence");
            entity.Property(e => e.PadLinenumber).HasColumnName("pad_linenumber");
            entity.Property(e => e.PadModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("pad_modified_date");
            entity.Property(e => e.PadOrgId).HasColumnName("pad_org_id");
            entity.Property(e => e.PadPaId).HasColumnName("pad_pa_id");
            entity.Property(e => e.PadPaOrgId).HasColumnName("pad_pa_org_id");

            entity.HasOne(d => d.PadBu).WithMany(p => p.PaymentDetails)
                .HasForeignKey(d => d.PadBuId)
                .HasConstraintName("FK_PAD__REF_BU");

            entity.HasOne(d => d.PadCdIdBnkNavigation).WithMany(p => p.PaymentDetailPadCdIdBnkNavigations)
                .HasForeignKey(d => d.PadCdIdBnk)
                .HasConstraintName("FK_PAY__REF_CDBNK");

            entity.HasOne(d => d.PadCdIdCctNavigation).WithMany(p => p.PaymentDetailPadCdIdCctNavigations)
                .HasForeignKey(d => d.PadCdIdCct)
                .HasConstraintName("FK_PAD__REF_CD_CCT");

            entity.HasOne(d => d.PadCdIdCurNavigation).WithMany(p => p.PaymentDetailPadCdIdCurNavigations)
                .HasForeignKey(d => d.PadCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAD__REF_CD_CUR");

            entity.HasOne(d => d.PadCdIdPamNavigation).WithMany(p => p.PaymentDetailPadCdIdPamNavigations)
                .HasForeignKey(d => d.PadCdIdPam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAD__REF_CDPAM");

            entity.HasOne(d => d.PadPa).WithMany(p => p.PaymentDetails)
                .HasForeignKey(d => d.PadPaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PA_REF_PAD");
        });

        modelBuilder.Entity<PaymentDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPadId, e.SPadSmId, e.SPadVersion }).HasFillFactor(90);

            entity.ToTable("PAYMENT_DETAILS_SNC", "syn");

            entity.Property(e => e.SPadId).HasColumnName("s_pad_id");
            entity.Property(e => e.SPadSmId).HasColumnName("s_pad_sm_id");
            entity.Property(e => e.SPadVersion)
                .HasMaxLength(25)
                .HasColumnName("s_pad_version");
            entity.Property(e => e.SPadAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_pad_amount");
            entity.Property(e => e.SPadCdIdBnk).HasColumnName("s_pad_cd_id_bnk");
            entity.Property(e => e.SPadCdIdCur).HasColumnName("s_pad_cd_id_cur");
            entity.Property(e => e.SPadChkDate)
                .HasMaxLength(10)
                .HasColumnName("s_pad_chk_date");
            entity.Property(e => e.SPadChkNum)
                .HasMaxLength(16)
                .HasColumnName("s_pad_chk_num");
            entity.Property(e => e.SPadComments)
                .HasMaxLength(255)
                .HasColumnName("s_pad_comments");
            entity.Property(e => e.SPadCurRate)
                .HasMaxLength(255)
                .HasColumnName("s_pad_cur_rate");
            entity.Property(e => e.SPadIsCreated).HasColumnName("s_pad_is_created");
            entity.Property(e => e.SPadPaId).HasColumnName("s_pad_pa_id");
            entity.Property(e => e.SPadPaUid)
                .HasMaxLength(128)
                .HasColumnName("s_pad_pa_uid");
            entity.Property(e => e.SPadSynched).HasColumnName("s_pad_synched");
            entity.Property(e => e.SPadType)
                .HasMaxLength(8)
                .HasColumnName("s_pad_type");
        });

        modelBuilder.Entity<PaymentHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("payment_hist");

            entity.Property(e => e.PaBuId).HasColumnName("pa_bu_id");
            entity.Property(e => e.PhBeId).HasColumnName("ph_be_id");
            entity.Property(e => e.PhCdIdCur).HasColumnName("ph_cd_id_cur");
            entity.Property(e => e.PhCdIdPat).HasColumnName("ph_cd_id_pat");
            entity.Property(e => e.PhCuId).HasColumnName("ph_cu_id");
            entity.Property(e => e.PhCurSymb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ph_cur_symb");
            entity.Property(e => e.PhDate)
                .HasMaxLength(30)
                .HasColumnName("ph_date");
            entity.Property(e => e.PhDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ph_datetime");
            entity.Property(e => e.PhDocNo)
                .HasMaxLength(16)
                .HasColumnName("ph_doc_no");
            entity.Property(e => e.PhReference)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ph_reference");
            entity.Property(e => e.PhRoundAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ph_round_amt");
            entity.Property(e => e.PhSignFilename)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ph_sign_filename");
            entity.Property(e => e.PhSmId).HasColumnName("ph_sm_id");
            entity.Property(e => e.PhTotalAmount)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ph_total_amount");
            entity.Property(e => e.PhUtId).HasColumnName("ph_ut_id");
            entity.Property(e => e.Pk).HasColumnName("pk");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PAYMENT_HISTORY", "mforce");

            entity.Property(e => e.PhBeId).HasColumnName("ph_be_id");
            entity.Property(e => e.PhCdIdCur).HasColumnName("ph_cd_id_cur");
            entity.Property(e => e.PhCdIdPat).HasColumnName("ph_cd_id_pat");
            entity.Property(e => e.PhCuId).HasColumnName("ph_cu_id");
            entity.Property(e => e.PhCurSymb)
                .HasMaxLength(8)
                .HasColumnName("ph_cur_symb");
            entity.Property(e => e.PhDate)
                .HasMaxLength(10)
                .HasComputedColumnSql("(CONVERT([nvarchar](10),[ph_datetime],(120)))", false)
                .HasColumnName("ph_date");
            entity.Property(e => e.PhDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ph_datetime");
            entity.Property(e => e.PhDocNo)
                .HasMaxLength(16)
                .HasColumnName("ph_doc_no");
            entity.Property(e => e.PhFeId).HasColumnName("ph_fe_id");
            entity.Property(e => e.PhId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ph_id");
            entity.Property(e => e.PhReference)
                .HasMaxLength(32)
                .HasColumnName("ph_reference");
            entity.Property(e => e.PhRoundAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ph_round_amt");
            entity.Property(e => e.PhSignFilename)
                .HasMaxLength(32)
                .HasColumnName("ph_sign_filename");
            entity.Property(e => e.PhSmId).HasColumnName("ph_sm_id");
            entity.Property(e => e.PhTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ph_total_amount");
            entity.Property(e => e.PhUtId).HasColumnName("ph_ut_id");
        });

        modelBuilder.Entity<PaymentImage>(entity =>
        {
            entity.HasKey(e => e.PaimId).HasFillFactor(90);

            entity.ToTable("PAYMENT_IMAGES", "sls");

            entity.Property(e => e.PaimId).HasColumnName("paim_id");
            entity.Property(e => e.PaimCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("paim_creation_date");
            entity.Property(e => e.PaimImage)
                .HasMaxLength(256)
                .HasColumnName("paim_image");
            entity.Property(e => e.PaimOrder).HasColumnName("paim_order");
            entity.Property(e => e.PaimOrgId).HasColumnName("paim_org_id");
            entity.Property(e => e.PaimPaId).HasColumnName("paim_pa_id");

            entity.HasOne(d => d.PaimPa).WithMany(p => p.PaymentImages)
                .HasForeignKey(d => d.PaimPaId)
                .HasConstraintName("FK_PAIM_REF_PA");
        });

        modelBuilder.Entity<PaymentImagesSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPaimId, e.SPaimUsId, e.SPaimVersion })
                .HasName("PK_PAYMENT_IMAGES")
                .HasFillFactor(90);

            entity.ToTable("PAYMENT_IMAGES_SNC", "syn");

            entity.Property(e => e.SPaimId).HasColumnName("s_paim_id");
            entity.Property(e => e.SPaimUsId).HasColumnName("s_paim_us_id");
            entity.Property(e => e.SPaimVersion)
                .HasMaxLength(64)
                .HasColumnName("s_paim_version");
            entity.Property(e => e.SPaimCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_paim_creation_date");
            entity.Property(e => e.SPaimImage)
                .HasMaxLength(256)
                .HasColumnName("s_paim_image");
            entity.Property(e => e.SPaimOrder).HasColumnName("s_paim_order");
            entity.Property(e => e.SPaimPaId).HasColumnName("s_paim_pa_id");
            entity.Property(e => e.SPaimPaUid)
                .HasMaxLength(128)
                .HasColumnName("s_paim_pa_uid");
            entity.Property(e => e.SPaimSynched).HasColumnName("s_paim_synched");
        });

        modelBuilder.Entity<PaymentInvoice>(entity =>
        {
            entity.HasKey(e => e.PaiId)
                .HasName("PK_PAYMENT_TRANS")
                .HasFillFactor(90);

            entity.ToTable("PAYMENT_INVOICE", "sls");

            entity.HasIndex(e => e.PaiDiId, "pat_dt_idx").HasFillFactor(90);

            entity.HasIndex(e => e.PaiPaId, "pat_pa_idx").HasFillFactor(90);

            entity.Property(e => e.PaiId).HasColumnName("pai_id");
            entity.Property(e => e.PaiAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pai_amount");
            entity.Property(e => e.PaiAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pai_amount_bc");
            entity.Property(e => e.PaiAmountToErp)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pai_amount_to_erp");
            entity.Property(e => e.PaiCdIdCur).HasColumnName("pai_cd_id_cur");
            entity.Property(e => e.PaiCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pai_create_date");
            entity.Property(e => e.PaiDiId).HasColumnName("pai_di_id");
            entity.Property(e => e.PaiModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pai_modified_date");
            entity.Property(e => e.PaiOrgId).HasColumnName("pai_org_id");
            entity.Property(e => e.PaiPaId).HasColumnName("pai_pa_id");
            entity.Property(e => e.PaiPaOrgId).HasColumnName("pai_pa_org_id");

            entity.HasOne(d => d.PaiCdIdCurNavigation).WithMany(p => p.PaymentInvoices)
                .HasForeignKey(d => d.PaiCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAT_REF_CD_CUR");

            entity.HasOne(d => d.PaiDi).WithMany(p => p.PaymentInvoices)
                .HasForeignKey(d => d.PaiDiId)
                .HasConstraintName("FK_PAT_REF_DI");

            entity.HasOne(d => d.PaiPa).WithMany(p => p.PaymentInvoices)
                .HasForeignKey(d => d.PaiPaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PA_REF_PAT");
        });

        modelBuilder.Entity<PaymentSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPaId, e.SPaSmId, e.SPaVersion }).HasFillFactor(90);

            entity.ToTable("PAYMENT_SNC", "syn");

            entity.Property(e => e.SPaId).HasColumnName("s_pa_id");
            entity.Property(e => e.SPaSmId).HasColumnName("s_pa_sm_id");
            entity.Property(e => e.SPaVersion)
                .HasMaxLength(25)
                .HasColumnName("s_pa_version");
            entity.Property(e => e.SPaCdIdCur).HasColumnName("s_pa_cd_id_cur");
            entity.Property(e => e.SPaCurSymb)
                .HasMaxLength(8)
                .HasColumnName("s_pa_cur_symb");
            entity.Property(e => e.SPaDate)
                .HasMaxLength(10)
                .HasColumnName("s_pa_date");
            entity.Property(e => e.SPaDocNo)
                .HasMaxLength(16)
                .HasColumnName("s_pa_doc_no");
            entity.Property(e => e.SPaFeId).HasColumnName("s_pa_fe_id");
            entity.Property(e => e.SPaIsCreated).HasColumnName("s_pa_is_created");
            entity.Property(e => e.SPaRoundAmt)
                .HasMaxLength(255)
                .HasColumnName("s_pa_round_amt");
            entity.Property(e => e.SPaSignFilename)
                .HasMaxLength(32)
                .HasColumnName("s_pa_sign_filename");
            entity.Property(e => e.SPaSoId).HasColumnName("s_pa_so_id");
            entity.Property(e => e.SPaSynched).HasColumnName("s_pa_synched");
            entity.Property(e => e.SPaTotalAmount)
                .HasMaxLength(255)
                .HasColumnName("s_pa_total_amount");
            entity.Property(e => e.SPaUid)
                .HasMaxLength(128)
                .HasColumnName("s_pa_uid");
            entity.Property(e => e.SPaVoided).HasColumnName("s_pa_voided");
            entity.Property(e => e.SPaVtId).HasColumnName("s_pa_vt_id");
            entity.Property(e => e.SPaVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_pa_vt_uid");
            entity.Property(e => e.SPaYyyy).HasColumnName("s_pa_yyyy");
            entity.Property(e => e.SPaYyyymm).HasColumnName("s_pa_yyyymm");
        });

        modelBuilder.Entity<PaymentStatusHistory>(entity =>
        {
            entity.HasKey(e => e.PashId).HasFillFactor(90);

            entity.ToTable("PAYMENT_STATUS_HISTORY", "sls");

            entity.Property(e => e.PashId).HasColumnName("pash_id");
            entity.Property(e => e.PashComment)
                .HasMaxLength(255)
                .HasColumnName("pash_comment");
            entity.Property(e => e.PashDate)
                .HasColumnType("datetime")
                .HasColumnName("pash_date");
            entity.Property(e => e.PashPaId).HasColumnName("pash_pa_id");
            entity.Property(e => e.PashPssId).HasColumnName("pash_pss_id");
            entity.Property(e => e.PashUsId).HasColumnName("pash_us_id");

            entity.HasOne(d => d.PashPa).WithMany(p => p.PaymentStatusHistories)
                .HasForeignKey(d => d.PashPaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PASH_REF_PA");

            entity.HasOne(d => d.PashPss).WithMany(p => p.PaymentStatusHistories)
                .HasForeignKey(d => d.PashPssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PASH_REF_PSS");

            entity.HasOne(d => d.PashUs).WithMany(p => p.PaymentStatusHistories)
                .HasForeignKey(d => d.PashUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PASH_REF_US");
        });

        modelBuilder.Entity<PaymentTransHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("payment_trans_hist");

            entity.Property(e => e.PthAmount)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pth_amount");
            entity.Property(e => e.PthBeId).HasColumnName("pth_be_id");
            entity.Property(e => e.PthCdIdCur).HasColumnName("pth_cd_id_cur");
            entity.Property(e => e.PthDocno)
                .HasMaxLength(32)
                .HasColumnName("pth_docno");
            entity.Property(e => e.PthDtTransNo)
                .HasMaxLength(32)
                .HasColumnName("pth_dt_trans_no");
            entity.Property(e => e.PthId).HasColumnName("pth_id");
            entity.Property(e => e.PthPaDocno)
                .HasMaxLength(16)
                .HasColumnName("pth_pa_docno");
            entity.Property(e => e.PthPhId).HasColumnName("pth_ph_id");
        });

        modelBuilder.Entity<PaymentTransHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PAYMENT_TRANS_HISTORY", "mforce");

            entity.Property(e => e.PthAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pth_amount");
            entity.Property(e => e.PthBeId).HasColumnName("pth_be_id");
            entity.Property(e => e.PthCdIdCur).HasColumnName("pth_cd_id_cur");
            entity.Property(e => e.PthDocno)
                .HasMaxLength(32)
                .HasColumnName("pth_docno");
            entity.Property(e => e.PthDtTransNo)
                .HasMaxLength(32)
                .HasColumnName("pth_dt_trans_no");
            entity.Property(e => e.PthId)
                .ValueGeneratedOnAdd()
                .HasColumnName("pth_id");
            entity.Property(e => e.PthPaDocno)
                .HasMaxLength(32)
                .HasColumnName("pth_pa_docno");
            entity.Property(e => e.PthPhId).HasColumnName("pth_ph_id");
        });

        modelBuilder.Entity<PaymentTransSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPatId, e.SPatSmId, e.SPatVersion }).HasFillFactor(90);

            entity.ToTable("PAYMENT_TRANS_SNC", "syn");

            entity.Property(e => e.SPatId).HasColumnName("s_pat_id");
            entity.Property(e => e.SPatSmId).HasColumnName("s_pat_sm_id");
            entity.Property(e => e.SPatVersion)
                .HasMaxLength(25)
                .HasColumnName("s_pat_version");
            entity.Property(e => e.SPatAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_pat_amount");
            entity.Property(e => e.SPatCdIdCur).HasColumnName("s_pat_cd_id_cur");
            entity.Property(e => e.SPatDocno)
                .HasMaxLength(32)
                .HasColumnName("s_pat_docno");
            entity.Property(e => e.SPatDtId).HasColumnName("s_pat_dt_id");
            entity.Property(e => e.SPatDtTransNo)
                .HasMaxLength(32)
                .HasColumnName("s_pat_dt_trans_no");
            entity.Property(e => e.SPatDtUid)
                .HasMaxLength(128)
                .HasColumnName("s_pat_dt_uid");
            entity.Property(e => e.SPatIsCreated).HasColumnName("s_pat_is_created");
            entity.Property(e => e.SPatIsModified).HasColumnName("s_pat_is_modified");
            entity.Property(e => e.SPatPaDocno)
                .HasMaxLength(32)
                .HasColumnName("s_pat_pa_docno");
            entity.Property(e => e.SPatPaId).HasColumnName("s_pat_pa_id");
            entity.Property(e => e.SPatPaUid)
                .HasMaxLength(128)
                .HasColumnName("s_pat_pa_uid");
            entity.Property(e => e.SPatSoId).HasColumnName("s_pat_so_id");
            entity.Property(e => e.SPatSoUid)
                .HasMaxLength(128)
                .HasColumnName("s_pat_so_uid");
            entity.Property(e => e.SPatSynched).HasColumnName("s_pat_synched");
        });

        modelBuilder.Entity<Paymentstatus>(entity =>
        {
            entity.HasKey(e => e.PssId).HasFillFactor(90);

            entity.ToTable("PAYMENTSTATUS", "sls");

            entity.HasIndex(e => e.PssCode, "idx_pss_code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PssId).HasColumnName("pss_id");
            entity.Property(e => e.PssCode)
                .HasMaxLength(32)
                .HasColumnName("pss_code");
            entity.Property(e => e.PssDescriptionLan1)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan1");
            entity.Property(e => e.PssDescriptionLan2)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan2");
            entity.Property(e => e.PssDescriptionLan3)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan3");
        });

        modelBuilder.Entity<Paymentterm>(entity =>
        {
            entity.HasKey(e => e.PtId).HasFillFactor(90);

            entity.ToTable("PAYMENTTERM", "sls");

            entity.HasIndex(e => new { e.PtBuId, e.PtCode }, "pt_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PtId).HasColumnName("pt_id");
            entity.Property(e => e.PtBuId).HasColumnName("pt_bu_id");
            entity.Property(e => e.PtCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pt_code");
            entity.Property(e => e.PtCommission)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("pt_commission");
            entity.Property(e => e.PtDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("pt_description_lan1");
            entity.Property(e => e.PtDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("pt_description_lan2");
            entity.Property(e => e.PtDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("pt_description_lan3");
            entity.Property(e => e.PtImpUid)
                .HasMaxLength(128)
                .HasColumnName("pt_imp_uid");

            entity.HasOne(d => d.PtBu).WithMany(p => p.Paymentterms)
                .HasForeignKey(d => d.PtBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PT_REF_BU");
        });

        modelBuilder.Entity<PaymenttermDetail>(entity =>
        {
            entity.HasKey(e => e.PtdId).HasFillFactor(90);

            entity.ToTable("PAYMENTTERM_DETAIL", "sls");

            entity.HasIndex(e => e.PtdPtId, "ptd_pt_idx").HasFillFactor(90);

            entity.Property(e => e.PtdId).HasColumnName("ptd_id");
            entity.Property(e => e.PtdAmountPerc)
                .HasDefaultValue(100m)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("ptd_amount_perc");
            entity.Property(e => e.PtdCommission)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("ptd_commission");
            entity.Property(e => e.PtdDueDays).HasColumnName("ptd_due_days");
            entity.Property(e => e.PtdOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("ptd_order");
            entity.Property(e => e.PtdPtId).HasColumnName("ptd_pt_id");

            entity.HasOne(d => d.PtdPt).WithMany(p => p.PaymenttermDetails)
                .HasForeignKey(d => d.PtdPtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PTD_REF_PT");
        });

        modelBuilder.Entity<Paymenttype>(entity =>
        {
            entity.HasKey(e => e.PyId).HasFillFactor(90);

            entity.ToTable("PAYMENTTYPE", "sls");

            entity.Property(e => e.PyId).HasColumnName("py_id");
            entity.Property(e => e.PyCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("py_code");
            entity.Property(e => e.PyDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan1");
            entity.Property(e => e.PyDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan2");
            entity.Property(e => e.PyDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan3");
            entity.Property(e => e.PyNameLan1)
                .HasMaxLength(100)
                .HasColumnName("py_name_lan1");
            entity.Property(e => e.PyNameLan2)
                .HasMaxLength(100)
                .HasColumnName("py_name_lan2");
            entity.Property(e => e.PyNameLan3)
                .HasMaxLength(100)
                .HasColumnName("py_name_lan3");
        });

        modelBuilder.Entity<PaymenttypeSequence>(entity =>
        {
            entity.HasKey(e => e.PysId).HasFillFactor(90);

            entity.ToTable("PAYMENTTYPE_SEQUENCE", "sls");

            entity.Property(e => e.PysId).HasColumnName("pys_id");
            entity.Property(e => e.PysActive)
                .HasDefaultValue(1)
                .HasColumnName("pys_active");
            entity.Property(e => e.PysBuId).HasColumnName("pys_bu_id");
            entity.Property(e => e.PysLength).HasColumnName("pys_length");
            entity.Property(e => e.PysOrder).HasColumnName("pys_order");
            entity.Property(e => e.PysPrefix)
                .HasMaxLength(16)
                .HasColumnName("pys_prefix");
            entity.Property(e => e.PysPyId).HasColumnName("pys_py_id");
            entity.Property(e => e.PysSqId).HasColumnName("pys_sq_id");
            entity.Property(e => e.PysUsId).HasColumnName("pys_us_id");

            entity.HasOne(d => d.PysBu).WithMany(p => p.PaymenttypeSequences)
                .HasForeignKey(d => d.PysBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PY_REF_BU");

            entity.HasOne(d => d.PysPy).WithMany(p => p.PaymenttypeSequences)
                .HasForeignKey(d => d.PysPyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYS_REF_PY");

            entity.HasOne(d => d.PysSq).WithMany(p => p.PaymenttypeSequences)
                .HasForeignKey(d => d.PysSqId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PY_REF_SQ");

            entity.HasOne(d => d.PysUs).WithMany(p => p.PaymenttypeSequences)
                .HasForeignKey(d => d.PysUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYS_REF_US");
        });

        modelBuilder.Entity<PhysicalLocation>(entity =>
        {
            entity.HasKey(e => e.PlId).HasFillFactor(90);

            entity.ToTable("PHYSICAL_LOCATION", "cmn");

            entity.HasIndex(e => e.PlCode, "pl_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PlPlId, "pl_pl_idx").HasFillFactor(90);

            entity.Property(e => e.PlId).HasColumnName("pl_id");
            entity.Property(e => e.PlActive)
                .HasDefaultValue((short)1)
                .HasColumnName("pl_active");
            entity.Property(e => e.PlBuId).HasColumnName("pl_bu_id");
            entity.Property(e => e.PlCdIdPlt).HasColumnName("pl_cd_id_plt");
            entity.Property(e => e.PlCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pl_code");
            entity.Property(e => e.PlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan1");
            entity.Property(e => e.PlDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan2");
            entity.Property(e => e.PlDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan3");
            entity.Property(e => e.PlImpUid)
                .HasMaxLength(128)
                .HasColumnName("pl_imp_uid");
            entity.Property(e => e.PlLevel).HasColumnName("pl_level");
            entity.Property(e => e.PlMdId).HasColumnName("pl_md_id");
            entity.Property(e => e.PlPlId).HasColumnName("pl_pl_id");

            entity.HasOne(d => d.PlBu).WithMany(p => p.PhysicalLocations)
                .HasForeignKey(d => d.PlBuId)
                .HasConstraintName("FK_SR_REF_BU");

            entity.HasOne(d => d.PlCdIdPltNavigation).WithMany(p => p.PhysicalLocations)
                .HasForeignKey(d => d.PlCdIdPlt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PHYSICAL_REFERENCE_CODESC");

            entity.HasOne(d => d.PlMd).WithMany(p => p.PhysicalLocations)
                .HasForeignKey(d => d.PlMdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PL_REF_MD");

            entity.HasOne(d => d.PlPl).WithMany(p => p.InversePlPl)
                .HasForeignKey(d => d.PlPlId)
                .HasConstraintName("FK_PHYSICAL_REFERENCE_PHYSICAL");
        });

        modelBuilder.Entity<PhysicalLocationAdditionalInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PHYSICAL_LOCATION_ADDITIONAL_INFO", "cmn");

            entity.Property(e => e.PliAddress1)
                .HasMaxLength(255)
                .HasColumnName("pli_address1");
            entity.Property(e => e.PliAddress2)
                .HasMaxLength(255)
                .HasColumnName("pli_address2");
            entity.Property(e => e.PliAddress3)
                .HasMaxLength(255)
                .HasColumnName("pli_address3");
            entity.Property(e => e.PliArea)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_area");
            entity.Property(e => e.PliDepth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_depth");
            entity.Property(e => e.PliFax)
                .HasMaxLength(32)
                .HasColumnName("pli_fax");
            entity.Property(e => e.PliGlId).HasColumnName("pli_gl_id");
            entity.Property(e => e.PliHeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_height");
            entity.Property(e => e.PliId)
                .ValueGeneratedOnAdd()
                .HasColumnName("pli_id");
            entity.Property(e => e.PliLatitude)
                .HasMaxLength(32)
                .HasColumnName("pli_latitude");
            entity.Property(e => e.PliLongitude)
                .HasMaxLength(32)
                .HasColumnName("pli_longitude");
            entity.Property(e => e.PliMobile)
                .HasMaxLength(32)
                .HasColumnName("pli_mobile");
            entity.Property(e => e.PliNumber)
                .HasMaxLength(64)
                .HasColumnName("pli_number");
            entity.Property(e => e.PliPhone)
                .HasMaxLength(32)
                .HasColumnName("pli_phone");
            entity.Property(e => e.PliPlId).HasColumnName("pli_pl_id");
            entity.Property(e => e.PliVolume)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_volume");
            entity.Property(e => e.PliWeight)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_weight");
            entity.Property(e => e.PliWidth)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pli_width");

            entity.HasOne(d => d.PliPl).WithMany()
                .HasForeignKey(d => d.PliPlId)
                .HasConstraintName("FK_PLI_REF_PL");
        });

        modelBuilder.Entity<PhysicalLocationOdometer>(entity =>
        {
            entity.HasKey(e => e.PloId).HasFillFactor(90);

            entity.ToTable("PHYSICAL_LOCATION_ODOMETER", "cmn");

            entity.Property(e => e.PloId).HasColumnName("plo_id");
            entity.Property(e => e.PloBdId).HasColumnName("plo_bd_id");
            entity.Property(e => e.PloDate)
                .HasColumnType("datetime")
                .HasColumnName("plo_date");
            entity.Property(e => e.PloEndOdometer)
                .HasMaxLength(12)
                .HasColumnName("plo_end_odometer");
            entity.Property(e => e.PloOdometer)
                .HasMaxLength(12)
                .HasColumnName("plo_odometer");
            entity.Property(e => e.PloPlId).HasColumnName("plo_pl_id");
            entity.Property(e => e.PloVersion)
                .HasDefaultValue(1)
                .HasColumnName("plo_version");

            entity.HasOne(d => d.PloBd).WithMany(p => p.PhysicalLocationOdometers)
                .HasForeignKey(d => d.PloBdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLO_REF_BD");

            entity.HasOne(d => d.PloPl).WithMany(p => p.PhysicalLocationOdometers)
                .HasForeignKey(d => d.PloPlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLO_REF_pl");
        });

        modelBuilder.Entity<Planogram>(entity =>
        {
            entity.HasKey(e => e.PlnId).HasFillFactor(90);

            entity.ToTable("PLANOGRAM", "cmn");

            entity.Property(e => e.PlnId).HasColumnName("pln_id");
            entity.Property(e => e.PlnActive)
                .HasDefaultValue((short)1)
                .HasColumnName("pln_active");
            entity.Property(e => e.PlnAllCustomers)
                .HasDefaultValue((short)0)
                .HasColumnName("pln_all_customers");
            entity.Property(e => e.PlnAllUsers)
                .HasDefaultValue((short)0)
                .HasColumnName("pln_all_users");
            entity.Property(e => e.PlnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pln_code");
            entity.Property(e => e.PlnCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pln_creation_date");
            entity.Property(e => e.PlnDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("pln_description_lan1");
            entity.Property(e => e.PlnDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("pln_description_lan2");
            entity.Property(e => e.PlnDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("pln_description_lan3");
            entity.Property(e => e.PlnFromDate)
                .HasColumnType("datetime")
                .HasColumnName("pln_from_date");
            entity.Property(e => e.PlnToDate)
                .HasColumnType("datetime")
                .HasColumnName("pln_to_date");
            entity.Property(e => e.PlnUpdateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("pln_update_date");
            entity.Property(e => e.PlnUsIdCr).HasColumnName("pln_us_id_cr");
            entity.Property(e => e.PlnUsIdUp).HasColumnName("pln_us_id_up");

            entity.HasOne(d => d.PlnUsIdCrNavigation).WithMany(p => p.Planograms)
                .HasForeignKey(d => d.PlnUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLN_REF_US");
        });

        modelBuilder.Entity<PlanogramDetail>(entity =>
        {
            entity.HasKey(e => e.PlndId).HasFillFactor(90);

            entity.ToTable("PLANOGRAM_DETAILS", "cmn");

            entity.Property(e => e.PlndId).HasColumnName("plnd_id");
            entity.Property(e => e.PlndActive)
                .HasDefaultValue(1)
                .HasColumnName("plnd_active");
            entity.Property(e => e.PlndCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("plnd_creation_date");
            entity.Property(e => e.PlndDescription)
                .HasMaxLength(255)
                .HasColumnName("plnd_description");
            entity.Property(e => e.PlndExt).HasColumnName("plnd_ext");
            entity.Property(e => e.PlndFilename)
                .HasMaxLength(255)
                .HasColumnName("plnd_filename");
            entity.Property(e => e.PlndMain).HasColumnName("plnd_main");
            entity.Property(e => e.PlndPath)
                .HasMaxLength(255)
                .HasColumnName("plnd_path");
            entity.Property(e => e.PlndPlnId).HasColumnName("plnd_pln_id");
            entity.Property(e => e.PlndText1)
                .HasMaxLength(255)
                .HasColumnName("plnd_text1");
            entity.Property(e => e.PlndUsIdCr).HasColumnName("plnd_us_id_cr");

            entity.HasOne(d => d.PlndPln).WithMany(p => p.PlanogramDetails)
                .HasForeignKey(d => d.PlndPlnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLND_REF_PLN");

            entity.HasOne(d => d.PlndUsIdCrNavigation).WithMany(p => p.PlanogramDetails)
                .HasForeignKey(d => d.PlndUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLND_REF_US");
        });

        modelBuilder.Entity<PlanogramThp>(entity =>
        {
            entity.HasKey(e => e.PlntId).HasFillFactor(90);

            entity.ToTable("PLANOGRAM_THPS", "cmn");

            entity.Property(e => e.PlntId).HasColumnName("plnt_id");
            entity.Property(e => e.PlntPlnId).HasColumnName("plnt_pln_id");
            entity.Property(e => e.PlntThcfId).HasColumnName("plnt_thcf_id");
            entity.Property(e => e.PlntThcfvId).HasColumnName("plnt_thcfv_id");
            entity.Property(e => e.PlntThpsId).HasColumnName("plnt_thps_id");

            entity.HasOne(d => d.PlntPln).WithMany(p => p.PlanogramThps)
                .HasForeignKey(d => d.PlntPlnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLNT_REF_PLN");

            entity.HasOne(d => d.PlntThps).WithMany(p => p.PlanogramThps)
                .HasForeignKey(d => d.PlntThpsId)
                .HasConstraintName("FK_PLNT_REF_THPS");
        });

        modelBuilder.Entity<PlanogramUser>(entity =>
        {
            entity.HasKey(e => e.PlnuId).HasFillFactor(90);

            entity.ToTable("PLANOGRAM_USERS", "cmn");

            entity.Property(e => e.PlnuId).HasColumnName("plnu_id");
            entity.Property(e => e.PlnuPlnId).HasColumnName("plnu_pln_id");
            entity.Property(e => e.PlnuPlnUsId).HasColumnName("plnu_pln_us_id");

            entity.HasOne(d => d.PlnuPln).WithMany(p => p.PlanogramUsers)
                .HasForeignKey(d => d.PlnuPlnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLNU_REF_PLN");

            entity.HasOne(d => d.PlnuPlnUs).WithMany(p => p.PlanogramUsers)
                .HasForeignKey(d => d.PlnuPlnUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLNG_REF_US");
        });

        modelBuilder.Entity<PostUpload>(entity =>
        {
            entity.HasKey(e => e.PuId).HasFillFactor(90);

            entity.ToTable("POST_UPLOAD");

            entity.Property(e => e.PuId).HasColumnName("pu_id");
            entity.Property(e => e.PuAdditionalWhere)
                .HasMaxLength(4000)
                .HasColumnName("pu_additional_where");
            entity.Property(e => e.PuCategory)
                .HasMaxLength(32)
                .HasColumnName("pu_category");
            entity.Property(e => e.PuCode)
                .HasMaxLength(32)
                .HasColumnName("pu_code");
            entity.Property(e => e.PuOrder).HasColumnName("pu_order");
            entity.Property(e => e.PuPrefix)
                .HasMaxLength(32)
                .HasColumnName("pu_prefix");
            entity.Property(e => e.PuSelect)
                .HasMaxLength(4000)
                .HasColumnName("pu_select");
            entity.Property(e => e.PuTableName)
                .HasMaxLength(64)
                .HasColumnName("pu_table_name");
            entity.Property(e => e.PuUpdate)
                .HasMaxLength(4000)
                .HasColumnName("pu_update");
        });

        modelBuilder.Entity<PostUpload1>(entity =>
        {
            entity.HasKey(e => e.PuId).HasFillFactor(90);

            entity.ToTable("POST_UPLOAD", "mforce");

            entity.Property(e => e.PuId).HasColumnName("pu_id");
            entity.Property(e => e.PuAdditionalWhere)
                .HasMaxLength(4000)
                .HasColumnName("pu_additional_where");
            entity.Property(e => e.PuBuId).HasColumnName("pu_bu_id");
            entity.Property(e => e.PuCategory)
                .HasMaxLength(32)
                .HasColumnName("pu_category");
            entity.Property(e => e.PuCode)
                .HasMaxLength(32)
                .HasColumnName("pu_code");
            entity.Property(e => e.PuOrder).HasColumnName("pu_order");
            entity.Property(e => e.PuPrefix)
                .HasMaxLength(32)
                .HasColumnName("pu_prefix");
            entity.Property(e => e.PuSelect)
                .HasMaxLength(4000)
                .HasColumnName("pu_select");
            entity.Property(e => e.PuTableName)
                .HasMaxLength(64)
                .HasColumnName("pu_table_name");
            entity.Property(e => e.PuUpdate)
                .HasMaxLength(4000)
                .HasColumnName("pu_update");

            entity.HasOne(d => d.PuBu).WithMany(p => p.PostUpload1s)
                .HasForeignKey(d => d.PuBuId)
                .HasConstraintName("FK_PU_REF_BU");
        });

        modelBuilder.Entity<Printing>(entity =>
        {
            entity.HasKey(e => e.RpId).HasFillFactor(90);

            entity.ToTable("PRINTING", "cmn");

            entity.Property(e => e.RpId).HasColumnName("rp_id");
            entity.Property(e => e.RpActive)
                .HasDefaultValue(1)
                .HasColumnName("rp_active");
            entity.Property(e => e.RpBuId).HasColumnName("rp_bu_id");
            entity.Property(e => e.RpCode)
                .HasMaxLength(32)
                .HasColumnName("rp_code");
            entity.Property(e => e.RpCondition).HasColumnName("rp_condition");
            entity.Property(e => e.RpFontFamily)
                .HasMaxLength(255)
                .HasColumnName("rp_font_family");
            entity.Property(e => e.RpFontSettings)
                .HasMaxLength(50)
                .HasColumnName("rp_font_settings");
            entity.Property(e => e.RpFontStyle)
                .HasMaxLength(64)
                .HasColumnName("rp_font_style");
            entity.Property(e => e.RpHeight).HasColumnName("rp_height");
            entity.Property(e => e.RpLtrRtl).HasColumnName("rp_ltr_rtl");
            entity.Property(e => e.RpPadding)
                .HasDefaultValue(0)
                .HasColumnName("rp_padding");
            entity.Property(e => e.RpPercentage)
                .HasMaxLength(128)
                .HasColumnName("rp_percentage");
            entity.Property(e => e.RpPrinter)
                .HasMaxLength(128)
                .HasColumnName("rp_printer");
            entity.Property(e => e.RpRow).HasColumnName("rp_row");
            entity.Property(e => e.RpSection)
                .HasMaxLength(32)
                .HasColumnName("rp_section");
            entity.Property(e => e.RpTextAlignment)
                .HasMaxLength(64)
                .HasColumnName("rp_text_alignment");
            entity.Property(e => e.RpTextTranslate)
                .HasMaxLength(64)
                .HasColumnName("rp_text_translate");
            entity.Property(e => e.RpValIsSelect).HasColumnName("rp_val_is_select");
            entity.Property(e => e.RpValue)
                .HasMaxLength(4000)
                .HasColumnName("rp_value");
            entity.Property(e => e.RpWidth)
                .HasMaxLength(64)
                .HasColumnName("rp_width");
        });

        modelBuilder.Entity<Printing1>(entity =>
        {
            entity.HasKey(e => e.RpId).HasFillFactor(90);

            entity.ToTable("PRINTING");

            entity.Property(e => e.RpId).HasColumnName("rp_id");
            entity.Property(e => e.RpBuId).HasColumnName("rp_bu_id");
            entity.Property(e => e.RpCode)
                .HasMaxLength(32)
                .HasColumnName("rp_code");
            entity.Property(e => e.RpFontSettings)
                .HasMaxLength(16)
                .HasColumnName("rp_font_settings");
            entity.Property(e => e.RpLtrRtl).HasColumnName("rp_ltr_rtl");
            entity.Property(e => e.RpPercentage)
                .HasMaxLength(128)
                .HasColumnName("rp_percentage");
            entity.Property(e => e.RpPrinter)
                .HasMaxLength(128)
                .HasColumnName("rp_printer");
            entity.Property(e => e.RpRow).HasColumnName("rp_row");
            entity.Property(e => e.RpSection)
                .HasMaxLength(32)
                .HasColumnName("rp_section");
            entity.Property(e => e.RpValIsSelect).HasColumnName("rp_val_is_select");
            entity.Property(e => e.RpValue)
                .HasMaxLength(4000)
                .HasColumnName("rp_value");

            entity.HasOne(d => d.RpBu).WithMany(p => p.Printing1s)
                .HasForeignKey(d => d.RpBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RP_REF_BU");
        });

        modelBuilder.Entity<PrintingLogSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPlId, e.SPlSmId, e.SPlVersion }).HasFillFactor(90);

            entity.ToTable("PRINTING_LOG_SNC", "syn");

            entity.Property(e => e.SPlId).HasColumnName("s_pl_id");
            entity.Property(e => e.SPlSmId).HasColumnName("s_pl_sm_id");
            entity.Property(e => e.SPlVersion)
                .HasMaxLength(25)
                .HasColumnName("s_pl_version");
            entity.Property(e => e.SPlCode)
                .HasMaxLength(32)
                .HasColumnName("s_pl_code");
            entity.Property(e => e.SPlComments)
                .HasMaxLength(512)
                .HasColumnName("s_pl_comments");
            entity.Property(e => e.SPlDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("s_pl_date");
            entity.Property(e => e.SPlParams)
                .HasMaxLength(128)
                .HasColumnName("s_pl_params");
            entity.Property(e => e.SPlStatus)
                .HasDefaultValue(-1)
                .HasColumnName("s_pl_status");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRODUCT");

            entity.Property(e => e.PrBarcode)
                .HasMaxLength(32)
                .HasColumnName("pr_barcode");
            entity.Property(e => e.PrCdIdCur).HasColumnName("pr_cd_id_cur");
            entity.Property(e => e.PrCode)
                .HasMaxLength(32)
                .HasColumnName("pr_code");
            entity.Property(e => e.PrDefaultPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pr_default_price");
            entity.Property(e => e.PrDescription)
                .HasMaxLength(100)
                .HasColumnName("pr_description");
            entity.Property(e => e.PrDescriptionAr)
                .HasMaxLength(100)
                .HasColumnName("pr_description_ar");
            entity.Property(e => e.PrDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pr_discount");
            entity.Property(e => e.PrFeId).HasColumnName("pr_fe_id");
            entity.Property(e => e.PrGpId).HasColumnName("pr_gp_id");
            entity.Property(e => e.PrId).HasColumnName("pr_id");
            entity.Property(e => e.PrMaxDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pr_max_discount");
            entity.Property(e => e.PrPbId).HasColumnName("pr_pb_id");
            entity.Property(e => e.PrText1)
                .HasMaxLength(250)
                .HasColumnName("pr_text1");
            entity.Property(e => e.PrText2)
                .HasMaxLength(250)
                .HasColumnName("pr_text2");
            entity.Property(e => e.PrText3)
                .HasMaxLength(250)
                .HasColumnName("pr_text3");
            entity.Property(e => e.PrText4)
                .HasMaxLength(250)
                .HasColumnName("pr_text4");
            entity.Property(e => e.PrText5)
                .HasMaxLength(250)
                .HasColumnName("pr_text5");
            entity.Property(e => e.PrVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pr_vat");
        });

        modelBuilder.Entity<ProductBarcodeWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPrbId, e.SPrbUsId }).HasFillFactor(90);

            entity.ToTable("PRODUCT_BARCODE_WMS_SNC", "syn");

            entity.Property(e => e.SPrbId).HasColumnName("s_prb_id");
            entity.Property(e => e.SPrbUsId).HasColumnName("s_prb_us_id");
            entity.Property(e => e.SPrbBarcode)
                .HasMaxLength(50)
                .HasColumnName("s_prb_barcode");
            entity.Property(e => e.SPrbCode)
                .HasMaxLength(50)
                .HasColumnName("s_prb_code");
            entity.Property(e => e.SPrbConversion)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("s_prb_conversion");
            entity.Property(e => e.SPrbIsNew).HasColumnName("s_prb_is_new");
            entity.Property(e => e.SPrbNum1)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("s_prb_num1");
            entity.Property(e => e.SPrbPrId).HasColumnName("s_prb_pr_id");
            entity.Property(e => e.SPrbRefNum1)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("s_prb_ref_num1");
            entity.Property(e => e.SPrbReftext1)
                .HasMaxLength(50)
                .HasColumnName("s_prb_reftext1");
            entity.Property(e => e.SPrbText1)
                .HasMaxLength(50)
                .HasColumnName("s_prb_text1");
            entity.Property(e => e.SPrbType)
                .HasMaxLength(20)
                .HasColumnName("s_prb_type");
            entity.Property(e => e.SPrbVersion)
                .HasMaxLength(32)
                .HasColumnName("s_prb_version");
        });

        modelBuilder.Entity<ProductCategoryFamilyValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRODUCT_CATEGORY_FAMILY_VALUES");

            entity.Property(e => e.PcfvCodePcf)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pcfv_code_pcf");
            entity.Property(e => e.PcfvPcfId).HasColumnName("pcfv_pcf_id");
            entity.Property(e => e.PcfvPcvId).HasColumnName("pcfv_pcv_id");
            entity.Property(e => e.PcfvPkId).HasColumnName("pcfv_pk_id");
            entity.Property(e => e.PcfvPrId).HasColumnName("pcfv_pr_id");
        });

        modelBuilder.Entity<ProductCategoryValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRODUCT_CATEGORY_VALUES");

            entity.Property(e => e.PcvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pcv_code");
            entity.Property(e => e.PcvCodePcf)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pcv_code_pcf");
            entity.Property(e => e.PcvDescription)
                .HasMaxLength(255)
                .HasColumnName("pcv_description");
            entity.Property(e => e.PcvDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("pcv_description_ar");
            entity.Property(e => e.PcvDescriptionPcf)
                .HasMaxLength(100)
                .HasColumnName("pcv_description_pcf");
            entity.Property(e => e.PcvDescriptionPcfAr)
                .HasMaxLength(100)
                .HasColumnName("pcv_description_pcf_ar");
            entity.Property(e => e.PcvId).HasColumnName("pcv_id");
            entity.Property(e => e.PcvPcfId).HasColumnName("pcv_pcf_id");
            entity.Property(e => e.PcvPkId).HasColumnName("pcv_pk_id");
        });

        modelBuilder.Entity<ProductTargetSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRODUCT_TARGET_SNC", "syn");

            entity.Property(e => e.SPrgGpId).HasColumnName("s_prg_gp_id");
            entity.Property(e => e.SPrgId).HasColumnName("s_prg_id");
            entity.Property(e => e.SPrgPbId).HasColumnName("s_prg_pb_id");
            entity.Property(e => e.SPrgPrId).HasColumnName("s_prg_pr_id");
            entity.Property(e => e.SPrgSmId).HasColumnName("s_prg_sm_id");
            entity.Property(e => e.SPrgType)
                .HasMaxLength(32)
                .HasColumnName("s_prg_type");
            entity.Property(e => e.SPrgVersion)
                .HasMaxLength(32)
                .HasColumnName("s_prg_version");
            entity.Property(e => e.SPrgYmTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_prg_ym_target_r");
            entity.Property(e => e.SPrgYmTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_prg_ym_target_v");
            entity.Property(e => e.SPrgYmValue)
                .HasMaxLength(6)
                .HasColumnName("s_prg_ym_value");
            entity.Property(e => e.SPrgYtdTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_prg_ytd_target_r");
            entity.Property(e => e.SPrgYtdTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_prg_ytd_target_v");
            entity.Property(e => e.SPrgYtdValue).HasColumnName("s_prg_ytd_value");
        });

        modelBuilder.Entity<ProductUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PRODUCT_UOM");

            entity.Property(e => e.PuomBarcode)
                .HasMaxLength(32)
                .HasColumnName("puom_barcode");
            entity.Property(e => e.PuomBeId).HasColumnName("puom_be_id");
            entity.Property(e => e.PuomConvSku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("puom_conv_sku");
            entity.Property(e => e.PuomId).HasColumnName("puom_id");
            entity.Property(e => e.PuomIsBase).HasColumnName("puom_is_base");
            entity.Property(e => e.PuomLevel).HasColumnName("puom_level");
            entity.Property(e => e.PuomPrId).HasColumnName("puom_pr_id");
            entity.Property(e => e.PuomUomId).HasColumnName("puom_uom_id");
        });

        modelBuilder.Entity<ProductWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SPrId, e.SPrUsId }).HasFillFactor(90);

            entity.ToTable("PRODUCT_WMS_SNC", "syn");

            entity.Property(e => e.SPrId).HasColumnName("s_pr_id");
            entity.Property(e => e.SPrUsId).HasColumnName("s_pr_us_id");
            entity.Property(e => e.SPrCode)
                .HasMaxLength(40)
                .HasColumnName("s_pr_code");
            entity.Property(e => e.SPrDescription)
                .HasMaxLength(200)
                .HasColumnName("s_pr_description");
            entity.Property(e => e.SPrDescription2)
                .HasMaxLength(200)
                .HasColumnName("s_pr_description2");
            entity.Property(e => e.SPrIsNew).HasColumnName("s_pr_is_new");
            entity.Property(e => e.SPrIsSerial).HasColumnName("s_pr_is_serial");
            entity.Property(e => e.SPrNum1).HasColumnName("s_pr_num1");
            entity.Property(e => e.SPrRefBarcode)
                .HasMaxLength(40)
                .HasColumnName("s_pr_ref_barcode");
            entity.Property(e => e.SPrRefExport).HasColumnName("s_pr_ref_export");
            entity.Property(e => e.SPrTonality)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("s_pr_tonality");
            entity.Property(e => e.SPrUsercode)
                .HasMaxLength(50)
                .HasColumnName("s_pr_usercode");
            entity.Property(e => e.SPrVersion)
                .HasMaxLength(32)
                .HasColumnName("s_pr_version");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.PrId).HasFillFactor(90);

            entity.ToTable("PROFILE", "cmn");

            entity.HasIndex(e => e.PrCode, "pr_code_idx").HasFillFactor(90);

            entity.Property(e => e.PrId).HasColumnName("pr_id");
            entity.Property(e => e.PrActive).HasColumnName("pr_active");
            entity.Property(e => e.PrCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pr_code");
            entity.Property(e => e.PrDescription)
                .HasMaxLength(50)
                .HasColumnName("pr_description");
        });

        modelBuilder.Entity<ProfileAppliSetting>(entity =>
        {
            entity.HasKey(e => e.PasId).HasFillFactor(90);

            entity.ToTable("PROFILE_APPLI_SETTING", "cmn");

            entity.Property(e => e.PasId).HasColumnName("pas_id");
            entity.Property(e => e.PasAsId).HasColumnName("pas_as_id");
            entity.Property(e => e.PasPrId).HasColumnName("pas_pr_id");

            entity.HasOne(d => d.PasAs).WithMany(p => p.ProfileAppliSettings)
                .HasForeignKey(d => d.PasAsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAS_REF_AS");

            entity.HasOne(d => d.PasPr).WithMany(p => p.ProfileAppliSettings)
                .HasForeignKey(d => d.PasPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAS_REF_PR");
        });

        modelBuilder.Entity<ProfileBusinessUnit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROFILE_BUSINESS_UNIT", "cmn");

            entity.HasIndex(e => new { e.PbuPrId, e.PbuBuId }, "pbu_pr_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PbuBuId).HasColumnName("pbu_bu_id");
            entity.Property(e => e.PbuId)
                .ValueGeneratedOnAdd()
                .HasColumnName("pbu_id");
            entity.Property(e => e.PbuPrId).HasColumnName("pbu_pr_id");
        });

        modelBuilder.Entity<ProfileMenu>(entity =>
        {
            entity.HasKey(e => e.PrmId).HasFillFactor(90);

            entity.ToTable("PROFILE_MENU", "cmn");

            entity.Property(e => e.PrmId).HasColumnName("prm_id");
            entity.Property(e => e.PrmMnId).HasColumnName("prm_mn_id");
            entity.Property(e => e.PrmPrId).HasColumnName("prm_pr_id");

            entity.HasOne(d => d.PrmPr).WithMany(p => p.ProfileMenus)
                .HasForeignKey(d => d.PrmPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRM__REF_PR");
        });

        modelBuilder.Entity<ProfileMenuDetail>(entity =>
        {
            entity.HasKey(e => e.PmdId).HasFillFactor(90);

            entity.ToTable("PROFILE_MENU_DETAIL", "cmn");

            entity.Property(e => e.PmdId).HasColumnName("pmd_id");
            entity.Property(e => e.PmdMndId).HasColumnName("pmd_mnd_id");
            entity.Property(e => e.PmdPrId).HasColumnName("pmd_pr_id");

            entity.HasOne(d => d.PmdMnd).WithMany(p => p.ProfileMenuDetails)
                .HasForeignKey(d => d.PmdMndId)
                .HasConstraintName("FK_PROFILE__REFERENCE_MENU_DET");

            entity.HasOne(d => d.PmdPr).WithMany(p => p.ProfileMenuDetails)
                .HasForeignKey(d => d.PmdPrId)
                .HasConstraintName("FK_PRM_REF_PR");
        });

        modelBuilder.Entity<PromotionCustomersSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROMOTION_CUSTOMERS_SNC", "syn");

            entity.Property(e => e.SPncCdIdCcg).HasColumnName("s_pnc_cd_id_ccg");
            entity.Property(e => e.SPncCuId).HasColumnName("s_pnc_cu_id");
            entity.Property(e => e.SPncId).HasColumnName("s_pnc_id");
            entity.Property(e => e.SPncPnId).HasColumnName("s_pnc_pn_id");
            entity.Property(e => e.SPncSmId)
                .HasMaxLength(32)
                .HasColumnName("s_pnc_sm_id");
            entity.Property(e => e.SPncVersion)
                .HasMaxLength(32)
                .HasColumnName("s_pnc_version");
        });

        modelBuilder.Entity<PromotionDetail>(entity =>
        {
            entity.HasKey(e => e.PndId).HasFillFactor(90);

            entity.ToTable("PROMOTION_DETAIL", "sls");

            entity.HasIndex(e => new { e.PndPnId, e.PndCode }, "pnd_pn_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PndPnId, "pnd_pn_idx").HasFillFactor(90);

            entity.Property(e => e.PndId).HasColumnName("pnd_id");
            entity.Property(e => e.PndActive)
                .HasDefaultValue(1)
                .HasColumnName("pnd_active");
            entity.Property(e => e.PndAppliesOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("G")
                .IsFixedLength()
                .HasColumnName("pnd_applies_on");
            entity.Property(e => e.PndApplyOrder)
                .HasDefaultValue(1)
                .HasColumnName("pnd_apply_order");
            entity.Property(e => e.PndBucket).HasColumnName("pnd_bucket");
            entity.Property(e => e.PndBuyFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_buy_from");
            entity.Property(e => e.PndBuyPerTotal)
                .HasDefaultValue((short)-1)
                .HasColumnName("pnd_buy_per_total");
            entity.Property(e => e.PndBuyTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_buy_to");
            entity.Property(e => e.PndCdIdPao).HasColumnName("pnd_cd_id_pao");
            entity.Property(e => e.PndCdIdPaqp).HasColumnName("pnd_cd_id_paqp");
            entity.Property(e => e.PndCdIdPaqs).HasColumnName("pnd_cd_id_paqs");
            entity.Property(e => e.PndCdIdPas).HasColumnName("pnd_cd_id_pas");
            entity.Property(e => e.PndCdIdPast).HasColumnName("pnd_cd_id_past");
            entity.Property(e => e.PndCdIdPec).HasColumnName("pnd_cd_id_pec");
            entity.Property(e => e.PndCdIdPgn).HasColumnName("pnd_cd_id_pgn");
            entity.Property(e => e.PndCdIdPil).HasColumnName("pnd_cd_id_pil");
            entity.Property(e => e.PndCdIdPrtypeBuy).HasColumnName("pnd_cd_id_prtype_buy");
            entity.Property(e => e.PndCdIdPrtypeGet).HasColumnName("pnd_cd_id_prtype_get");
            entity.Property(e => e.PndCode)
                .HasMaxLength(32)
                .HasColumnName("pnd_code");
            entity.Property(e => e.PndCyclicOrder)
                .HasDefaultValue(1)
                .HasColumnName("pnd_cyclic_order");
            entity.Property(e => e.PndCyclicValue)
                .HasDefaultValue(-1m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_cyclic_value");
            entity.Property(e => e.PndDeduceValue)
                .HasDefaultValue(-1)
                .HasColumnName("pnd_deduce_value");
            entity.Property(e => e.PndDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan1");
            entity.Property(e => e.PndDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan2");
            entity.Property(e => e.PndDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan3");
            entity.Property(e => e.PndElligibiltyCount)
                .HasDefaultValue(-1)
                .HasColumnName("pnd_elligibilty_count");
            entity.Property(e => e.PndForeach)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_foreach");
            entity.Property(e => e.PndGetFromSame)
                .HasDefaultValue(-1)
                .HasColumnName("pnd_get_from_same");
            entity.Property(e => e.PndGetValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_get_value");
            entity.Property(e => e.PndGetValueMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_get_value_max");
            entity.Property(e => e.PndGetValuePerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_get_value_perc");
            entity.Property(e => e.PndLineConditional)
                .HasDefaultValue((short)1)
                .HasColumnName("pnd_line_conditional");
            entity.Property(e => e.PndMandatory)
                .HasDefaultValue(1)
                .HasColumnName("pnd_mandatory");
            entity.Property(e => e.PndPnId).HasColumnName("pnd_pn_id");
            entity.Property(e => e.PndPrecedence).HasColumnName("pnd_precedence");
            entity.Property(e => e.PndPromptSf)
                .HasDefaultValue((short)-1)
                .HasColumnName("pnd_prompt_sf");
            entity.Property(e => e.PndRecurringCount)
                .HasDefaultValue(-1)
                .HasColumnName("pnd_recurring_count");
            entity.Property(e => e.PndUomIdBuy).HasColumnName("pnd_uom_id_buy");
            entity.Property(e => e.PndUomIdGet).HasColumnName("pnd_uom_id_get");

            entity.HasOne(d => d.PndCdIdPecNavigation).WithMany(p => p.PromotionDetailPndCdIdPecNavigations)
                .HasForeignKey(d => d.PndCdIdPec)
                .HasConstraintName("FK_PND_REF_CD_PEC");

            entity.HasOne(d => d.PndCdIdPilNavigation).WithMany(p => p.PromotionDetailPndCdIdPilNavigations)
                .HasForeignKey(d => d.PndCdIdPil)
                .HasConstraintName("FK_PND_REF_CD_PIL");

            entity.HasOne(d => d.PndCdIdPrtypeBuyNavigation).WithMany(p => p.PromotionDetailPndCdIdPrtypeBuyNavigations)
                .HasForeignKey(d => d.PndCdIdPrtypeBuy)
                .HasConstraintName("FK_PND_REF_CD_PRTYPE_BUY");

            entity.HasOne(d => d.PndCdIdPrtypeGetNavigation).WithMany(p => p.PromotionDetailPndCdIdPrtypeGetNavigations)
                .HasForeignKey(d => d.PndCdIdPrtypeGet)
                .HasConstraintName("FK_PND_REF_CD_PRTYPE_GET");

            entity.HasOne(d => d.PndPn).WithMany(p => p.PromotionDetails)
                .HasForeignKey(d => d.PndPnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PND_REF_PN");

            entity.HasOne(d => d.PndUomIdBuyNavigation).WithMany(p => p.PromotionDetailPndUomIdBuyNavigations)
                .HasForeignKey(d => d.PndUomIdBuy)
                .HasConstraintName("FK_PND_REF_UOM_BUY");

            entity.HasOne(d => d.PndUomIdGetNavigation).WithMany(p => p.PromotionDetailPndUomIdGetNavigations)
                .HasForeignKey(d => d.PndUomIdGet)
                .HasConstraintName("FK_PND_REF_UOM_GET");
        });

        modelBuilder.Entity<PromotionDetailQualifier>(entity =>
        {
            entity.HasKey(e => e.PndqId).HasFillFactor(90);

            entity.ToTable("PROMOTION_DETAIL_QUALIFIER", "sls");

            entity.HasIndex(e => e.PndqPndId, "pndq_pnd_idx").HasFillFactor(90);

            entity.HasIndex(e => e.PndqQlvId, "pndq_ql_idx").HasFillFactor(90);

            entity.Property(e => e.PndqId).HasColumnName("pndq_id");
            entity.Property(e => e.PndqAttributeValueFrom).HasColumnName("pndq_attribute_value_from");
            entity.Property(e => e.PndqAttributeValueTo).HasColumnName("pndq_attribute_value_to");
            entity.Property(e => e.PndqCdIdCop).HasColumnName("pndq_cd_id_cop");
            entity.Property(e => e.PndqGroupingNo)
                .HasDefaultValue(-1)
                .HasColumnName("pndq_grouping_no");
            entity.Property(e => e.PndqPnId).HasColumnName("pndq_pn_id");
            entity.Property(e => e.PndqPndId).HasColumnName("pndq_pnd_id");
            entity.Property(e => e.PndqQlId).HasColumnName("pndq_ql_id");
            entity.Property(e => e.PndqQlvId).HasColumnName("pndq_qlv_id");

            entity.HasOne(d => d.PndqCdIdCopNavigation).WithMany(p => p.PromotionDetailQualifiers)
                .HasForeignKey(d => d.PndqCdIdCop)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNDQ_REF_CD_COP");

            entity.HasOne(d => d.PndqPn).WithMany(p => p.PromotionDetailQualifiers)
                .HasForeignKey(d => d.PndqPnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNDQ_REF_PN");

            entity.HasOne(d => d.PndqPnd).WithMany(p => p.PromotionDetailQualifiers)
                .HasForeignKey(d => d.PndqPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNDQ_REF_PND");

            entity.HasOne(d => d.PndqQl).WithMany(p => p.PromotionDetailQualifiers)
                .HasForeignKey(d => d.PndqQlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNDQ_REF_QL");
        });

        modelBuilder.Entity<PromotionGive>(entity =>
        {
            entity.HasKey(e => e.PngId).HasFillFactor(90);

            entity.ToTable("PROMOTION_GIVE", "sls");

            entity.HasIndex(e => e.PngPndId, "png_pnd_idx").HasFillFactor(90);

            entity.Property(e => e.PngId).HasColumnName("png_id");
            entity.Property(e => e.PngGroupingNo)
                .HasDefaultValue(-1)
                .HasColumnName("png_grouping_no");
            entity.Property(e => e.PngIcfId).HasColumnName("png_icf_id");
            entity.Property(e => e.PngIcfvId).HasColumnName("png_icfv_id");
            entity.Property(e => e.PngPnId).HasColumnName("png_pn_id");
            entity.Property(e => e.PngPndId).HasColumnName("png_pnd_id");
            entity.Property(e => e.PngUomId).HasColumnName("png_uom_id");
            entity.Property(e => e.PngValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("png_value");
            entity.Property(e => e.PngValueMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("png_value_max");
            entity.Property(e => e.PngValuePerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("png_value_perc");

            entity.HasOne(d => d.PngPn).WithMany(p => p.PromotionGives)
                .HasForeignKey(d => d.PngPnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNG_REF_PN");

            entity.HasOne(d => d.PngPnd).WithMany(p => p.PromotionGives)
                .HasForeignKey(d => d.PngPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNG_REF_PND");

            entity.HasOne(d => d.PngUom).WithMany(p => p.PromotionGives)
                .HasForeignKey(d => d.PngUomId)
                .HasConstraintName("FK_PNG_REF_UOM");
        });

        modelBuilder.Entity<PromotionLine>(entity =>
        {
            entity.HasKey(e => e.PnlId).HasFillFactor(90);

            entity.ToTable("PROMOTION_LINE", "sls");

            entity.HasIndex(e => e.PnlPndId, "pnl_pnd_id").HasFillFactor(90);

            entity.Property(e => e.PnlId).HasColumnName("pnl_id");
            entity.Property(e => e.PnlCdIdPrice).HasColumnName("pnl_cd_id_price");
            entity.Property(e => e.PnlForeach)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_foreach");
            entity.Property(e => e.PnlFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_from");
            entity.Property(e => e.PnlGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_get");
            entity.Property(e => e.PnlGetMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_get_max");
            entity.Property(e => e.PnlGetPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_get_perc");
            entity.Property(e => e.PnlIcfId).HasColumnName("pnl_icf_id");
            entity.Property(e => e.PnlIcfvId).HasColumnName("pnl_icfv_id");
            entity.Property(e => e.PnlPnId).HasColumnName("pnl_pn_id");
            entity.Property(e => e.PnlPndId).HasColumnName("pnl_pnd_id");
            entity.Property(e => e.PnlRecurringCount).HasColumnName("pnl_recurring_count");
            entity.Property(e => e.PnlTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_to");
            entity.Property(e => e.PnlUomIdBuy).HasColumnName("pnl_uom_id_buy");
            entity.Property(e => e.PnlUomIdGet).HasColumnName("pnl_uom_id_get");

            entity.HasOne(d => d.PnlPn).WithMany(p => p.PromotionLines)
                .HasForeignKey(d => d.PnlPnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNL_REF_PN");

            entity.HasOne(d => d.PnlPnd).WithMany(p => p.PromotionLines)
                .HasForeignKey(d => d.PnlPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNL_REF_PND");

            entity.HasOne(d => d.PnlUomIdBuyNavigation).WithMany(p => p.PromotionLinePnlUomIdBuyNavigations)
                .HasForeignKey(d => d.PnlUomIdBuy)
                .HasConstraintName("FK_PNL_REF_UOM");

            entity.HasOne(d => d.PnlUomIdGetNavigation).WithMany(p => p.PromotionLinePnlUomIdGetNavigations)
                .HasForeignKey(d => d.PnlUomIdGet)
                .HasConstraintName("FK_PNL_REF_UOM_GET");
        });

        modelBuilder.Entity<PromotionMaster>(entity =>
        {
            entity.HasKey(e => e.PnId).HasFillFactor(90);

            entity.ToTable("PROMOTION_MASTER", "sls");

            entity.HasIndex(e => e.PnCode, "pn_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PnId).HasColumnName("pn_id");
            entity.Property(e => e.PnActive)
                .HasDefaultValue(1)
                .HasColumnName("pn_active");
            entity.Property(e => e.PnBuId).HasColumnName("pn_bu_id");
            entity.Property(e => e.PnCdIdCql).HasColumnName("pn_cd_id_cql");
            entity.Property(e => e.PnCdIdPpb).HasColumnName("pn_cd_id_ppb");
            entity.Property(e => e.PnCdIdPtp).HasColumnName("pn_cd_id_ptp");
            entity.Property(e => e.PnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pn_code");
            entity.Property(e => e.PnDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan1");
            entity.Property(e => e.PnDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan2");
            entity.Property(e => e.PnDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan3");
            entity.Property(e => e.PnFromDate)
                .HasColumnType("datetime")
                .HasColumnName("pn_from_date");
            entity.Property(e => e.PnToDate)
                .HasColumnType("datetime")
                .HasColumnName("pn_to_date");

            entity.HasOne(d => d.PnBu).WithMany(p => p.PromotionMasters)
                .HasForeignKey(d => d.PnBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PN_REF_BU");

            entity.HasOne(d => d.PnCdIdCqlNavigation).WithMany(p => p.PromotionMasterPnCdIdCqlNavigations)
                .HasForeignKey(d => d.PnCdIdCql)
                .HasConstraintName("FK_PN_REF_CD_CQL");

            entity.HasOne(d => d.PnCdIdPpbNavigation).WithMany(p => p.PromotionMasterPnCdIdPpbNavigations)
                .HasForeignKey(d => d.PnCdIdPpb)
                .HasConstraintName("FK_PN_REF_CD_PPB");

            entity.HasOne(d => d.PnCdIdPtpNavigation).WithMany(p => p.PromotionMasterPnCdIdPtpNavigations)
                .HasForeignKey(d => d.PnCdIdPtp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PN_REF_CD_PTP");
        });

        modelBuilder.Entity<PromotionMasterQualifier>(entity =>
        {
            entity.HasKey(e => e.PnqId).HasFillFactor(90);

            entity.ToTable("PROMOTION_MASTER_QUALIFIER", "sls");

            entity.HasIndex(e => e.PnqPnId, "pnq_pn_idx").HasFillFactor(90);

            entity.Property(e => e.PnqId).HasColumnName("pnq_id");
            entity.Property(e => e.PnqAttributeValueFrom).HasColumnName("pnq_attribute_value_from");
            entity.Property(e => e.PnqAttributeValueTo).HasColumnName("pnq_attribute_value_to");
            entity.Property(e => e.PnqCdIdCop).HasColumnName("pnq_cd_id_cop");
            entity.Property(e => e.PnqGroupingNo)
                .HasDefaultValue(-1)
                .HasColumnName("pnq_grouping_no");
            entity.Property(e => e.PnqPnId).HasColumnName("pnq_pn_id");
            entity.Property(e => e.PnqQlId).HasColumnName("pnq_ql_id");
            entity.Property(e => e.PnqQlvId).HasColumnName("pnq_qlv_id");

            entity.HasOne(d => d.PnqCdIdCopNavigation).WithMany(p => p.PromotionMasterQualifiers)
                .HasForeignKey(d => d.PnqCdIdCop)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNQ_REF_CD_COP");

            entity.HasOne(d => d.PnqPn).WithMany(p => p.PromotionMasterQualifiers)
                .HasForeignKey(d => d.PnqPnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PNQ_REF_PN");

            entity.HasOne(d => d.PnqQl).WithMany(p => p.PromotionMasterQualifiers)
                .HasForeignKey(d => d.PnqQlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pnq_REF_QL");
        });

        modelBuilder.Entity<PromotionQualifier>(entity =>
        {
            entity.HasKey(e => e.QlId).HasFillFactor(90);

            entity.ToTable("PROMOTION_QUALIFIER", "sls");

            entity.HasIndex(e => e.QlCode, "ql_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.QlId).HasColumnName("ql_id");
            entity.Property(e => e.QlCode)
                .HasMaxLength(32)
                .HasColumnName("ql_code");
            entity.Property(e => e.QlColumnName)
                .HasMaxLength(64)
                .HasColumnName("ql_column_name");
            entity.Property(e => e.QlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan1");
            entity.Property(e => e.QlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan2");
            entity.Property(e => e.QlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan3");
            entity.Property(e => e.QlIsForeignKey).HasColumnName("ql_is_foreign_key");
            entity.Property(e => e.QlLinkedTo)
                .HasMaxLength(64)
                .HasColumnName("ql_linked_to");
            entity.Property(e => e.QlMaxNbValue)
                .HasDefaultValue(1)
                .HasColumnName("ql_max_nb_value");
            entity.Property(e => e.QlQualifierSourceTable)
                .HasMaxLength(64)
                .HasColumnName("ql_qualifier_source_table");
            entity.Property(e => e.QlQualifierSourceTablePk).HasColumnName("ql_qualifier_source_table_pk");
            entity.Property(e => e.QlQualifierValuesTable)
                .HasMaxLength(64)
                .HasColumnName("ql_qualifier_values_table");
            entity.Property(e => e.QlRoot).HasColumnName("ql_root");
            entity.Property(e => e.QlTargetColumn)
                .HasMaxLength(64)
                .HasColumnName("ql_target_column");
            entity.Property(e => e.QlValueType).HasColumnName("ql_value_type");
        });

        modelBuilder.Entity<PromotionsliceBuy>(entity =>
        {
            entity.HasKey(e => e.PsbId).HasFillFactor(90);

            entity.ToTable("PROMOTIONSLICE_BUY", "sls");

            entity.HasIndex(e => new { e.PsbPndId, e.PsbIcfId, e.PsbIcfvId }, "psb_pnd_icf_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PsbId).HasColumnName("psb_id");
            entity.Property(e => e.PsbIcfId).HasColumnName("psb_icf_id");
            entity.Property(e => e.PsbIcfvId).HasColumnName("psb_icfv_id");
            entity.Property(e => e.PsbPndId).HasColumnName("psb_pnd_id");

            entity.HasOne(d => d.PsbPnd).WithMany(p => p.PromotionsliceBuys)
                .HasForeignKey(d => d.PsbPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSB_REF_PND");
        });

        modelBuilder.Entity<PromotionsliceBuyDetail>(entity =>
        {
            entity.HasKey(e => e.PsbdId).HasFillFactor(90);

            entity.ToTable("PROMOTIONSLICE_BUY_DETAIL", "sls");

            entity.HasIndex(e => new { e.PsbdPndId, e.PsbdSlice }, "pnsd_pnd_slice_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PsbdId).HasColumnName("psbd_id");
            entity.Property(e => e.PsbdForeach)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_foreach");
            entity.Property(e => e.PsbdFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_from");
            entity.Property(e => e.PsbdGet)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_get");
            entity.Property(e => e.PsbdGetMax)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_get_max");
            entity.Property(e => e.PsbdGetPerc)
                .HasDefaultValue(100m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_get_perc");
            entity.Property(e => e.PsbdPndId).HasColumnName("psbd_pnd_id");
            entity.Property(e => e.PsbdSlice)
                .HasDefaultValue(1)
                .HasColumnName("psbd_slice");
            entity.Property(e => e.PsbdTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psbd_to");
            entity.Property(e => e.PsbdUomIdBuy).HasColumnName("psbd_uom_id_buy");
            entity.Property(e => e.PsbdUomIdGet).HasColumnName("psbd_uom_id_get");

            entity.HasOne(d => d.PsbdPnd).WithMany(p => p.PromotionsliceBuyDetails)
                .HasForeignKey(d => d.PsbdPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSBD_REF_PND");

            entity.HasOne(d => d.PsbdUomIdBuyNavigation).WithMany(p => p.PromotionsliceBuyDetailPsbdUomIdBuyNavigations)
                .HasForeignKey(d => d.PsbdUomIdBuy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSBD_REF_UOM_BUY");

            entity.HasOne(d => d.PsbdUomIdGetNavigation).WithMany(p => p.PromotionsliceBuyDetailPsbdUomIdGetNavigations)
                .HasForeignKey(d => d.PsbdUomIdGet)
                .HasConstraintName("FK_PSBD_REF_UOM_GET");
        });

        modelBuilder.Entity<PromotionsliceGet>(entity =>
        {
            entity.HasKey(e => e.PsgId).HasFillFactor(90);

            entity.ToTable("PROMOTIONSLICE_GET", "sls");

            entity.HasIndex(e => new { e.PsgPndId, e.PsgIcfId, e.PsgIcfvId }, "psg_pnd_icf_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PsgId).HasColumnName("psg_id");
            entity.Property(e => e.PsgIcfId).HasColumnName("psg_icf_id");
            entity.Property(e => e.PsgIcfvId).HasColumnName("psg_icfv_id");
            entity.Property(e => e.PsgPndId).HasColumnName("psg_pnd_id");

            entity.HasOne(d => d.PsgPnd).WithMany(p => p.PromotionsliceGets)
                .HasForeignKey(d => d.PsgPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSG_REF_PND");
        });

        modelBuilder.Entity<PromotionsliceGetDetail>(entity =>
        {
            entity.HasKey(e => e.PsgdId).HasFillFactor(90);

            entity.ToTable("PROMOTIONSLICE_GET_DETAIL", "sls");

            entity.HasIndex(e => new { e.PsgdPndId, e.PsgdSlice }, "pnsd_pnd_pns_slice_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PsgdId).HasColumnName("psgd_id");
            entity.Property(e => e.PsgdGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psgd_get");
            entity.Property(e => e.PsgdGetMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psgd_get_max");
            entity.Property(e => e.PsgdGetPerc)
                .HasDefaultValue(100m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("psgd_get_perc");
            entity.Property(e => e.PsgdPndId).HasColumnName("psgd_pnd_id");
            entity.Property(e => e.PsgdSlice)
                .HasDefaultValue(1)
                .HasColumnName("psgd_slice");
            entity.Property(e => e.PsgdUomId).HasColumnName("psgd_uom_id");

            entity.HasOne(d => d.PsgdPnd).WithMany(p => p.PromotionsliceGetDetails)
                .HasForeignKey(d => d.PsgdPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSGD_REF_PND");

            entity.HasOne(d => d.PsgdUom).WithMany(p => p.PromotionsliceGetDetails)
                .HasForeignKey(d => d.PsgdUomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSGD_REF_UOM_GET");
        });

        modelBuilder.Entity<ProspectThirdpartysite>(entity =>
        {
            entity.HasKey(e => e.PthpsId).HasFillFactor(90);

            entity.ToTable("PROSPECT_THIRDPARTYSITE", "cmn");

            entity.Property(e => e.PthpsId).HasColumnName("pthps_id");
            entity.Property(e => e.PthpsActive)
                .HasDefaultValue((short)1)
                .HasColumnName("pthps_active");
            entity.Property(e => e.PthpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("pthps_address1");
            entity.Property(e => e.PthpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("pthps_address2");
            entity.Property(e => e.PthpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("pthps_address3");
            entity.Property(e => e.PthpsBarcode)
                .HasMaxLength(32)
                .HasColumnName("pthps_barcode");
            entity.Property(e => e.PthpsCdIdBst).HasColumnName("pthps_cd_id_bst");
            entity.Property(e => e.PthpsCdIdPsts).HasColumnName("pthps_cd_id_psts");
            entity.Property(e => e.PthpsCdIdTpg).HasColumnName("pthps_cd_id_tpg");
            entity.Property(e => e.PthpsCode)
                .HasMaxLength(32)
                .HasColumnName("pthps_code");
            entity.Property(e => e.PthpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("pthps_contact_name_lan1");
            entity.Property(e => e.PthpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("pthps_contact_name_lan2");
            entity.Property(e => e.PthpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("pthps_contact_name_lan3");
            entity.Property(e => e.PthpsCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("pthps_create_date");
            entity.Property(e => e.PthpsEmail)
                .HasMaxLength(32)
                .HasColumnName("pthps_email");
            entity.Property(e => e.PthpsFax)
                .HasMaxLength(15)
                .HasColumnName("pthps_fax");
            entity.Property(e => e.PthpsGlId).HasColumnName("pthps_gl_id");
            entity.Property(e => e.PthpsImpUid)
                .HasMaxLength(128)
                .HasColumnName("pthps_imp_uid");
            entity.Property(e => e.PthpsLatitude)
                .HasMaxLength(32)
                .HasColumnName("pthps_latitude");
            entity.Property(e => e.PthpsLongitude)
                .HasMaxLength(32)
                .HasColumnName("pthps_longitude");
            entity.Property(e => e.PthpsMobile1)
                .HasMaxLength(15)
                .HasColumnName("pthps_mobile1");
            entity.Property(e => e.PthpsMobile2)
                .HasMaxLength(15)
                .HasColumnName("pthps_mobile2");
            entity.Property(e => e.PthpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("pthps_name_lan1");
            entity.Property(e => e.PthpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("pthps_name_lan2");
            entity.Property(e => e.PthpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("pthps_name_lan3");
            entity.Property(e => e.PthpsOrgId).HasColumnName("pthps_org_id");
            entity.Property(e => e.PthpsPhone1)
                .HasMaxLength(15)
                .HasColumnName("pthps_phone1");
            entity.Property(e => e.PthpsPhone2)
                .HasMaxLength(15)
                .HasColumnName("pthps_phone2");
            entity.Property(e => e.PthpsPlId).HasColumnName("pthps_pl_id");
            entity.Property(e => e.PthpsProfileImage)
                .HasMaxLength(1000)
                .HasColumnName("pthps_profile_image");
            entity.Property(e => e.PthpsRemarks)
                .HasMaxLength(255)
                .HasColumnName("pthps_remarks");
            entity.Property(e => e.PthpsThpsId).HasColumnName("pthps_thps_id");
            entity.Property(e => e.PthpsUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("pthps_update_date");
            entity.Property(e => e.PthpsUsIdCr).HasColumnName("pthps_us_id_cr");
            entity.Property(e => e.PthpsUsIdUp).HasColumnName("pthps_us_id_up");
            entity.Property(e => e.PthpsWebsite)
                .HasMaxLength(32)
                .HasColumnName("pthps_website");

            entity.HasOne(d => d.PthpsCdIdBstNavigation).WithMany(p => p.ProspectThirdpartysitePthpsCdIdBstNavigations)
                .HasForeignKey(d => d.PthpsCdIdBst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PTHPS_REF_CDBST");

            entity.HasOne(d => d.PthpsCdIdPstsNavigation).WithMany(p => p.ProspectThirdpartysitePthpsCdIdPstsNavigations)
                .HasForeignKey(d => d.PthpsCdIdPsts)
                .HasConstraintName("FK_PTHPS_REF_CD_PSTS");

            entity.HasOne(d => d.PthpsCdIdTpgNavigation).WithMany(p => p.ProspectThirdpartysitePthpsCdIdTpgNavigations)
                .HasForeignKey(d => d.PthpsCdIdTpg)
                .HasConstraintName("FK_PTHPS_REF_CDTPG");

            entity.HasOne(d => d.PthpsGl).WithMany(p => p.ProspectThirdpartysites)
                .HasForeignKey(d => d.PthpsGlId)
                .HasConstraintName("FK_PTHPS_REF_GL");

            entity.HasOne(d => d.PthpsPl).WithMany(p => p.ProspectThirdpartysites)
                .HasForeignKey(d => d.PthpsPlId)
                .HasConstraintName("FK_PTHPS_REF_PL");

            entity.HasOne(d => d.PthpsUsIdCrNavigation).WithMany(p => p.ProspectThirdpartysitePthpsUsIdCrNavigations)
                .HasForeignKey(d => d.PthpsUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PTHPS_REF_US_CR");

            entity.HasOne(d => d.PthpsUsIdUpNavigation).WithMany(p => p.ProspectThirdpartysitePthpsUsIdUpNavigations)
                .HasForeignKey(d => d.PthpsUsIdUp)
                .HasConstraintName("FK_PTHPS_REF_US_UP");
        });

        modelBuilder.Entity<PushNotification>(entity =>
        {
            entity.HasKey(e => e.PnId)
                .HasName("PK_push_notification")
                .HasFillFactor(90);

            entity.ToTable("PUSH_NOTIFICATION", "cmn");

            entity.Property(e => e.PnId).HasColumnName("pn_id");
            entity.Property(e => e.PnAction)
                .HasMaxLength(1000)
                .HasColumnName("pn_action");
            entity.Property(e => e.PnActionParams)
                .HasMaxLength(1000)
                .HasColumnName("pn_action_params");
            entity.Property(e => e.PnDescription)
                .HasMaxLength(4000)
                .HasColumnName("pn_description");
            entity.Property(e => e.PnIcon)
                .HasMaxLength(100)
                .HasColumnName("pn_icon");
            entity.Property(e => e.PnSession).HasColumnName("pn_session");
            entity.Property(e => e.PnStatus).HasColumnName("pn_status");
            entity.Property(e => e.PnSubject)
                .HasMaxLength(128)
                .HasColumnName("pn_subject");
            entity.Property(e => e.PnToken).HasColumnName("pn_token");
            entity.Property(e => e.PnUsId).HasColumnName("pn_us_id");
        });

        modelBuilder.Entity<QlikDashboard>(entity =>
        {
            entity.HasKey(e => e.QlId).HasFillFactor(90);

            entity.ToTable("QLIK_DASHBOARD", "cmn");

            entity.Property(e => e.QlId).HasColumnName("ql_id");
            entity.Property(e => e.QlAppId)
                .HasMaxLength(255)
                .HasColumnName("ql_app_id");
            entity.Property(e => e.QlClientSize)
                .HasMaxLength(50)
                .HasColumnName("ql_client_size");
            entity.Property(e => e.QlCode)
                .HasMaxLength(20)
                .HasColumnName("ql_code");
            entity.Property(e => e.QlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan1");
            entity.Property(e => e.QlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan2");
            entity.Property(e => e.QlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("ql_description_lan3");
            entity.Property(e => e.QlIsDefault).HasColumnName("ql_is_default");
            entity.Property(e => e.QlObjectId)
                .HasMaxLength(50)
                .HasColumnName("ql_object_id");
            entity.Property(e => e.QlOption)
                .HasMaxLength(50)
                .HasColumnName("ql_option");
            entity.Property(e => e.QlOrder).HasColumnName("ql_order");
            entity.Property(e => e.QlSelect)
                .HasMaxLength(50)
                .HasColumnName("ql_select");
            entity.Property(e => e.QlSheet)
                .HasMaxLength(50)
                .HasColumnName("ql_sheet");
            entity.Property(e => e.QlTitleLan1)
                .HasMaxLength(50)
                .HasColumnName("ql_title_lan1");
            entity.Property(e => e.QlTitleLan2)
                .HasMaxLength(50)
                .HasColumnName("ql_title_lan2");
            entity.Property(e => e.QlTitleLan3)
                .HasMaxLength(50)
                .HasColumnName("ql_title_lan3");
        });

        modelBuilder.Entity<QlikDashboardUser>(entity =>
        {
            entity.HasKey(e => e.QluId).HasFillFactor(90);

            entity.ToTable("QLIK_DASHBOARD_USER", "cmn");

            entity.Property(e => e.QluId).HasColumnName("qlu_id");
            entity.Property(e => e.QluActive).HasColumnName("qlu_active");
            entity.Property(e => e.QluEffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("qlu_effective_date");
            entity.Property(e => e.QluExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("qlu_expiry_date");
            entity.Property(e => e.QluIsDefault).HasColumnName("qlu_is_default");
            entity.Property(e => e.QluOption)
                .HasMaxLength(50)
                .HasColumnName("qlu_option");
            entity.Property(e => e.QluOrder).HasColumnName("qlu_order");
            entity.Property(e => e.QluPrId).HasColumnName("qlu_pr_id");
            entity.Property(e => e.QluQlId).HasColumnName("qlu_ql_id");
            entity.Property(e => e.QluUsIs).HasColumnName("qlu_us_is");

            entity.HasOne(d => d.QluPr).WithMany(p => p.QlikDashboardUsers)
                .HasForeignKey(d => d.QluPrId)
                .HasConstraintName("FK_QLU_REF_PR");

            entity.HasOne(d => d.QluQl).WithMany(p => p.QlikDashboardUsers)
                .HasForeignKey(d => d.QluQlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QL_REF_QLU");

            entity.HasOne(d => d.QluUsIsNavigation).WithMany(p => p.QlikDashboardUsers)
                .HasForeignKey(d => d.QluUsIs)
                .HasConstraintName("FK_QLU_REF_US");
        });

        modelBuilder.Entity<QlikReload>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(90);

            entity.ToTable("QLIK_RELOAD");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<QueryDesign>(entity =>
        {
            entity.HasKey(e => e.QdId).HasFillFactor(90);

            entity.ToTable("QUERY_DESIGN", "cmn");

            entity.Property(e => e.QdId).HasColumnName("qd_id");
            entity.Property(e => e.QdAttribute)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("qd_attribute");
            entity.Property(e => e.QdDbObjectName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qd_db_object_name");
        });

        modelBuilder.Entity<QueryDesignDetail>(entity =>
        {
            entity.HasKey(e => e.QddId).HasFillFactor(90);

            entity.ToTable("QUERY_DESIGN_DETAIL", "cmn");

            entity.Property(e => e.QddId).HasColumnName("qdd_id");
            entity.Property(e => e.QddAttribute)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("qdd_attribute");
            entity.Property(e => e.QddColumnAlias)
                .HasMaxLength(50)
                .HasColumnName("qdd_column_alias");
            entity.Property(e => e.QddColumnAlign)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("qdd_column_align");
            entity.Property(e => e.QddColumnFormat)
                .HasMaxLength(20)
                .HasColumnName("qdd_column_format");
            entity.Property(e => e.QddColumnName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("qdd_column_name");
            entity.Property(e => e.QddColumnOrder).HasColumnName("qdd_column_order");
            entity.Property(e => e.QddColumnWidth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("qdd_column_width");
            entity.Property(e => e.QddIsPrimaryKey).HasColumnName("qdd_is_primary_key");
            entity.Property(e => e.QddQdId).HasColumnName("qdd_qd_id");
            entity.Property(e => e.QddSortOrder).HasColumnName("qdd_sort_order");
            entity.Property(e => e.QddWrapText).HasColumnName("qdd_wrap_text");

            entity.HasOne(d => d.QddQd).WithMany(p => p.QueryDesignDetails)
                .HasForeignKey(d => d.QddQdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QDD_REF_QD");
        });

        modelBuilder.Entity<RebuildIndexesV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REBUILD_INDEXES_V");

            entity.Property(e => e.Cmd)
                .HasMaxLength(490)
                .HasColumnName("cmd");
            entity.Property(e => e.Ord).HasColumnName("ord");
            entity.Property(e => e.TableCatalog)
                .HasMaxLength(128)
                .HasColumnName("table_catalog");
            entity.Property(e => e.TableName)
                .HasMaxLength(128)
                .HasColumnName("table_name");
            entity.Property(e => e.TableSchema)
                .HasMaxLength(128)
                .HasColumnName("table_schema");
            entity.Property(e => e.TableType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("table_type");
        });

        modelBuilder.Entity<ReceiptInvoiceNb>(entity =>
        {
            entity.HasKey(e => e.RiId).HasFillFactor(90);

            entity.ToTable("RECEIPT_INVOICE_NB", "mforce");

            entity.HasIndex(e => new { e.RiSmId, e.RiPrefix }, "ri_prefix_sm_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.RiId).HasColumnName("ri_id");
            entity.Property(e => e.RiBeId).HasColumnName("ri_be_id");
            entity.Property(e => e.RiCdIdRit).HasColumnName("ri_cd_id_rit");
            entity.Property(e => e.RiFeId).HasColumnName("ri_fe_id");
            entity.Property(e => e.RiFromCode)
                .HasMaxLength(50)
                .HasColumnName("ri_from_code");
            entity.Property(e => e.RiIsCreated).HasColumnName("ri_is_created");
            entity.Property(e => e.RiIsModified).HasColumnName("ri_is_modified");
            entity.Property(e => e.RiPrefix)
                .HasMaxLength(32)
                .HasColumnName("ri_prefix");
            entity.Property(e => e.RiSmId).HasColumnName("ri_sm_id");
            entity.Property(e => e.RiToCode)
                .HasMaxLength(50)
                .HasColumnName("ri_to_code");
            entity.Property(e => e.RiTotalLength)
                .HasDefaultValue((short)16)
                .HasColumnName("ri_total_length");
            entity.Property(e => e.RiType)
                .HasMaxLength(50)
                .HasColumnName("ri_type");
        });

        modelBuilder.Entity<ReceiptInvoiceNbSnc>(entity =>
        {
            entity.HasKey(e => new { e.SRiId, e.SRiSmId, e.SRiVersion }).HasFillFactor(90);

            entity.ToTable("RECEIPT_INVOICE_NB_SNC", "syn");

            entity.Property(e => e.SRiId).HasColumnName("s_ri_id");
            entity.Property(e => e.SRiSmId).HasColumnName("s_ri_sm_id");
            entity.Property(e => e.SRiVersion)
                .HasMaxLength(25)
                .HasColumnName("s_ri_version");
            entity.Property(e => e.SRiCpCode)
                .HasMaxLength(50)
                .HasColumnName("s_ri_cp_code");
            entity.Property(e => e.SRiFeId).HasColumnName("s_ri_fe_id");
            entity.Property(e => e.SRiFromCode)
                .HasMaxLength(50)
                .HasColumnName("s_ri_from_code");
            entity.Property(e => e.SRiIsModified).HasColumnName("s_ri_is_modified");
            entity.Property(e => e.SRiPrefix)
                .HasMaxLength(16)
                .HasColumnName("s_ri_prefix");
            entity.Property(e => e.SRiSynched)
                .HasMaxLength(5)
                .HasColumnName("s_ri_synched");
            entity.Property(e => e.SRiToCode)
                .HasMaxLength(50)
                .HasColumnName("s_ri_to_code");
            entity.Property(e => e.SRiTotalLength)
                .HasDefaultValue((short)8)
                .HasColumnName("s_ri_total_length");
            entity.Property(e => e.SRiType)
                .HasMaxLength(50)
                .HasColumnName("s_ri_type");
        });

        modelBuilder.Entity<Reconciliation2ef4aa2268b94cbb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation2ef4aa2268b94cbb", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation5e56f08ace6f4af2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation5e56f08ace6f4af2", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation66192a342182445e>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation66192a342182445e", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation6dbda6e61c9c4dc6>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation6dbda6e61c9c4dc6", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation76e14e50e9b54fe6>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation76e14e50e9b54fe6", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation83b5b75428f64129>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation83b5b75428f64129", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation840d3606df3e4329>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation840d3606df3e4329", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation88ea321c891241ca>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation88ea321c891241ca", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliation9a7537ec870941b7>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliation9a7537ec870941b7", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<ReconciliationDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.SRcdId, e.SRcdSmId, e.SRcdVersion }).HasFillFactor(90);

            entity.ToTable("RECONCILIATION_DETAIL_SNC", "syn");

            entity.Property(e => e.SRcdId).HasColumnName("s_rcd_id");
            entity.Property(e => e.SRcdSmId).HasColumnName("s_rcd_sm_id");
            entity.Property(e => e.SRcdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_rcd_version");
            entity.Property(e => e.SRcdCdIdRct).HasColumnName("s_rcd_cd_id_rct");
            entity.Property(e => e.SRcdExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_rcd_expiry_date");
            entity.Property(e => e.SRcdLotNb)
                .HasMaxLength(30)
                .HasColumnName("s_rcd_lot_nb");
            entity.Property(e => e.SRcdPackQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_pack_qty");
            entity.Property(e => e.SRcdPerpQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_perp_qty");
            entity.Property(e => e.SRcdPrId).HasColumnName("s_rcd_pr_id");
            entity.Property(e => e.SRcdProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("s_rcd_production_date");
            entity.Property(e => e.SRcdRcId).HasColumnName("s_rcd_rc_id");
            entity.Property(e => e.SRcdRcUid)
                .HasMaxLength(128)
                .HasColumnName("s_rcd_rc_uid");
            entity.Property(e => e.SRcdSynched).HasColumnName("s_rcd_synched");
            entity.Property(e => e.SRcdTotalUnit)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_total_unit");
            entity.Property(e => e.SRcdUnitPerPack)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_unit_per_pack");
            entity.Property(e => e.SRcdUnitsQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_units_qty");
            entity.Property(e => e.SRcdVariance)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_rcd_variance");
        });

        modelBuilder.Entity<ReconciliationSnc>(entity =>
        {
            entity.HasKey(e => new { e.SRcId, e.SRcSmId, e.SRcVersion }).HasFillFactor(90);

            entity.ToTable("RECONCILIATION_SNC", "syn");

            entity.Property(e => e.SRcId).HasColumnName("s_rc_id");
            entity.Property(e => e.SRcSmId).HasColumnName("s_rc_sm_id");
            entity.Property(e => e.SRcVersion)
                .HasMaxLength(25)
                .HasColumnName("s_rc_version");
            entity.Property(e => e.SRcCdIdRpa).HasColumnName("s_rc_cd_id_rpa");
            entity.Property(e => e.SRcCode)
                .HasMaxLength(64)
                .HasColumnName("s_rc_code");
            entity.Property(e => e.SRcComment)
                .HasMaxLength(100)
                .HasColumnName("s_rc_comment");
            entity.Property(e => e.SRcDate)
                .HasColumnType("datetime")
                .HasColumnName("s_rc_date");
            entity.Property(e => e.SRcIsCreated).HasColumnName("s_rc_is_created");
            entity.Property(e => e.SRcSignFilename)
                .HasMaxLength(100)
                .HasColumnName("s_rc_sign_filename");
            entity.Property(e => e.SRcSynched).HasColumnName("s_rc_synched");
            entity.Property(e => e.SRcUid)
                .HasMaxLength(128)
                .HasColumnName("s_rc_uid");
        });

        modelBuilder.Entity<Reconciliationa5b639d4c6c34e6d>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliationa5b639d4c6c34e6d", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliationb5f2cfb5dffd45d1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliationb5f2cfb5dffd45d1", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliatione9a2987d9d1f40b1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliatione9a2987d9d1f40b1", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<Reconciliationfb0c36cd3d5d4244>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Reconciliationfb0c36cd3d5d4244", "cmn");

            entity.Property(e => e.MvBuId).HasColumnName("mv_bu_id");
            entity.Property(e => e.MvCdIdCms).HasColumnName("mv_cd_id_cms");
            entity.Property(e => e.MvCdIdSrc).HasColumnName("mv_cd_id_src");
            entity.Property(e => e.MvCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_create_date");
            entity.Property(e => e.MvDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_date");
            entity.Property(e => e.MvDueDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_due_date");
            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.MvModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("mv_modified_date");
            entity.Property(e => e.MvMssId).HasColumnName("mv_mss_id");
            entity.Property(e => e.MvMvtId).HasColumnName("mv_mvt_id");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.MvOrgId).HasColumnName("mv_org_id");
            entity.Property(e => e.MvOurReference)
                .HasMaxLength(32)
                .HasColumnName("mv_our_reference");
            entity.Property(e => e.MvPlIdWhsFrom).HasColumnName("mv_pl_id_whs_from");
            entity.Property(e => e.MvPlIdWhsTo).HasColumnName("mv_pl_id_whs_to");
            entity.Property(e => e.MvRemarks)
                .HasMaxLength(255)
                .HasColumnName("mv_remarks");
            entity.Property(e => e.MvSgdId).HasColumnName("mv_sgd_id");
            entity.Property(e => e.MvTheirReference)
                .HasMaxLength(32)
                .HasColumnName("mv_their_reference");
            entity.Property(e => e.MvThpId).HasColumnName("mv_thp_id");
            entity.Property(e => e.MvUsId).HasColumnName("mv_us_id");
            entity.Property(e => e.MvtDesc)
                .HasMaxLength(255)
                .HasColumnName("mvt_desc");
            entity.Property(e => e.MvtStatus)
                .HasMaxLength(255)
                .HasColumnName("mvt_status");
            entity.Property(e => e.MvtType)
                .HasMaxLength(50)
                .HasColumnName("mvt_type");
            entity.Property(e => e.MvtUsName)
                .HasMaxLength(50)
                .HasColumnName("mvt_us_name");
            entity.Property(e => e.PlDescFrom)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_from");
            entity.Property(e => e.PlDescTo)
                .HasMaxLength(100)
                .HasColumnName("pl_desc_to");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<RegisteredDevice>(entity =>
        {
            entity.HasKey(e => e.RdId).HasFillFactor(90);

            entity.ToTable("REGISTERED_DEVICES", "mforce");

            entity.Property(e => e.RdId).HasColumnName("rd_id");
            entity.Property(e => e.RdActive)
                .HasDefaultValue(1)
                .HasColumnName("rd_active");
            entity.Property(e => e.RdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("rd_date");
            entity.Property(e => e.RdFirst).HasColumnName("rd_first");
            entity.Property(e => e.RdKey)
                .HasMaxLength(64)
                .HasColumnName("rd_key");
            entity.Property(e => e.RdLast).HasColumnName("rd_last");
            entity.Property(e => e.RdModel)
                .HasMaxLength(64)
                .HasColumnName("rd_model");
            entity.Property(e => e.RdSn)
                .HasMaxLength(64)
                .HasColumnName("rd_sn");
            entity.Property(e => e.RdUnlockKey)
                .HasMaxLength(64)
                .HasColumnName("rd_unlock_key");
        });

        modelBuilder.Entity<RegisteredDevicesSnc>(entity =>
        {
            entity.HasKey(e => new { e.SRdId, e.SRdSmId }).HasFillFactor(90);

            entity.ToTable("REGISTERED_DEVICES_SNC", "syn");

            entity.Property(e => e.SRdId).HasColumnName("s_rd_id");
            entity.Property(e => e.SRdSmId).HasColumnName("s_rd_sm_id");
            entity.Property(e => e.SRdDate).HasColumnName("s_rd_date");
            entity.Property(e => e.SRdIsCurrent).HasColumnName("s_rd_is_current");
            entity.Property(e => e.SRdKey)
                .HasMaxLength(64)
                .HasColumnName("s_rd_key");
            entity.Property(e => e.SRdModel)
                .HasMaxLength(64)
                .HasColumnName("s_rd_model");
            entity.Property(e => e.SRdSn)
                .HasMaxLength(64)
                .HasColumnName("s_rd_sn");
            entity.Property(e => e.SRdUnlockKey)
                .HasMaxLength(64)
                .HasColumnName("s_rd_unlock_key");
            entity.Property(e => e.SRdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_rd_version");
        });

        modelBuilder.Entity<ReleaseVersion>(entity =>
        {
            entity.HasKey(e => e.NrId).HasFillFactor(90);

            entity.ToTable("RELEASE_VERSION", "utl");

            entity.Property(e => e.NrId).HasColumnName("nr_id");
            entity.Property(e => e.NrActive).HasColumnName("nr_active");
            entity.Property(e => e.NrCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("nr_creation_date");
            entity.Property(e => e.NrLocalIp)
                .HasMaxLength(128)
                .HasColumnName("nr_local_ip");
            entity.Property(e => e.NrLocalPath)
                .HasMaxLength(1024)
                .HasColumnName("nr_local_path");
            entity.Property(e => e.NrPublicIp)
                .HasMaxLength(128)
                .HasColumnName("nr_public_ip");
            entity.Property(e => e.NrPublicPath)
                .HasMaxLength(1024)
                .HasColumnName("nr_public_path");
            entity.Property(e => e.NrVersionDetails).HasColumnName("nr_version_details");
            entity.Property(e => e.NrVersionPatchLevel)
                .HasMaxLength(255)
                .HasColumnName("nr_version_patch_level");
            entity.Property(e => e.NrVersionSize)
                .HasMaxLength(255)
                .HasColumnName("nr_version_size");
            entity.Property(e => e.NrVersionText)
                .HasMaxLength(255)
                .HasColumnName("nr_version_text");
            entity.Property(e => e.NrVersionValue)
                .HasMaxLength(255)
                .HasColumnName("nr_version_value");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.RpId).HasFillFactor(90);

            entity.ToTable("REPORT", "cmn");

            entity.Property(e => e.RpId).HasColumnName("rp_id");
            entity.Property(e => e.RpActive).HasColumnName("rp_active");
            entity.Property(e => e.RpCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("rp_code");
            entity.Property(e => e.RpCompress).HasColumnName("rp_compress");
            entity.Property(e => e.RpCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rp_create_date");
            entity.Property(e => e.RpDestinationFile)
                .HasMaxLength(255)
                .HasColumnName("rp_destination_file");
            entity.Property(e => e.RpDestinationVirtualPath)
                .HasMaxLength(255)
                .HasColumnName("rp_destination_virtual_path");
            entity.Property(e => e.RpExcelSheetName)
                .HasMaxLength(50)
                .HasColumnName("rp_excel_sheet_name");
            entity.Property(e => e.RpFilePassword)
                .HasMaxLength(20)
                .HasColumnName("rp_file_password");
            entity.Property(e => e.RpGroup)
                .HasMaxLength(50)
                .HasColumnName("rp_group");
            entity.Property(e => e.RpIsRequested).HasColumnName("rp_is_requested");
            entity.Property(e => e.RpModifiedDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rp_modified_date");
            entity.Property(e => e.RpPostSql).HasColumnName("rp_post_sql");
            entity.Property(e => e.RpPreSql).HasColumnName("rp_pre_sql");
            entity.Property(e => e.RpSendmail).HasColumnName("rp_sendmail");
            entity.Property(e => e.RpSourceFile)
                .HasMaxLength(255)
                .HasColumnName("rp_source_file");
            entity.Property(e => e.RpTempFile)
                .HasMaxLength(255)
                .HasColumnName("rp_temp_file");
            entity.Property(e => e.RpTitle)
                .HasMaxLength(100)
                .HasColumnName("rp_title");
            entity.Property(e => e.RpTsql).HasColumnName("rp_tsql");
            entity.Property(e => e.RpUsIdCreatedby).HasColumnName("rp_us_id_createdby");
            entity.Property(e => e.RpUsIdModifiedby).HasColumnName("rp_us_id_modifiedby");
        });

        modelBuilder.Entity<ReportMail>(entity =>
        {
            entity.HasKey(e => e.RpmId).HasFillFactor(90);

            entity.ToTable("REPORT_MAIL", "cmn");

            entity.Property(e => e.RpmId).HasColumnName("rpm_id");
            entity.Property(e => e.RpmActive).HasColumnName("rpm_active");
            entity.Property(e => e.RpmBcc)
                .HasMaxLength(255)
                .HasColumnName("rpm_bcc");
            entity.Property(e => e.RpmBody).HasColumnName("rpm_body");
            entity.Property(e => e.RpmCc)
                .HasMaxLength(255)
                .HasColumnName("rpm_cc");
            entity.Property(e => e.RpmIsHtml).HasColumnName("rpm_is_html");
            entity.Property(e => e.RpmPriority).HasColumnName("rpm_priority");
            entity.Property(e => e.RpmProfile)
                .HasMaxLength(50)
                .HasColumnName("rpm_profile");
            entity.Property(e => e.RpmRpId).HasColumnName("rpm_rp_id");
            entity.Property(e => e.RpmSubject)
                .HasMaxLength(100)
                .HasColumnName("rpm_subject");
            entity.Property(e => e.RpmTo)
                .HasMaxLength(255)
                .HasColumnName("rpm_to");

            entity.HasOne(d => d.RpmRp).WithMany(p => p.ReportMails)
                .HasForeignKey(d => d.RpmRpId)
                .HasConstraintName("FK_RPM_REF_RP");
        });

        modelBuilder.Entity<ReportRequest>(entity =>
        {
            entity.HasKey(e => e.RprId).HasFillFactor(90);

            entity.ToTable("REPORT_REQUEST", "cmn");

            entity.Property(e => e.RprId).HasColumnName("rpr_id");
            entity.Property(e => e.RprCdIdRrs).HasColumnName("rpr_cd_id_rrs");
            entity.Property(e => e.RprDownloadDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rpr_download_date");
            entity.Property(e => e.RprDownloadLink)
                .HasMaxLength(255)
                .HasColumnName("rpr_download_link");
            entity.Property(e => e.RprExecutionDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rpr_execution_date");
            entity.Property(e => e.RprRequestDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rpr_request_date");
            entity.Property(e => e.RprRpId).HasColumnName("rpr_rp_id");
            entity.Property(e => e.RprSessionId)
                .HasMaxLength(20)
                .HasColumnName("rpr_session_id");
            entity.Property(e => e.RprUsId).HasColumnName("rpr_us_id");

            entity.HasOne(d => d.RprCdIdRrsNavigation).WithMany(p => p.ReportRequests)
                .HasForeignKey(d => d.RprCdIdRrs)
                .HasConstraintName("FK_RPR_REF_CD_RRS");

            entity.HasOne(d => d.RprRp).WithMany(p => p.ReportRequests)
                .HasForeignKey(d => d.RprRpId)
                .HasConstraintName("FK_RPR_REF_RP");

            entity.HasOne(d => d.RprUs).WithMany(p => p.ReportRequests)
                .HasForeignKey(d => d.RprUsId)
                .HasConstraintName("FK_RPR_REF_US");
        });

        modelBuilder.Entity<ReportSchedule>(entity =>
        {
            entity.HasKey(e => e.RpsId).HasFillFactor(90);

            entity.ToTable("REPORT_SCHEDULE", "cmn");

            entity.Property(e => e.RpsId).HasColumnName("rps_id");
            entity.Property(e => e.RpsActive).HasColumnName("rps_active");
            entity.Property(e => e.RpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rps_create_date");
            entity.Property(e => e.RpsDaily).HasColumnName("rps_daily");
            entity.Property(e => e.RpsDhId).HasColumnName("rps_dh_id");
            entity.Property(e => e.RpsModifiedDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("rps_modified_date");
            entity.Property(e => e.RpsMonthly).HasColumnName("rps_monthly");
            entity.Property(e => e.RpsOnce).HasColumnName("rps_once");
            entity.Property(e => e.RpsRpId).HasColumnName("rps_rp_id");
            entity.Property(e => e.RpsUsIdCreatedby).HasColumnName("rps_us_id_createdby");
            entity.Property(e => e.RpsUsIdModifiedby).HasColumnName("rps_us_id_modifiedby");
            entity.Property(e => e.RpsWeekly).HasColumnName("rps_weekly");

            entity.HasOne(d => d.RpsDh).WithMany(p => p.ReportSchedules)
                .HasForeignKey(d => d.RpsDhId)
                .HasConstraintName("FK_RPS_REF_DH");

            entity.HasOne(d => d.RpsRp).WithMany(p => p.ReportSchedules)
                .HasForeignKey(d => d.RpsRpId)
                .HasConstraintName("FK_RPS_REF_RP");
        });

        modelBuilder.Entity<Models.Route>(entity =>
        {
            entity.HasKey(e => e.RtId).HasFillFactor(90);

            entity.ToTable("ROUTE", "cmn");

            entity.Property(e => e.RtId).HasColumnName("rt_id");
            entity.Property(e => e.RtCode)
                .HasMaxLength(32)
                .HasColumnName("rt_code");
            entity.Property(e => e.RtComments)
                .HasMaxLength(1000)
                .HasColumnName("rt_comments");
            entity.Property(e => e.RtCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("rt_creation_date");
            entity.Property(e => e.RtDescriptionLan1).HasColumnName("rt_description_lan1");
            entity.Property(e => e.RtDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("rt_description_lan2");
            entity.Property(e => e.RtDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("rt_description_lan3");
            entity.Property(e => e.RtExecutionMode).HasColumnName("rt_execution_mode");
            entity.Property(e => e.RtFromDate).HasColumnName("rt_from_date");
            entity.Property(e => e.RtFromTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("rt_from_time");
            entity.Property(e => e.RtPlId).HasColumnName("rt_pl_id");
            entity.Property(e => e.RtRtsId).HasColumnName("rt_rts_id");
            entity.Property(e => e.RtToDate).HasColumnName("rt_to_date");
            entity.Property(e => e.RtToTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("rt_to_time");
            entity.Property(e => e.RtUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("rt_update_date");
            entity.Property(e => e.RtUsId).HasColumnName("rt_us_id");
            entity.Property(e => e.RtUsIdCr).HasColumnName("rt_us_id_cr");
            entity.Property(e => e.RtUsIdUp).HasColumnName("rt_us_id_up");

            entity.HasOne(d => d.RtRts).WithMany(p => p.Routes)
                .HasForeignKey(d => d.RtRtsId)
                .HasConstraintName("FK_RT_REF_RTS");

            entity.HasOne(d => d.RtUs).WithMany(p => p.Routes)
                .HasForeignKey(d => d.RtUsId)
                .HasConstraintName("FK_RT_REF_US");
        });

        modelBuilder.Entity<Route1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ROUTES");

            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.F4).HasMaxLength(255);
            entity.Property(e => e.F5).HasMaxLength(255);
            entity.Property(e => e.F6).HasMaxLength(255);
            entity.Property(e => e.Sept)
                .HasMaxLength(255)
                .HasColumnName("SEPT");
        });

        modelBuilder.Entity<RouteGeoLocation>(entity =>
        {
            entity.HasKey(e => e.RtgId).HasFillFactor(90);

            entity.ToTable("ROUTE_GEO_LOCATION", "cmn");

            entity.Property(e => e.RtgId).HasColumnName("rtg_id");
            entity.Property(e => e.RtgGlId).HasColumnName("rtg_gl_id");
            entity.Property(e => e.RtgRtId).HasColumnName("rtg_rt_id");

            entity.HasOne(d => d.RtgGl).WithMany(p => p.RouteGeoLocations)
                .HasForeignKey(d => d.RtgGlId)
                .HasConstraintName("FK_RTG_REF_GL");

            entity.HasOne(d => d.RtgRt).WithMany(p => p.RouteGeoLocations)
                .HasForeignKey(d => d.RtgRtId)
                .HasConstraintName("FK_RTG_REF_RT");
        });

        modelBuilder.Entity<RouteTask>(entity =>
        {
            entity.HasKey(e => e.RtaId).HasFillFactor(90);

            entity.ToTable("ROUTE_TASK", "cmn");

            entity.Property(e => e.RtaId).HasColumnName("rta_id");
            entity.Property(e => e.RtaComments)
                .HasMaxLength(255)
                .HasColumnName("rta_comments");
            entity.Property(e => e.RtaCompeletedDate)
                .HasColumnType("datetime")
                .HasColumnName("rta_compeleted_date");
            entity.Property(e => e.RtaCompleted)
                .HasDefaultValue((short)-1)
                .HasColumnName("rta_completed");
            entity.Property(e => e.RtaDate)
                .HasColumnType("datetime")
                .HasColumnName("rta_date");
            entity.Property(e => e.RtaOrder).HasColumnName("rta_order");
            entity.Property(e => e.RtaRtId).HasColumnName("rta_rt_id");
            entity.Property(e => e.RtaTasks)
                .HasMaxLength(255)
                .HasColumnName("rta_tasks");
            entity.Property(e => e.RtaThpsId).HasColumnName("rta_thps_id");
            entity.Property(e => e.RtaUsCompletedBy).HasColumnName("rta_us_completed_by");
            entity.Property(e => e.RtaUsCreatedBy).HasColumnName("rta_us_created_by");

            entity.HasOne(d => d.RtaRt).WithMany(p => p.RouteTasks)
                .HasForeignKey(d => d.RtaRtId)
                .HasConstraintName("FK_RTA_REF_RT");

            entity.HasOne(d => d.RtaThps).WithMany(p => p.RouteTasks)
                .HasForeignKey(d => d.RtaThpsId)
                .HasConstraintName("FK_RTA_REF_THPS");
        });

        modelBuilder.Entity<RouteTaskSnc>(entity =>
        {
            entity.HasKey(e => new { e.SRtaId, e.SRtaSmId, e.SRtaVersion }).HasFillFactor(90);

            entity.ToTable("ROUTE_TASK_SNC", "syn");

            entity.Property(e => e.SRtaId).HasColumnName("s_rta_id");
            entity.Property(e => e.SRtaSmId).HasColumnName("s_rta_sm_id");
            entity.Property(e => e.SRtaVersion)
                .HasMaxLength(25)
                .HasColumnName("s_rta_version");
            entity.Property(e => e.SRtaComments)
                .HasMaxLength(255)
                .HasColumnName("s_rta_comments");
            entity.Property(e => e.SRtaCompeletedDate)
                .HasColumnType("datetime")
                .HasColumnName("s_rta_compeleted_date");
            entity.Property(e => e.SRtaCompleted).HasColumnName("s_rta_completed");
            entity.Property(e => e.SRtaDate)
                .HasColumnType("datetime")
                .HasColumnName("s_rta_date");
            entity.Property(e => e.SRtaOrder).HasColumnName("s_rta_order");
            entity.Property(e => e.SRtaRtId).HasColumnName("s_rta_rt_id");
            entity.Property(e => e.SRtaSynched)
                .HasDefaultValue((short)0)
                .HasColumnName("s_rta_synched");
            entity.Property(e => e.SRtaTasks)
                .HasMaxLength(255)
                .HasColumnName("s_rta_tasks");
            entity.Property(e => e.SRtaThpsId).HasColumnName("s_rta_thps_id");
            entity.Property(e => e.SRtaUsCompletedBy).HasColumnName("s_rta_us_completed_by");
            entity.Property(e => e.SRtaUsCreatedBy).HasColumnName("s_rta_us_created_by");
            entity.Property(e => e.SRtaVtId).HasColumnName("s_rta_vt_id");
        });

        modelBuilder.Entity<RouteThirdpartySite>(entity =>
        {
            entity.HasKey(e => e.RtsId).HasFillFactor(90);

            entity.ToTable("ROUTE_THIRDPARTY_SITES", "cmn");

            entity.Property(e => e.RtsId).HasColumnName("rts_id");
            entity.Property(e => e.RtsOrder).HasColumnName("rts_order");
            entity.Property(e => e.RtsRtId).HasColumnName("rts_rt_id");
            entity.Property(e => e.RtsThpsId).HasColumnName("rts_thps_id");

            entity.HasOne(d => d.RtsRt).WithMany(p => p.RouteThirdpartySites)
                .HasForeignKey(d => d.RtsRtId)
                .HasConstraintName("FK_RTS_REF_RT");

            entity.HasOne(d => d.RtsThps).WithMany(p => p.RouteThirdpartySites)
                .HasForeignKey(d => d.RtsThpsId)
                .HasConstraintName("FK_RTT_REF_THPS");
        });

        modelBuilder.Entity<RouteTransaction>(entity =>
        {
            entity.HasKey(e => e.RttId).HasFillFactor(90);

            entity.ToTable("ROUTE_TRANSACTION", "cmn");

            entity.Property(e => e.RttId).HasColumnName("rtt_id");
            entity.Property(e => e.RttCollected).HasColumnName("rtt_collected");
            entity.Property(e => e.RttOrder).HasColumnName("rtt_order");
            entity.Property(e => e.RttRtId).HasColumnName("rtt_rt_id");
            entity.Property(e => e.RttTsId).HasColumnName("rtt_ts_id");

            entity.HasOne(d => d.RttRt).WithMany(p => p.RouteTransactions)
                .HasForeignKey(d => d.RttRtId)
                .HasConstraintName("FK_RTT_REF_RT");

            entity.HasOne(d => d.RttTs).WithMany(p => p.RouteTransactions)
                .HasForeignKey(d => d.RttTsId)
                .HasConstraintName("FK_RTT_REF_TS");
        });

        modelBuilder.Entity<RouteWarehouse>(entity =>
        {
            entity.HasKey(e => e.RtwId).HasFillFactor(90);

            entity.ToTable("ROUTE_WAREHOUSE", "cmn");

            entity.Property(e => e.RtwId).HasColumnName("rtw_id");
            entity.Property(e => e.RtwPlId).HasColumnName("rtw_pl_id");
            entity.Property(e => e.RtwRtId).HasColumnName("rtw_rt_id");

            entity.HasOne(d => d.RtwPl).WithMany(p => p.RouteWarehouses)
                .HasForeignKey(d => d.RtwPlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RTW_REF_PL");

            entity.HasOne(d => d.RtwRt).WithMany(p => p.RouteWarehouses)
                .HasForeignKey(d => d.RtwRtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RTW_REF_RT");
        });

        modelBuilder.Entity<Routestatus>(entity =>
        {
            entity.HasKey(e => e.RtsId).HasFillFactor(90);

            entity.ToTable("ROUTESTATUS", "cmn");

            entity.Property(e => e.RtsId)
                .ValueGeneratedNever()
                .HasColumnName("rts_id");
            entity.Property(e => e.RtsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("rts_code");
            entity.Property(e => e.RtsConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rts_confirmation_code");
            entity.Property(e => e.RtsDescriptionLan1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rts_description_lan1");
            entity.Property(e => e.RtsDescriptionLan2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rts_description_lan2");
            entity.Property(e => e.RtsDescriptionLan3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rts_description_lan3");
            entity.Property(e => e.RtsLabelCode)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rts_label_code");
            entity.Property(e => e.RtsOrder).HasColumnName("rts_order");
            entity.Property(e => e.RtsStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rts_style");
        });

        modelBuilder.Entity<RoutestatusTransition>(entity =>
        {
            entity.HasKey(e => e.RtstId).HasFillFactor(90);

            entity.ToTable("ROUTESTATUS_TRANSITION", "cmn");

            entity.Property(e => e.RtstId).HasColumnName("rtst_id");
            entity.Property(e => e.RtstExportData).HasColumnName("rtst_export_data");
            entity.Property(e => e.RtstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("rtst_extra_code");
            entity.Property(e => e.RtstRtsIdFrom).HasColumnName("rtst_rts_id_from");
            entity.Property(e => e.RtstRtsIdTo).HasColumnName("rtst_rts_id_to");

            entity.HasOne(d => d.RtstRtsIdFromNavigation).WithMany(p => p.RoutestatusTransitionRtstRtsIdFromNavigations)
                .HasForeignKey(d => d.RtstRtsIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RTST_REF_RTS_FROM");

            entity.HasOne(d => d.RtstRtsIdToNavigation).WithMany(p => p.RoutestatusTransitionRtstRtsIdToNavigations)
                .HasForeignKey(d => d.RtstRtsIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RTST_REF_RTS_TO");
        });

        modelBuilder.Entity<SalesAdjustmentSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSjId, e.SSjSmId, e.SSjVersion })
                .HasName("pk_sales_adjustment_snc")
                .HasFillFactor(90);

            entity.ToTable("SALES_ADJUSTMENT_SNC", "syn");

            entity.Property(e => e.SSjId).HasColumnName("s_sj_id");
            entity.Property(e => e.SSjSmId)
                .HasMaxLength(32)
                .HasColumnName("s_sj_sm_id");
            entity.Property(e => e.SSjVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sj_version");
            entity.Property(e => e.SSjAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sj_amount");
            entity.Property(e => e.SSjBeId).HasColumnName("s_sj_be_id");
            entity.Property(e => e.SSjComment)
                .HasMaxLength(128)
                .HasColumnName("s_sj_comment");
            entity.Property(e => e.SSjSjrId).HasColumnName("s_sj_sjr_id");
            entity.Property(e => e.SSjSoId).HasColumnName("s_sj_so_id");
        });

        modelBuilder.Entity<SalesAsset>(entity =>
        {
            entity.HasKey(e => e.AtId).HasFillFactor(90);

            entity.ToTable("SALES_ASSET", "sls");

            entity.HasIndex(e => e.AtCode, "at_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AtId).HasColumnName("at_id");
            entity.Property(e => e.AtBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("at_barcode");
            entity.Property(e => e.AtCdIdAtg).HasColumnName("at_cd_id_atg");
            entity.Property(e => e.AtCdIdAtn).HasColumnName("at_cd_id_atn");
            entity.Property(e => e.AtCdIdAts).HasColumnName("at_cd_id_ats");
            entity.Property(e => e.AtCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("at_code");
            entity.Property(e => e.AtDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("at_description_lan1");
            entity.Property(e => e.AtDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("at_description_lan2");
            entity.Property(e => e.AtDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("at_description_lan3");
            entity.Property(e => e.AtOrgId).HasColumnName("at_org_id");

            entity.HasOne(d => d.AtCdIdAtgNavigation).WithMany(p => p.SalesAssetAtCdIdAtgNavigations)
                .HasForeignKey(d => d.AtCdIdAtg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AT_REF_CD_ATG");

            entity.HasOne(d => d.AtCdIdAtnNavigation).WithMany(p => p.SalesAssetAtCdIdAtnNavigations)
                .HasForeignKey(d => d.AtCdIdAtn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AT_REF_CD_ATN");

            entity.HasOne(d => d.AtCdIdAtsNavigation).WithMany(p => p.SalesAssetAtCdIdAtsNavigations)
                .HasForeignKey(d => d.AtCdIdAts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AT_REF_CD_ATS");
        });

        modelBuilder.Entity<SalesAssetSnc>(entity =>
        {
            entity.HasKey(e => new { e.SAtId, e.SAtSmId, e.SAtVersion }).HasFillFactor(90);

            entity.ToTable("SALES_ASSET_SNC", "syn");

            entity.Property(e => e.SAtId).HasColumnName("s_at_id");
            entity.Property(e => e.SAtSmId).HasColumnName("s_at_sm_id");
            entity.Property(e => e.SAtVersion)
                .HasMaxLength(32)
                .HasColumnName("s_at_version");
            entity.Property(e => e.SAtBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("s_at_barcode");
            entity.Property(e => e.SAtCdIdAtg).HasColumnName("s_at_cd_id_atg");
            entity.Property(e => e.SAtCdIdAtn).HasColumnName("s_at_cd_id_atn");
            entity.Property(e => e.SAtCdIdAts).HasColumnName("s_at_cd_id_ats");
            entity.Property(e => e.SAtCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("s_at_code");
            entity.Property(e => e.SAtDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("s_at_description_lan1");
            entity.Property(e => e.SAtDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("s_at_description_lan2");
            entity.Property(e => e.SAtDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("s_at_description_lan3");
        });

        modelBuilder.Entity<SalesDetailsCfrSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSodId, e.SSodSmId, e.SSodVersion }).HasFillFactor(90);

            entity.ToTable("SALES_DETAILS_CFR_SNC", "syn");

            entity.Property(e => e.SSodId).HasColumnName("s_sod_id");
            entity.Property(e => e.SSodSmId)
                .HasMaxLength(32)
                .HasColumnName("s_sod_sm_id");
            entity.Property(e => e.SSodVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sod_version");
            entity.Property(e => e.SSodCdIdRtr).HasColumnName("s_sod_cd_id_rtr");
            entity.Property(e => e.SSodDvdId).HasColumnName("s_sod_dvd_id");
            entity.Property(e => e.SSodExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sod_expiry_date");
            entity.Property(e => e.SSodFree)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_free");
            entity.Property(e => e.SSodIsCreated).HasColumnName("s_sod_is_created");
            entity.Property(e => e.SSodIsPromo).HasColumnName("s_sod_is_promo");
            entity.Property(e => e.SSodLineDiscAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_amt");
            entity.Property(e => e.SSodLineDiscPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_perc");
            entity.Property(e => e.SSodLineSeq).HasColumnName("s_sod_line_seq");
            entity.Property(e => e.SSodLotNb)
                .HasMaxLength(30)
                .HasColumnName("s_sod_lot_nb");
            entity.Property(e => e.SSodPrId).HasColumnName("s_sod_pr_id");
            entity.Property(e => e.SSodPriceChanged).HasColumnName("s_sod_price_changed");
            entity.Property(e => e.SSodProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sod_production_date");
            entity.Property(e => e.SSodQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_quantity");
            entity.Property(e => e.SSodQuantitySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_quantity_sku");
            entity.Property(e => e.SSodRemark)
                .HasMaxLength(255)
                .HasColumnName("s_sod_remark");
            entity.Property(e => e.SSodSalesVersion).HasColumnName("s_sod_sales_version");
            entity.Property(e => e.SSodSoId).HasColumnName("s_sod_so_id");
            entity.Property(e => e.SSodSodId).HasColumnName("s_sod_sod_id");
            entity.Property(e => e.SSodSynched)
                .HasMaxLength(5)
                .HasColumnName("s_sod_synched");
            entity.Property(e => e.SSodText1)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text1");
            entity.Property(e => e.SSodText2)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text2");
            entity.Property(e => e.SSodText3)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text3");
            entity.Property(e => e.SSodUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_unit_price");
            entity.Property(e => e.SSodUomId).HasColumnName("s_sod_uom_id");
            entity.Property(e => e.SSodVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_vat");
        });

        modelBuilder.Entity<SalesDetailsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_DETAILS_HISTORY", "mforce");

            entity.Property(e => e.SohBeId).HasColumnName("soh_be_id");
            entity.Property(e => e.SohCdIdRtr).HasColumnName("soh_cd_id_rtr");
            entity.Property(e => e.SohDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_discount_line");
            entity.Property(e => e.SohExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("soh_expiry_date");
            entity.Property(e => e.SohFree)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("soh_free");
            entity.Property(e => e.SohId)
                .ValueGeneratedOnAdd()
                .HasColumnName("soh_id");
            entity.Property(e => e.SohIsCreated).HasColumnName("soh_is_created");
            entity.Property(e => e.SohIsPromo).HasColumnName("soh_is_promo");
            entity.Property(e => e.SohLineDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("soh_line_disc_amt");
            entity.Property(e => e.SohLineDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("soh_line_disc_perc");
            entity.Property(e => e.SohLineId).HasColumnName("soh_line_id");
            entity.Property(e => e.SohLineSeq).HasColumnName("soh_line_seq");
            entity.Property(e => e.SohLotNb)
                .HasMaxLength(30)
                .HasColumnName("soh_lot_nb");
            entity.Property(e => e.SohPackPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_pack_price");
            entity.Property(e => e.SohPackQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("soh_pack_qty");
            entity.Property(e => e.SohPnId).HasColumnName("soh_pn_id");
            entity.Property(e => e.SohPrId).HasColumnName("soh_pr_id");
            entity.Property(e => e.SohPrPrId).HasColumnName("soh_pr_pr_id");
            entity.Property(e => e.SohPrPrQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("soh_pr_pr_qty");
            entity.Property(e => e.SohPriceChanged).HasColumnName("soh_price_changed");
            entity.Property(e => e.SohProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("soh_production_date");
            entity.Property(e => e.SohRemark)
                .HasMaxLength(255)
                .HasColumnName("soh_remark");
            entity.Property(e => e.SohShId).HasColumnName("soh_sh_id");
            entity.Property(e => e.SohSynched)
                .HasMaxLength(5)
                .HasColumnName("soh_synched");
            entity.Property(e => e.SohText1)
                .HasMaxLength(50)
                .HasColumnName("soh_text1");
            entity.Property(e => e.SohText2)
                .HasMaxLength(50)
                .HasColumnName("soh_text2");
            entity.Property(e => e.SohText3)
                .HasMaxLength(50)
                .HasColumnName("soh_text3");
            entity.Property(e => e.SohUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_unit_price");
            entity.Property(e => e.SohUnitQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("soh_unit_qty");
            entity.Property(e => e.SohVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_vat");
            entity.Property(e => e.SohVersion)
                .HasMaxLength(32)
                .HasColumnName("soh_version");
        });

        modelBuilder.Entity<SalesDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSodId, e.SSodSmId, e.SSodVersion }).HasFillFactor(90);

            entity.ToTable("SALES_DETAILS_SNC", "syn");

            entity.Property(e => e.SSodId).HasColumnName("s_sod_id");
            entity.Property(e => e.SSodSmId).HasColumnName("s_sod_sm_id");
            entity.Property(e => e.SSodVersion)
                .HasMaxLength(25)
                .HasColumnName("s_sod_version");
            entity.Property(e => e.SSodCdIdFrc).HasColumnName("s_sod_cd_id_frc");
            entity.Property(e => e.SSodCdIdRtr).HasColumnName("s_sod_cd_id_rtr");
            entity.Property(e => e.SSodDiscountAmountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_discount_amount_line");
            entity.Property(e => e.SSodDiscountLine)
                .HasMaxLength(255)
                .HasColumnName("s_sod_discount_line");
            entity.Property(e => e.SSodExpiryDate)
                .HasMaxLength(100)
                .HasColumnName("s_sod_expiry_date");
            entity.Property(e => e.SSodFree)
                .HasMaxLength(255)
                .HasColumnName("s_sod_free");
            entity.Property(e => e.SSodFreeComment)
                .HasMaxLength(512)
                .HasColumnName("s_sod_free_comment");
            entity.Property(e => e.SSodIsCreated).HasColumnName("s_sod_is_created");
            entity.Property(e => e.SSodIsPromo).HasColumnName("s_sod_is_promo");
            entity.Property(e => e.SSodLineDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_sod_line_disc_amt");
            entity.Property(e => e.SSodLineDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_sod_line_disc_perc");
            entity.Property(e => e.SSodLineSeq).HasColumnName("s_sod_line_seq");
            entity.Property(e => e.SSodLotNb)
                .HasMaxLength(30)
                .HasColumnName("s_sod_lot_nb");
            entity.Property(e => e.SSodPackPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_pack_price");
            entity.Property(e => e.SSodPackQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_sod_pack_qty");
            entity.Property(e => e.SSodPnId).HasColumnName("s_sod_pn_id");
            entity.Property(e => e.SSodPrId).HasColumnName("s_sod_pr_id");
            entity.Property(e => e.SSodPriceChanged).HasColumnName("s_sod_price_changed");
            entity.Property(e => e.SSodProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sod_production_date");
            entity.Property(e => e.SSodRemark)
                .HasMaxLength(255)
                .HasColumnName("s_sod_remark");
            entity.Property(e => e.SSodSoId).HasColumnName("s_sod_so_id");
            entity.Property(e => e.SSodSoUid)
                .HasMaxLength(128)
                .HasColumnName("s_sod_so_uid");
            entity.Property(e => e.SSodSynched)
                .HasMaxLength(5)
                .HasColumnName("s_sod_synched");
            entity.Property(e => e.SSodText1)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text1");
            entity.Property(e => e.SSodText2)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text2");
            entity.Property(e => e.SSodText3)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text3");
            entity.Property(e => e.SSodUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_unit_price");
            entity.Property(e => e.SSodUnitQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_sod_unit_qty");
            entity.Property(e => e.SSodVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_vat");
        });

        modelBuilder.Entity<SalesDetailsWrk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_DETAILS_WRK");

            entity.Property(e => e.SodCdIdCur).HasColumnName("sod_cd_id_cur");
            entity.Property(e => e.SodCdIdRtr).HasColumnName("sod_cd_id_rtr");
            entity.Property(e => e.SodDvdId).HasColumnName("sod_dvd_id");
            entity.Property(e => e.SodExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("sod_expiry_date");
            entity.Property(e => e.SodFeId).HasColumnName("sod_fe_id");
            entity.Property(e => e.SodFree)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_free");
            entity.Property(e => e.SodGpId).HasColumnName("sod_gp_id");
            entity.Property(e => e.SodId)
                .ValueGeneratedOnAdd()
                .HasColumnName("sod_id");
            entity.Property(e => e.SodIsCreated)
                .HasDefaultValue(1)
                .HasColumnName("sod_is_created");
            entity.Property(e => e.SodIsPromo).HasColumnName("sod_is_promo");
            entity.Property(e => e.SodLineDiscAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_line_disc_amt");
            entity.Property(e => e.SodLineDiscAmtIni)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_line_disc_amt_ini");
            entity.Property(e => e.SodLineDiscPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_line_disc_perc");
            entity.Property(e => e.SodLineDiscPercIni)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_line_disc_perc_ini");
            entity.Property(e => e.SodLineSeq).HasColumnName("sod_line_seq");
            entity.Property(e => e.SodLineTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_line_total");
            entity.Property(e => e.SodLotNb)
                .HasMaxLength(30)
                .HasColumnName("sod_lot_nb");
            entity.Property(e => e.SodPbId).HasColumnName("sod_pb_id");
            entity.Property(e => e.SodPrBarcode)
                .HasMaxLength(32)
                .HasColumnName("sod_pr_barcode");
            entity.Property(e => e.SodPrCode)
                .HasMaxLength(32)
                .HasColumnName("sod_pr_code");
            entity.Property(e => e.SodPrDescription)
                .HasMaxLength(255)
                .HasColumnName("sod_pr_description");
            entity.Property(e => e.SodPrDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("sod_pr_description_ar");
            entity.Property(e => e.SodPrId).HasColumnName("sod_pr_id");
            entity.Property(e => e.SodPriceChanged).HasColumnName("sod_price_changed");
            entity.Property(e => e.SodProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("sod_production_date");
            entity.Property(e => e.SodQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_quantity");
            entity.Property(e => e.SodQuantitySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_quantity_sku");
            entity.Property(e => e.SodRemark)
                .HasMaxLength(255)
                .HasColumnName("sod_remark");
            entity.Property(e => e.SodSoId).HasColumnName("sod_so_id");
            entity.Property(e => e.SodSodId).HasColumnName("sod_sod_id");
            entity.Property(e => e.SodSynched)
                .HasMaxLength(5)
                .HasDefaultValue("0")
                .HasColumnName("sod_synched");
            entity.Property(e => e.SodText1)
                .HasMaxLength(50)
                .HasColumnName("sod_text1");
            entity.Property(e => e.SodText2)
                .HasMaxLength(50)
                .HasColumnName("sod_text2");
            entity.Property(e => e.SodText3)
                .HasMaxLength(50)
                .HasColumnName("sod_text3");
            entity.Property(e => e.SodUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_unit_price");
            entity.Property(e => e.SodUomDescription)
                .HasMaxLength(255)
                .HasColumnName("sod_uom_description");
            entity.Property(e => e.SodUomId).HasColumnName("sod_uom_id");
            entity.Property(e => e.SodUomSku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_uom_sku");
            entity.Property(e => e.SodVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_vat");
            entity.Property(e => e.SodVersion)
                .HasMaxLength(32)
                .HasColumnName("sod_version");
            entity.Property(e => e.SodWpId).HasColumnName("sod_wp_id");
            entity.Property(e => e.SodWpQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sod_wp_quantity");
            entity.Property(e => e.SodWpUid)
                .HasMaxLength(100)
                .HasColumnName("sod_wp_uid");
        });

        modelBuilder.Entity<SalesDetailsWrkSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_DETAILS_WRK_SNC", "syn");

            entity.Property(e => e.SSodCdIdCur).HasColumnName("s_sod_cd_id_cur");
            entity.Property(e => e.SSodCdIdRtr).HasColumnName("s_sod_cd_id_rtr");
            entity.Property(e => e.SSodDvdId).HasColumnName("s_sod_dvd_id");
            entity.Property(e => e.SSodExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sod_expiry_date");
            entity.Property(e => e.SSodFeId).HasColumnName("s_sod_fe_id");
            entity.Property(e => e.SSodFree)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_free");
            entity.Property(e => e.SSodGpId).HasColumnName("s_sod_gp_id");
            entity.Property(e => e.SSodId).HasColumnName("s_sod_id");
            entity.Property(e => e.SSodIsCreated).HasColumnName("s_sod_is_created");
            entity.Property(e => e.SSodIsPromo).HasColumnName("s_sod_is_promo");
            entity.Property(e => e.SSodLineDiscAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_amt");
            entity.Property(e => e.SSodLineDiscAmtIni)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_amt_ini");
            entity.Property(e => e.SSodLineDiscPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_perc");
            entity.Property(e => e.SSodLineDiscPercIni)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_disc_perc_ini");
            entity.Property(e => e.SSodLineSeq).HasColumnName("s_sod_line_seq");
            entity.Property(e => e.SSodLineTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_line_total");
            entity.Property(e => e.SSodLotNb)
                .HasMaxLength(30)
                .HasColumnName("s_sod_lot_nb");
            entity.Property(e => e.SSodPbId).HasColumnName("s_sod_pb_id");
            entity.Property(e => e.SSodPrBarcode)
                .HasMaxLength(32)
                .HasColumnName("s_sod_pr_barcode");
            entity.Property(e => e.SSodPrCode)
                .HasMaxLength(32)
                .HasColumnName("s_sod_pr_code");
            entity.Property(e => e.SSodPrDescription)
                .HasMaxLength(255)
                .HasColumnName("s_sod_pr_description");
            entity.Property(e => e.SSodPrDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("s_sod_pr_description_ar");
            entity.Property(e => e.SSodPrId).HasColumnName("s_sod_pr_id");
            entity.Property(e => e.SSodPriceChanged).HasColumnName("s_sod_price_changed");
            entity.Property(e => e.SSodProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sod_production_date");
            entity.Property(e => e.SSodQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_quantity");
            entity.Property(e => e.SSodQuantitySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_quantity_sku");
            entity.Property(e => e.SSodRemark)
                .HasMaxLength(255)
                .HasColumnName("s_sod_remark");
            entity.Property(e => e.SSodSmId)
                .HasMaxLength(32)
                .HasColumnName("s_sod_sm_id");
            entity.Property(e => e.SSodSoId).HasColumnName("s_sod_so_id");
            entity.Property(e => e.SSodSodId).HasColumnName("s_sod_sod_id");
            entity.Property(e => e.SSodSynched)
                .HasMaxLength(5)
                .HasColumnName("s_sod_synched");
            entity.Property(e => e.SSodText1)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text1");
            entity.Property(e => e.SSodText2)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text2");
            entity.Property(e => e.SSodText3)
                .HasMaxLength(50)
                .HasColumnName("s_sod_text3");
            entity.Property(e => e.SSodUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_unit_price");
            entity.Property(e => e.SSodUomDescription)
                .HasMaxLength(255)
                .HasColumnName("s_sod_uom_description");
            entity.Property(e => e.SSodUomId).HasColumnName("s_sod_uom_id");
            entity.Property(e => e.SSodUomSku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_uom_sku");
            entity.Property(e => e.SSodVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_vat");
            entity.Property(e => e.SSodVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sod_version");
            entity.Property(e => e.SSodWpId).HasColumnName("s_sod_wp_id");
            entity.Property(e => e.SSodWpQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sod_wp_quantity");
            entity.Property(e => e.SSodWpUid)
                .HasMaxLength(100)
                .HasColumnName("s_sod_wp_uid");
        });

        modelBuilder.Entity<SalesHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("sales_history");

            entity.Property(e => e.Pk).HasColumnName("pk");
            entity.Property(e => e.ShApproved).HasColumnName("sh_approved");
            entity.Property(e => e.ShBeId).HasColumnName("sh_be_id");
            entity.Property(e => e.ShCdIdCur).HasColumnName("sh_cd_id_cur");
            entity.Property(e => e.ShCdIdPmd).HasColumnName("sh_cd_id_pmd");
            entity.Property(e => e.ShCdIdPtm).HasColumnName("sh_cd_id_ptm");
            entity.Property(e => e.ShCdIdWhs).HasColumnName("sh_cd_id_whs");
            entity.Property(e => e.ShCuId).HasColumnName("sh_cu_id");
            entity.Property(e => e.ShCurSymb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("sh_cur_symb");
            entity.Property(e => e.ShDate)
                .HasMaxLength(30)
                .HasColumnName("sh_date");
            entity.Property(e => e.ShDateDlvdue)
                .HasColumnType("datetime")
                .HasColumnName("sh_date_dlvdue");
            entity.Property(e => e.ShDatess)
                .HasColumnType("datetime")
                .HasColumnName("sh_datess");
            entity.Property(e => e.ShDiscountCust)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_discount_cust");
            entity.Property(e => e.ShDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_discount_line");
            entity.Property(e => e.ShFeId).HasColumnName("sh_fe_id");
            entity.Property(e => e.ShId).HasColumnName("sh_id");
            entity.Property(e => e.ShInvoiceNo)
                .HasMaxLength(40)
                .HasColumnName("sh_invoice_no");
            entity.Property(e => e.ShIsCreated).HasColumnName("sh_is_created");
            entity.Property(e => e.ShLinesDiscAmt).HasColumnName("sh_lines_disc_amt");
            entity.Property(e => e.ShLinesDiscPerc).HasColumnName("sh_lines_disc_perc");
            entity.Property(e => e.ShPaymentType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sh_payment_type");
            entity.Property(e => e.ShPtId).HasColumnName("sh_pt_id");
            entity.Property(e => e.ShRemarks)
                .HasMaxLength(255)
                .HasColumnName("sh_remarks");
            entity.Property(e => e.ShSalesDiscAmt).HasColumnName("sh_sales_disc_amt");
            entity.Property(e => e.ShSalesDiscPerc).HasColumnName("sh_sales_disc_perc");
            entity.Property(e => e.ShShId).HasColumnName("sh_sh_id");
            entity.Property(e => e.ShSignFile)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sh_sign_file");
            entity.Property(e => e.ShSmId).HasColumnName("sh_sm_id");
            entity.Property(e => e.ShSubtotal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sh_subtotal");
            entity.Property(e => e.ShSynched).HasColumnName("sh_synched");
            entity.Property(e => e.ShTotal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sh_total");
            entity.Property(e => e.ShType)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sh_type");
            entity.Property(e => e.ShVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_vat");
            entity.Property(e => e.ShVoided).HasColumnName("sh_voided");
            entity.Property(e => e.ShWhId).HasColumnName("sh_wh_id");
            entity.Property(e => e.ShYyyy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sh_yyyy");
            entity.Property(e => e.ShYyyymm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sh_yyyymm");
        });

        modelBuilder.Entity<SalesHistory1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_HISTORY", "mforce");

            entity.Property(e => e.ShApproved).HasColumnName("sh_approved");
            entity.Property(e => e.ShBeId).HasColumnName("sh_be_id");
            entity.Property(e => e.ShCdIdCur).HasColumnName("sh_cd_id_cur");
            entity.Property(e => e.ShCdIdPmd).HasColumnName("sh_cd_id_pmd");
            entity.Property(e => e.ShCdIdPtm).HasColumnName("sh_cd_id_ptm");
            entity.Property(e => e.ShCdIdWhs).HasColumnName("sh_cd_id_whs");
            entity.Property(e => e.ShCuId).HasColumnName("sh_cu_id");
            entity.Property(e => e.ShCurSymb)
                .HasMaxLength(10)
                .HasColumnName("sh_cur_symb");
            entity.Property(e => e.ShDate)
                .HasColumnType("datetime")
                .HasColumnName("sh_date");
            entity.Property(e => e.ShDateDlvdue)
                .HasColumnType("datetime")
                .HasColumnName("sh_date_dlvdue");
            entity.Property(e => e.ShDiscountCust)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_discount_cust");
            entity.Property(e => e.ShDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_discount_line");
            entity.Property(e => e.ShFeId).HasColumnName("sh_fe_id");
            entity.Property(e => e.ShId)
                .ValueGeneratedOnAdd()
                .HasColumnName("sh_id");
            entity.Property(e => e.ShInvoiceNo)
                .HasMaxLength(16)
                .HasColumnName("sh_invoice_no");
            entity.Property(e => e.ShIsCreated).HasColumnName("sh_is_created");
            entity.Property(e => e.ShLinesDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("sh_lines_disc_amt");
            entity.Property(e => e.ShLinesDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("sh_lines_disc_perc");
            entity.Property(e => e.ShPaymentType)
                .HasMaxLength(32)
                .HasColumnName("sh_payment_type");
            entity.Property(e => e.ShPtId).HasColumnName("sh_pt_id");
            entity.Property(e => e.ShRemarks)
                .HasMaxLength(255)
                .HasColumnName("sh_remarks");
            entity.Property(e => e.ShSalesDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("sh_sales_disc_amt");
            entity.Property(e => e.ShSalesDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("sh_sales_disc_perc");
            entity.Property(e => e.ShShId).HasColumnName("sh_sh_id");
            entity.Property(e => e.ShSignFile)
                .HasMaxLength(255)
                .HasColumnName("sh_sign_file");
            entity.Property(e => e.ShSmId).HasColumnName("sh_sm_id");
            entity.Property(e => e.ShSubtotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_subtotal");
            entity.Property(e => e.ShSynched)
                .HasMaxLength(10)
                .HasColumnName("sh_synched");
            entity.Property(e => e.ShTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_total");
            entity.Property(e => e.ShType)
                .HasMaxLength(10)
                .HasColumnName("sh_type");
            entity.Property(e => e.ShVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sh_vat");
            entity.Property(e => e.ShVoided).HasColumnName("sh_voided");
            entity.Property(e => e.ShWhId).HasColumnName("sh_wh_id");
            entity.Property(e => e.ShYyyy).HasColumnName("sh_yyyy");
            entity.Property(e => e.ShYyyymm).HasColumnName("sh_yyyymm");
        });

        modelBuilder.Entity<SalesHistoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("sales_history_details");

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.Product)
                .HasMaxLength(255)
                .HasColumnName("product");
            entity.Property(e => e.SohBeId).HasColumnName("soh_be_id");
            entity.Property(e => e.SohCdIdRtr).HasColumnName("soh_cd_id_rtr");
            entity.Property(e => e.SohDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_discount_line");
            entity.Property(e => e.SohExpiryDate).HasColumnName("soh_expiry_date");
            entity.Property(e => e.SohFree).HasColumnName("soh_free");
            entity.Property(e => e.SohId).HasColumnName("soh_id");
            entity.Property(e => e.SohIsCreated).HasColumnName("soh_is_created");
            entity.Property(e => e.SohIsPromo).HasColumnName("soh_is_promo");
            entity.Property(e => e.SohLineDiscAmt).HasColumnName("soh_line_disc_amt");
            entity.Property(e => e.SohLineDiscPerc).HasColumnName("soh_line_disc_perc");
            entity.Property(e => e.SohLineId).HasColumnName("soh_line_id");
            entity.Property(e => e.SohLineSeq).HasColumnName("soh_line_seq");
            entity.Property(e => e.SohLotNb)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_lot_nb");
            entity.Property(e => e.SohPackPrice).HasColumnName("soh_pack_price");
            entity.Property(e => e.SohPackQty).HasColumnName("soh_pack_qty");
            entity.Property(e => e.SohPnId).HasColumnName("soh_pn_id");
            entity.Property(e => e.SohPrId).HasColumnName("soh_pr_id");
            entity.Property(e => e.SohPrPrId).HasColumnName("soh_pr_pr_id");
            entity.Property(e => e.SohPrPrQty).HasColumnName("soh_pr_pr_qty");
            entity.Property(e => e.SohPriceChanged).HasColumnName("soh_price_changed");
            entity.Property(e => e.SohProductionDate).HasColumnName("soh_production_date");
            entity.Property(e => e.SohRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_remark");
            entity.Property(e => e.SohShId).HasColumnName("soh_sh_id");
            entity.Property(e => e.SohSynched).HasColumnName("soh_synched");
            entity.Property(e => e.SohText1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_text1");
            entity.Property(e => e.SohText2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_text2");
            entity.Property(e => e.SohText3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_text3");
            entity.Property(e => e.SohUnitPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_unit_price");
            entity.Property(e => e.SohUnitQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_unit_qty");
            entity.Property(e => e.SohVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("soh_vat");
            entity.Property(e => e.SohVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("soh_version");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
        });

        modelBuilder.Entity<SalesPromotion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_PROMOTION");

            entity.Property(e => e.SpBucket).HasColumnName("sp_bucket");
            entity.Property(e => e.SpCdIdPtp).HasColumnName("sp_cd_id_ptp");
            entity.Property(e => e.SpId).HasColumnName("sp_id");
            entity.Property(e => e.SpPnId).HasColumnName("sp_pn_id");
            entity.Property(e => e.SpPnbId).HasColumnName("sp_pnb_id");
            entity.Property(e => e.SpPngId).HasColumnName("sp_png_id");
            entity.Property(e => e.SpPrIds)
                .HasMaxLength(4000)
                .HasColumnName("sp_pr_ids");
            entity.Property(e => e.SpPrecedence).HasColumnName("sp_precedence");
            entity.Property(e => e.SpSoId).HasColumnName("sp_so_id");
            entity.Property(e => e.SpSodId).HasColumnName("sp_sod_id");
            entity.Property(e => e.SpValue)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sp_value");
            entity.Property(e => e.SpValue1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sp_value1");
            entity.Property(e => e.SpValue2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sp_value2");
            entity.Property(e => e.SpVersion)
                .HasMaxLength(32)
                .HasColumnName("sp_version");
        });

        modelBuilder.Entity<SalesPromotionSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSpId, e.SSpSmId, e.SSpVersion })
                .HasName("pk_sales_promotion_snc")
                .HasFillFactor(90);

            entity.ToTable("SALES_PROMOTION_SNC", "syn");

            entity.Property(e => e.SSpId).HasColumnName("s_sp_id");
            entity.Property(e => e.SSpSmId)
                .HasMaxLength(32)
                .HasColumnName("s_sp_sm_id");
            entity.Property(e => e.SSpVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sp_version");
            entity.Property(e => e.SSpBucket).HasColumnName("s_sp_bucket");
            entity.Property(e => e.SSpCdIdPtp).HasColumnName("s_sp_cd_id_ptp");
            entity.Property(e => e.SSpPnId).HasColumnName("s_sp_pn_id");
            entity.Property(e => e.SSpPnbId).HasColumnName("s_sp_pnb_id");
            entity.Property(e => e.SSpPngId).HasColumnName("s_sp_png_id");
            entity.Property(e => e.SSpPrIds)
                .HasMaxLength(4000)
                .HasColumnName("s_sp_pr_ids");
            entity.Property(e => e.SSpPrecedence).HasColumnName("s_sp_precedence");
            entity.Property(e => e.SSpSoId).HasColumnName("s_sp_so_id");
            entity.Property(e => e.SSpSodId).HasColumnName("s_sp_sod_id");
            entity.Property(e => e.SSpValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sp_value");
            entity.Property(e => e.SSpValue1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sp_value1");
            entity.Property(e => e.SSpValue2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sp_value2");
        });

        modelBuilder.Entity<SalesSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSoId, e.SSoSmId, e.SSoVersion }).HasFillFactor(90);

            entity.ToTable("SALES_SNC", "syn");

            entity.Property(e => e.SSoId).HasColumnName("s_so_id");
            entity.Property(e => e.SSoSmId).HasColumnName("s_so_sm_id");
            entity.Property(e => e.SSoVersion)
                .HasMaxLength(25)
                .HasColumnName("s_so_version");
            entity.Property(e => e.SSoCdIdCur).HasColumnName("s_so_cd_id_cur");
            entity.Property(e => e.SSoCdIdPmd).HasColumnName("s_so_cd_id_pmd");
            entity.Property(e => e.SSoCdIdPtm).HasColumnName("s_so_cd_id_ptm");
            entity.Property(e => e.SSoCdIdSpc).HasColumnName("s_so_cd_id_spc");
            entity.Property(e => e.SSoCdIdWhs).HasColumnName("s_so_cd_id_whs");
            entity.Property(e => e.SSoCuId).HasColumnName("s_so_cu_id");
            entity.Property(e => e.SSoCurSymb)
                .HasMaxLength(10)
                .HasColumnName("s_so_cur_symb");
            entity.Property(e => e.SSoDate)
                .HasColumnType("datetime")
                .HasColumnName("s_so_date");
            entity.Property(e => e.SSoDateDlvdue)
                .HasColumnType("datetime")
                .HasColumnName("s_so_date_dlvdue");
            entity.Property(e => e.SSoDeliveryDate)
                .HasMaxLength(64)
                .HasColumnName("s_so_delivery_date");
            entity.Property(e => e.SSoDiscountAmountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_so_discount_amount_line");
            entity.Property(e => e.SSoDiscountCust)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_so_discount_cust");
            entity.Property(e => e.SSoDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_so_discount_line");
            entity.Property(e => e.SSoFeId).HasColumnName("s_so_fe_id");
            entity.Property(e => e.SSoInvoiceNo)
                .HasMaxLength(16)
                .HasColumnName("s_so_invoice_no");
            entity.Property(e => e.SSoIsCreated).HasColumnName("s_so_is_created");
            entity.Property(e => e.SSoLinesDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_so_lines_disc_amt");
            entity.Property(e => e.SSoLinesDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_so_lines_disc_perc");
            entity.Property(e => e.SSoPaymentType)
                .HasMaxLength(32)
                .HasColumnName("s_so_payment_type");
            entity.Property(e => e.SSoPtId).HasColumnName("s_so_pt_id");
            entity.Property(e => e.SSoRemarks)
                .HasMaxLength(255)
                .HasColumnName("s_so_remarks");
            entity.Property(e => e.SSoSalesDiscAmt)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_so_sales_disc_amt");
            entity.Property(e => e.SSoSalesDiscPerc)
                .HasColumnType("decimal(16, 5)")
                .HasColumnName("s_so_sales_disc_perc");
            entity.Property(e => e.SSoSignFile)
                .HasMaxLength(255)
                .HasColumnName("s_so_sign_file");
            entity.Property(e => e.SSoSoId).HasColumnName("s_so_so_id");
            entity.Property(e => e.SSoSubtotal)
                .HasMaxLength(255)
                .HasColumnName("s_so_subtotal");
            entity.Property(e => e.SSoSynched)
                .HasMaxLength(10)
                .HasColumnName("s_so_synched");
            entity.Property(e => e.SSoTotal)
                .HasMaxLength(255)
                .HasColumnName("s_so_total");
            entity.Property(e => e.SSoType)
                .HasMaxLength(10)
                .HasColumnName("s_so_type");
            entity.Property(e => e.SSoUid)
                .HasMaxLength(128)
                .HasColumnName("s_so_uid");
            entity.Property(e => e.SSoVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_so_vat");
            entity.Property(e => e.SSoVoided).HasColumnName("s_so_voided");
            entity.Property(e => e.SSoVtId).HasColumnName("s_so_vt_id");
            entity.Property(e => e.SSoVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_so_vt_uid");
            entity.Property(e => e.SSoYyyy).HasColumnName("s_so_yyyy");
            entity.Property(e => e.SSoYyyymm).HasColumnName("s_so_yyyymm");
        });

        modelBuilder.Entity<SalesWrk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALES_WRK");

            entity.Property(e => e.SoCdIdCur).HasColumnName("so_cd_id_cur");
            entity.Property(e => e.SoCdIdPmd).HasColumnName("so_cd_id_pmd");
            entity.Property(e => e.SoCdIdPtm).HasColumnName("so_cd_id_ptm");
            entity.Property(e => e.SoCdIdWhs).HasColumnName("so_cd_id_whs");
            entity.Property(e => e.SoCuId).HasColumnName("so_cu_id");
            entity.Property(e => e.SoCuIdShp).HasColumnName("so_cu_id_shp");
            entity.Property(e => e.SoCurSymb)
                .HasMaxLength(10)
                .HasColumnName("so_cur_symb");
            entity.Property(e => e.SoDate)
                .HasColumnType("datetime")
                .HasColumnName("so_date");
            entity.Property(e => e.SoDateDlvdue)
                .HasColumnType("datetime")
                .HasColumnName("so_date_dlvdue");
            entity.Property(e => e.SoDiscountCust)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_discount_cust");
            entity.Property(e => e.SoDiscountLine)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_discount_line");
            entity.Property(e => e.SoFeId).HasColumnName("so_fe_id");
            entity.Property(e => e.SoId).HasColumnName("so_id");
            entity.Property(e => e.SoInvoiceNo)
                .HasMaxLength(32)
                .HasColumnName("so_invoice_no");
            entity.Property(e => e.SoIsCreated).HasColumnName("so_is_created");
            entity.Property(e => e.SoLinesDiscAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_lines_disc_amt");
            entity.Property(e => e.SoLinesDiscPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_lines_disc_perc");
            entity.Property(e => e.SoPaymentType)
                .HasMaxLength(16)
                .HasColumnName("so_payment_type");
            entity.Property(e => e.SoPtId).HasColumnName("so_pt_id");
            entity.Property(e => e.SoRemarks)
                .HasMaxLength(255)
                .HasColumnName("so_remarks");
            entity.Property(e => e.SoSalesDiscAmt)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_sales_disc_amt");
            entity.Property(e => e.SoSalesDiscPerc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_sales_disc_perc");
            entity.Property(e => e.SoSignFile)
                .HasMaxLength(255)
                .HasColumnName("so_sign_file");
            entity.Property(e => e.SoSmId).HasColumnName("so_sm_id");
            entity.Property(e => e.SoSoId).HasColumnName("so_so_id");
            entity.Property(e => e.SoSubtotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_subtotal");
            entity.Property(e => e.SoSynched)
                .HasMaxLength(10)
                .HasColumnName("so_synched");
            entity.Property(e => e.SoTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_total");
            entity.Property(e => e.SoTtId).HasColumnName("so_tt_id");
            entity.Property(e => e.SoType)
                .HasMaxLength(16)
                .HasColumnName("so_type");
            entity.Property(e => e.SoVat)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("so_vat");
            entity.Property(e => e.SoVersion)
                .HasMaxLength(32)
                .HasColumnName("so_version");
            entity.Property(e => e.SoVoided).HasColumnName("so_voided");
            entity.Property(e => e.SoVtId).HasColumnName("so_vt_id");
        });

        modelBuilder.Entity<SalesassetAtiPicture>(entity =>
        {
            entity.HasKey(e => e.AtipId).HasFillFactor(90);

            entity.ToTable("SALESASSET_ATI_PICTURE", "sls");

            entity.Property(e => e.AtipId).HasColumnName("atip_id");
            entity.Property(e => e.AtipAtiId).HasColumnName("atip_ati_id");
            entity.Property(e => e.AtipFilename)
                .HasMaxLength(1000)
                .HasColumnName("atip_filename");

            entity.HasOne(d => d.AtipAti).WithMany(p => p.SalesassetAtiPictures)
                .HasForeignKey(d => d.AtipAtiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATIP_REF_ATI");
        });

        modelBuilder.Entity<SalesassetAtiPictureSnc>(entity =>
        {
            entity.HasKey(e => new { e.SAtipId, e.SAtipSmId, e.SAtipVersion })
                .HasName("pk_SALESASSET_ATI_PICTURE_SNC")
                .HasFillFactor(90);

            entity.ToTable("SALESASSET_ATI_PICTURE_SNC", "syn");

            entity.Property(e => e.SAtipId).HasColumnName("s_atip_id");
            entity.Property(e => e.SAtipSmId).HasColumnName("s_atip_sm_id");
            entity.Property(e => e.SAtipVersion)
                .HasMaxLength(32)
                .HasColumnName("s_atip_version");
            entity.Property(e => e.SAtipAtiId).HasColumnName("s_atip_ati_id");
            entity.Property(e => e.SAtipFilename)
                .HasMaxLength(1000)
                .HasColumnName("s_atip_filename");
        });

        modelBuilder.Entity<SalesassetAtidPicture>(entity =>
        {
            entity.HasKey(e => e.AtidpId).HasFillFactor(90);

            entity.ToTable("SALESASSET_ATID_PICTURE", "sls");

            entity.Property(e => e.AtidpId).HasColumnName("atidp_id");
            entity.Property(e => e.AtidpAtidId).HasColumnName("atidp_atid_id");
            entity.Property(e => e.AtidpFilename)
                .HasMaxLength(1000)
                .HasColumnName("atidp_filename");

            entity.HasOne(d => d.AtidpAtid).WithMany(p => p.SalesassetAtidPictures)
                .HasForeignKey(d => d.AtidpAtidId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATIDP_REF_ATID");
        });

        modelBuilder.Entity<SalesassetAtidPictureSnc>(entity =>
        {
            entity.HasKey(e => new { e.SAtidpId, e.SAtidpSmId, e.SAtidpVersion })
                .HasName("pk_SALESASSET_ATID_PICTURE_SNC")
                .HasFillFactor(90);

            entity.ToTable("SALESASSET_ATID_PICTURE_SNC", "syn");

            entity.Property(e => e.SAtidpId).HasColumnName("s_atidp_id");
            entity.Property(e => e.SAtidpSmId).HasColumnName("s_atidp_sm_id");
            entity.Property(e => e.SAtidpVersion)
                .HasMaxLength(32)
                .HasColumnName("s_atidp_version");
            entity.Property(e => e.SAtidpAtidId).HasColumnName("s_atidp_atid_id");
            entity.Property(e => e.SAtidpFilename)
                .HasMaxLength(1000)
                .HasColumnName("s_atidp_filename");
        });

        modelBuilder.Entity<SalesassetCategoryFamily>(entity =>
        {
            entity.HasKey(e => e.AcfId).HasFillFactor(90);

            entity.ToTable("SALESASSET_CATEGORY_FAMILY", "sls");

            entity.HasIndex(e => e.AcfAcfId, "acf_acf_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.AcfCode, e.AcfBuId }, "acf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AcfId).HasColumnName("acf_id");
            entity.Property(e => e.AcfAcfId).HasColumnName("acf_acf_id");
            entity.Property(e => e.AcfBuId).HasColumnName("acf_bu_id");
            entity.Property(e => e.AcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("acf_code");
            entity.Property(e => e.AcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("acf_description_lan1");
            entity.Property(e => e.AcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("acf_description_lan2");
            entity.Property(e => e.AcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("acf_description_lan3");
            entity.Property(e => e.AcfIsLov)
                .HasDefaultValue((short)1)
                .HasColumnName("acf_is_lov");
            entity.Property(e => e.AcfLevel).HasColumnName("acf_level");
            entity.Property(e => e.AcfRegex)
                .HasMaxLength(100)
                .HasColumnName("acf_regex");

            entity.HasOne(d => d.AcfAcf).WithMany(p => p.InverseAcfAcf)
                .HasForeignKey(d => d.AcfAcfId)
                .HasConstraintName("FK_ACF_REF_ACF");
        });

        modelBuilder.Entity<SalesassetCategoryFamilyValue>(entity =>
        {
            entity.HasKey(e => e.AcfvId)
                .HasName("PK_SALESASSET_CATEGORY_FAMILY_")
                .HasFillFactor(90);

            entity.ToTable("SALESASSET_CATEGORY_FAMILY_VALUE", "sls");

            entity.HasIndex(e => new { e.AcfvAcfId, e.AcfvCode }, "acfv_acf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AcfvId).HasColumnName("acfv_id");
            entity.Property(e => e.AcfvAcfId).HasColumnName("acfv_acf_id");
            entity.Property(e => e.AcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("acfv_code");
            entity.Property(e => e.AcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("acfv_description_lan1");
            entity.Property(e => e.AcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("acfv_description_lan2");
            entity.Property(e => e.AcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("acfv_description_lan3");

            entity.HasOne(d => d.AcfvAcf).WithMany(p => p.SalesassetCategoryFamilyValues)
                .HasForeignKey(d => d.AcfvAcfId)
                .HasConstraintName("FK_ACFV_REF_ACF");
        });

        modelBuilder.Entity<SalesassetCategoryGroup>(entity =>
        {
            entity.HasKey(e => e.AtgcId).HasFillFactor(90);

            entity.ToTable("SALESASSET_CATEGORY_GROUP", "sls");

            entity.HasIndex(e => new { e.AtgcAcfId, e.AtgcCdIdAtg }, "atgc_acf_atg_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.AtgcAcfId, e.AtgcOrder }, "atgc_acf_order_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AtgcId).HasColumnName("atgc_id");
            entity.Property(e => e.AtgcAcfId).HasColumnName("atgc_acf_id");
            entity.Property(e => e.AtgcActive)
                .HasDefaultValue((short)1)
                .HasColumnName("atgc_active");
            entity.Property(e => e.AtgcCdIdAtg).HasColumnName("atgc_cd_id_atg");
            entity.Property(e => e.AtgcMandatory)
                .HasDefaultValue((short)1)
                .HasColumnName("atgc_mandatory");
            entity.Property(e => e.AtgcOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("atgc_order");

            entity.HasOne(d => d.AtgcAcf).WithMany(p => p.SalesassetCategoryGroups)
                .HasForeignKey(d => d.AtgcAcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AFC_REF_ACF");

            entity.HasOne(d => d.AtgcCdIdAtgNavigation).WithMany(p => p.SalesassetCategoryGroups)
                .HasForeignKey(d => d.AtgcCdIdAtg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATCG_REF_CD_ATG");
        });

        modelBuilder.Entity<SalesassetCategoryValue>(entity =>
        {
            entity.HasKey(e => e.AcvId).HasFillFactor(90);

            entity.ToTable("SALESASSET_CATEGORY_VALUE", "sls");

            entity.HasIndex(e => new { e.AcvAtId, e.AcvAcfvId, e.AcvAcfId }, "acv_at_acfv_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AcvId).HasColumnName("acv_id");
            entity.Property(e => e.AcvAcfId).HasColumnName("acv_acf_id");
            entity.Property(e => e.AcvAcfvId).HasColumnName("acv_acfv_id");
            entity.Property(e => e.AcvAtId).HasColumnName("acv_at_id");
            entity.Property(e => e.AcvValue)
                .HasMaxLength(64)
                .HasColumnName("acv_value");

            entity.HasOne(d => d.AcvAcf).WithMany(p => p.SalesassetCategoryValues)
                .HasForeignKey(d => d.AcvAcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACV_REF_ACF");

            entity.HasOne(d => d.AcvAcfv).WithMany(p => p.SalesassetCategoryValues)
                .HasForeignKey(d => d.AcvAcfvId)
                .HasConstraintName("FK_ACV_REF_ACFV");

            entity.HasOne(d => d.AcvAt).WithMany(p => p.SalesassetCategoryValues)
                .HasForeignKey(d => d.AcvAtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACV_REF_AT");
        });

        modelBuilder.Entity<SalesassetHistory>(entity =>
        {
            entity.HasKey(e => e.AthId).HasFillFactor(90);

            entity.ToTable("SALESASSET_HISTORY", "sls");

            entity.Property(e => e.AthId).HasColumnName("ath_id");
            entity.Property(e => e.AthAtId).HasColumnName("ath_at_id");
            entity.Property(e => e.AthDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ath_datetime");
            entity.Property(e => e.AthThpsId).HasColumnName("ath_thps_id");
            entity.Property(e => e.AthVersion).HasColumnName("ath_version");

            entity.HasOne(d => d.AthAt).WithMany(p => p.SalesassetHistories)
                .HasForeignKey(d => d.AthAtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATH_REF_AT");

            entity.HasOne(d => d.AthThps).WithMany(p => p.SalesassetHistories)
                .HasForeignKey(d => d.AthThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATH_REF_THPS");
        });

        modelBuilder.Entity<SalesassetHistorySnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALESASSET_HISTORY_SNC", "syn");

            entity.Property(e => e.SAthAtId).HasColumnName("s_ath_at_id");
            entity.Property(e => e.SAthDatetime)
                .HasColumnType("datetime")
                .HasColumnName("s_ath_datetime");
            entity.Property(e => e.SAthId).HasColumnName("s_ath_id");
            entity.Property(e => e.SAthSmId).HasColumnName("s_ath_sm_id");
            entity.Property(e => e.SAthThpsId).HasColumnName("s_ath_thps_id");
            entity.Property(e => e.SAthVersion).HasColumnName("s_ath_version");
        });

        modelBuilder.Entity<SalesassetInventory>(entity =>
        {
            entity.HasKey(e => e.AtiId).HasFillFactor(90);

            entity.ToTable("SALESASSET_INVENTORY", "sls");

            entity.Property(e => e.AtiId).HasColumnName("ati_id");
            entity.Property(e => e.AtiDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ati_datetime");
            entity.Property(e => e.AtiLatitude)
                .HasMaxLength(32)
                .HasColumnName("ati_latitude");
            entity.Property(e => e.AtiLongitude)
                .HasMaxLength(32)
                .HasColumnName("ati_longitude");
            entity.Property(e => e.AtiOrgId).HasColumnName("ati_org_id");
            entity.Property(e => e.AtiRemark)
                .HasMaxLength(4000)
                .HasColumnName("ati_remark");
            entity.Property(e => e.AtiThpsId).HasColumnName("ati_thps_id");
            entity.Property(e => e.AtiUsId).HasColumnName("ati_us_id");
            entity.Property(e => e.AtiVtId).HasColumnName("ati_vt_id");

            entity.HasOne(d => d.AtiThps).WithMany(p => p.SalesassetInventories)
                .HasForeignKey(d => d.AtiThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATI_REF_THPS");

            entity.HasOne(d => d.AtiUs).WithMany(p => p.SalesassetInventories)
                .HasForeignKey(d => d.AtiUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATI_REF_US");

            entity.HasOne(d => d.AtiVt).WithMany(p => p.SalesassetInventories)
                .HasForeignKey(d => d.AtiVtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATI_REF_VT");
        });

        modelBuilder.Entity<SalesassetInventoryDetail>(entity =>
        {
            entity.HasKey(e => e.AtidId).HasFillFactor(90);

            entity.ToTable("SALESASSET_INVENTORY_DETAIL", "sls");

            entity.Property(e => e.AtidId).HasColumnName("atid_id");
            entity.Property(e => e.AtidAtId).HasColumnName("atid_at_id");
            entity.Property(e => e.AtidAtiId).HasColumnName("atid_ati_id");
            entity.Property(e => e.AtidOrgId).HasColumnName("atid_org_id");
            entity.Property(e => e.AtidQuantity)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("atid_quantity");
            entity.Property(e => e.AtidRemark)
                .HasMaxLength(1024)
                .HasColumnName("atid_remark");

            entity.HasOne(d => d.AtidAt).WithMany(p => p.SalesassetInventoryDetails)
                .HasForeignKey(d => d.AtidAtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATID_REF_AT");

            entity.HasOne(d => d.AtidAti).WithMany(p => p.SalesassetInventoryDetails)
                .HasForeignKey(d => d.AtidAtiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATID_REF_ATI");
        });

        modelBuilder.Entity<SalesassetInventoryDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.SAtidId, e.SAtidSmId, e.SAtidVersion })
                .HasName("pk_SALESASSET_INVENTORY_DETAIL_SNC")
                .HasFillFactor(90);

            entity.ToTable("SALESASSET_INVENTORY_DETAIL_SNC", "syn");

            entity.Property(e => e.SAtidId).HasColumnName("s_atid_id");
            entity.Property(e => e.SAtidSmId).HasColumnName("s_atid_sm_id");
            entity.Property(e => e.SAtidVersion)
                .HasMaxLength(32)
                .HasColumnName("s_atid_version");
            entity.Property(e => e.SAtidAtId).HasColumnName("s_atid_at_id");
            entity.Property(e => e.SAtidAtiId).HasColumnName("s_atid_ati_id");
            entity.Property(e => e.SAtidQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_atid_quantity");
            entity.Property(e => e.SAtidRemark)
                .HasMaxLength(1024)
                .HasColumnName("s_atid_remark");
        });

        modelBuilder.Entity<SalesassetInventorySnc>(entity =>
        {
            entity.HasKey(e => new { e.SAtiId, e.SAtiSmId, e.SAtiVersion })
                .HasName("pk_SALESASSET_INVENTORY_SNC")
                .HasFillFactor(90);

            entity.ToTable("SALESASSET_INVENTORY_SNC", "syn");

            entity.Property(e => e.SAtiId).HasColumnName("s_ati_id");
            entity.Property(e => e.SAtiSmId).HasColumnName("s_ati_sm_id");
            entity.Property(e => e.SAtiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ati_version");
            entity.Property(e => e.SAtiDatetime)
                .HasColumnType("datetime")
                .HasColumnName("s_ati_datetime");
            entity.Property(e => e.SAtiLatitude)
                .HasMaxLength(32)
                .HasColumnName("s_ati_latitude");
            entity.Property(e => e.SAtiLongitude)
                .HasMaxLength(32)
                .HasColumnName("s_ati_longitude");
            entity.Property(e => e.SAtiRemark)
                .HasMaxLength(4000)
                .HasColumnName("s_ati_remark");
            entity.Property(e => e.SAtiThpsId).HasColumnName("s_ati_thps_id");
            entity.Property(e => e.SAtiUsId).HasColumnName("s_ati_us_id");
            entity.Property(e => e.SAtiVtId).HasColumnName("s_ati_vt_id");
        });

        modelBuilder.Entity<Salesman>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SALESMAN");

            entity.Property(e => e.SmAccessRights)
                .HasMaxLength(50)
                .HasColumnName("sm_access_rights");
            entity.Property(e => e.SmBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sm_balance");
            entity.Property(e => e.SmCdIdGlobalCur).HasColumnName("sm_cd_id_global_cur");
            entity.Property(e => e.SmCode)
                .HasMaxLength(16)
                .HasColumnName("sm_code");
            entity.Property(e => e.SmCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("sm_credit_limit");
            entity.Property(e => e.SmCuId).HasColumnName("sm_cu_id");
            entity.Property(e => e.SmId).HasColumnName("sm_id");
            entity.Property(e => e.SmLogin)
                .HasMaxLength(16)
                .HasColumnName("sm_login");
            entity.Property(e => e.SmName)
                .HasMaxLength(32)
                .HasColumnName("sm_name");
            entity.Property(e => e.SmPassword)
                .HasMaxLength(32)
                .HasColumnName("sm_password");
            entity.Property(e => e.SmPrinterName)
                .HasMaxLength(32)
                .HasColumnName("sm_printer_name");
            entity.Property(e => e.SmRefId).HasColumnName("sm_ref_id");
            entity.Property(e => e.SmText1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sm_text1");
            entity.Property(e => e.SmUgmId).HasColumnName("sm_ugm_id");
            entity.Property(e => e.SmVanId).HasColumnName("sm_van_id");
            entity.Property(e => e.SmVanNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sm_van_no");
        });

        modelBuilder.Entity<SalesmanSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSmId, e.SSmSmId, e.SSmVersion }).HasFillFactor(90);

            entity.ToTable("SALESMAN_SNC", "syn");

            entity.Property(e => e.SSmId).HasColumnName("s_sm_id");
            entity.Property(e => e.SSmSmId).HasColumnName("s_sm_sm_id");
            entity.Property(e => e.SSmVersion)
                .HasMaxLength(25)
                .HasColumnName("s_sm_version");
            entity.Property(e => e.SSmAccessRights)
                .HasMaxLength(50)
                .HasColumnName("s_sm_access_rights");
            entity.Property(e => e.SSmBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sm_balance");
            entity.Property(e => e.SSmCdIdGlobalCur).HasColumnName("s_sm_cd_id_global_cur");
            entity.Property(e => e.SSmCode)
                .HasMaxLength(16)
                .HasColumnName("s_sm_code");
            entity.Property(e => e.SSmCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_sm_credit_limit");
            entity.Property(e => e.SSmCuId).HasColumnName("s_sm_cu_id");
            entity.Property(e => e.SSmIsDataOwner).HasColumnName("s_sm_is_data_owner");
            entity.Property(e => e.SSmLogin)
                .HasMaxLength(16)
                .HasColumnName("s_sm_login");
            entity.Property(e => e.SSmName)
                .HasMaxLength(32)
                .HasColumnName("s_sm_name");
            entity.Property(e => e.SSmPassword)
                .HasMaxLength(32)
                .HasColumnName("s_sm_password");
            entity.Property(e => e.SSmPrinterName)
                .HasMaxLength(32)
                .HasColumnName("s_sm_printer_name");
            entity.Property(e => e.SSmRefId)
                .HasMaxLength(50)
                .HasColumnName("s_sm_ref_id");
            entity.Property(e => e.SSmText1)
                .HasMaxLength(50)
                .HasColumnName("s_sm_text1");
            entity.Property(e => e.SSmUgmId).HasColumnName("s_sm_ugm_id");
            entity.Property(e => e.SSmVanId).HasColumnName("s_sm_van_id");
            entity.Property(e => e.SSmVanNo)
                .HasMaxLength(32)
                .HasColumnName("s_sm_van_no");
        });

        modelBuilder.Entity<SalesmanTargetSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SALESMAN_TARGET_SNC", "syn");

            entity.Property(e => e.SSmgId).HasColumnName("s_smg_id");
            entity.Property(e => e.SSmgSmId).HasColumnName("s_smg_sm_id");
            entity.Property(e => e.SSmgType)
                .HasMaxLength(32)
                .HasColumnName("s_smg_type");
            entity.Property(e => e.SSmgVersion)
                .HasMaxLength(32)
                .HasColumnName("s_smg_version");
            entity.Property(e => e.SSmgYmTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_smg_ym_target_r");
            entity.Property(e => e.SSmgYmTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_smg_ym_target_v");
            entity.Property(e => e.SSmgYmValue)
                .HasMaxLength(6)
                .HasColumnName("s_smg_ym_value");
            entity.Property(e => e.SSmgYtdTargetR)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_smg_ytd_target_r");
            entity.Property(e => e.SSmgYtdTargetV)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_smg_ytd_target_v");
            entity.Property(e => e.SSmgYtdValue).HasColumnName("s_smg_ytd_value");
        });

        modelBuilder.Entity<ScreenConfig>(entity =>
        {
            entity.HasKey(e => e.SccId).HasFillFactor(90);

            entity.ToTable("SCREEN_CONFIG", "cmn");

            entity.Property(e => e.SccId).HasColumnName("scc_id");
            entity.Property(e => e.SccField)
                .HasMaxLength(64)
                .HasColumnName("scc_field");
            entity.Property(e => e.SccFieldType)
                .HasMaxLength(32)
                .HasColumnName("scc_field_type");
            entity.Property(e => e.SccScreenCode)
                .HasMaxLength(64)
                .HasColumnName("scc_screen_code");
            entity.Property(e => e.SccUsId).HasColumnName("scc_us_id");
            entity.Property(e => e.SccVisibility).HasColumnName("scc_visibility");
        });

        modelBuilder.Entity<SdfCleanAction>(entity =>
        {
            entity.HasKey(e => e.CaId).HasFillFactor(90);

            entity.ToTable("SDF_CLEAN_ACTIONS", "mforce");

            entity.Property(e => e.CaId).HasColumnName("ca_id");
            entity.Property(e => e.CaBeId).HasColumnName("ca_be_id");
            entity.Property(e => e.CaOrder).HasColumnName("ca_order");
            entity.Property(e => e.CaStatement)
                .HasMaxLength(150)
                .HasColumnName("ca_statement");
        });

        modelBuilder.Entity<SearchCriterion>(entity =>
        {
            entity.HasKey(e => e.ScId).HasFillFactor(90);

            entity.ToTable("SEARCH_CRITERIA", "cmn");

            entity.Property(e => e.ScId).HasColumnName("sc_id");
            entity.Property(e => e.ScBeId).HasColumnName("sc_be_id");
            entity.Property(e => e.ScColumn)
                .HasMaxLength(40)
                .HasColumnName("sc_column");
            entity.Property(e => e.ScColumnType)
                .HasMaxLength(20)
                .HasColumnName("sc_column_type");
            entity.Property(e => e.ScCriteriaType)
                .HasMaxLength(20)
                .HasColumnName("sc_criteria_type");
            entity.Property(e => e.ScDescription)
                .HasMaxLength(32)
                .HasColumnName("sc_description");
            entity.Property(e => e.ScDescriptionAr)
                .HasMaxLength(32)
                .HasColumnName("sc_description_ar");
            entity.Property(e => e.ScIsDefault)
                .HasDefaultValue((short)-1)
                .HasColumnName("sc_is_default");
            entity.Property(e => e.ScJoinClause)
                .HasMaxLength(100)
                .HasColumnName("sc_join_clause");
            entity.Property(e => e.ScJoinTable)
                .HasMaxLength(1000)
                .HasColumnName("sc_join_table");
            entity.Property(e => e.ScOrder).HasColumnName("sc_order");
            entity.Property(e => e.ScScreenCode)
                .HasMaxLength(20)
                .HasColumnName("sc_screen_code");
            entity.Property(e => e.ScSelect)
                .HasMaxLength(1000)
                .HasColumnName("sc_select");
            entity.Property(e => e.ScTag)
                .HasMaxLength(64)
                .HasColumnName("sc_tag");
        });

        modelBuilder.Entity<Sequence>(entity =>
        {
            entity.HasKey(e => e.SqId).HasFillFactor(90);

            entity.ToTable("SEQUENCE", "cmn");

            entity.HasIndex(e => e.SqCode, "idx_sq_code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.SqId).HasColumnName("sq_id");
            entity.Property(e => e.SqActive)
                .HasDefaultValue((short)1)
                .HasColumnName("sq_active");
            entity.Property(e => e.SqCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("sq_code");
            entity.Property(e => e.SqDate)
                .HasColumnType("datetime")
                .HasColumnName("sq_date");
            entity.Property(e => e.SqDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("sq_description_lan1");
            entity.Property(e => e.SqDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("sq_description_lan2");
            entity.Property(e => e.SqDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("sq_description_lan3");
            entity.Property(e => e.SqFrom)
                .HasDefaultValue(1)
                .HasColumnName("sq_from");
            entity.Property(e => e.SqTo)
                .HasDefaultValue(9999999)
                .HasColumnName("sq_to");
            entity.Property(e => e.SqUserId).HasColumnName("sq_user_id");
        });

        modelBuilder.Entity<ServiceTicket>(entity =>
        {
            entity.HasKey(e => e.SvtId)
                .HasName("PK__SERVICE___94D39054F3F48FD7")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET", "sls");

            entity.Property(e => e.SvtId).HasColumnName("svt_id");
            entity.Property(e => e.SvtCauseOfIssue)
                .HasMaxLength(255)
                .HasColumnName("svt_cause_of_issue");
            entity.Property(e => e.SvtCdIdStcoi).HasColumnName("svt_cd_id_stcoi");
            entity.Property(e => e.SvtCdIdStpr).HasColumnName("svt_cd_id_stpr");
            entity.Property(e => e.SvtCdIdStsts).HasColumnName("svt_cd_id_ststs");
            entity.Property(e => e.SvtCdIdStt).HasColumnName("svt_cd_id_stt");
            entity.Property(e => e.SvtCode)
                .HasMaxLength(64)
                .HasColumnName("svt_code");
            entity.Property(e => e.SvtComments).HasColumnName("svt_comments");
            entity.Property(e => e.SvtCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("svt_creation_date");
            entity.Property(e => e.SvtDeliveredTo)
                .HasMaxLength(256)
                .HasColumnName("svt_delivered_to");
            entity.Property(e => e.SvtDescription)
                .HasMaxLength(255)
                .HasColumnName("svt_description");
            entity.Property(e => e.SvtExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("svt_expiry_date");
            entity.Property(e => e.SvtItId).HasColumnName("svt_it_id");
            entity.Property(e => e.SvtResolution)
                .HasMaxLength(255)
                .HasColumnName("svt_resolution");
            entity.Property(e => e.SvtSerialNo)
                .HasMaxLength(64)
                .HasColumnName("svt_serial_no");
            entity.Property(e => e.SvtUid)
                .HasMaxLength(256)
                .HasColumnName("svt_uid");
            entity.Property(e => e.SvtUsId).HasColumnName("svt_us_id");
            entity.Property(e => e.SvtVtId).HasColumnName("svt_vt_id");

            entity.HasOne(d => d.SvtCdIdStcoiNavigation).WithMany(p => p.ServiceTicketSvtCdIdStcoiNavigations)
                .HasForeignKey(d => d.SvtCdIdStcoi)
                .HasConstraintName("FK_svt_ref_cd_stcoi");

            entity.HasOne(d => d.SvtCdIdStprNavigation).WithMany(p => p.ServiceTicketSvtCdIdStprNavigations)
                .HasForeignKey(d => d.SvtCdIdStpr)
                .HasConstraintName("FK_svt_ref_cd_stpr");

            entity.HasOne(d => d.SvtCdIdStstsNavigation).WithMany(p => p.ServiceTicketSvtCdIdStstsNavigations)
                .HasForeignKey(d => d.SvtCdIdStsts)
                .HasConstraintName("FK_svt_ref_cd_ststs");

            entity.HasOne(d => d.SvtCdIdSttNavigation).WithMany(p => p.ServiceTicketSvtCdIdSttNavigations)
                .HasForeignKey(d => d.SvtCdIdStt)
                .HasConstraintName("FK_svt_ref_cd_stt");

            entity.HasOne(d => d.SvtIt).WithMany(p => p.ServiceTickets)
                .HasForeignKey(d => d.SvtItId)
                .HasConstraintName("FK_svt_ref_it");

            entity.HasOne(d => d.SvtUs).WithMany(p => p.ServiceTickets)
                .HasForeignKey(d => d.SvtUsId)
                .HasConstraintName("FK_svt_ref_us");

            entity.HasOne(d => d.SvtVt).WithMany(p => p.ServiceTickets)
                .HasForeignKey(d => d.SvtVtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_svt_ref_vt");
        });

        modelBuilder.Entity<ServiceTicketDetail>(entity =>
        {
            entity.HasKey(e => e.SvtdId)
                .HasName("PK__SERVICE___7C4F1C064C80687F")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET_DETAIL", "sls");

            entity.Property(e => e.SvtdId).HasColumnName("svtd_id");
            entity.Property(e => e.SvtdCdIdSvtdcond).HasColumnName("svtd_cd_id_svtdcond");
            entity.Property(e => e.SvtdCdIdSvtdrs).HasColumnName("svtd_cd_id_svtdrs");
            entity.Property(e => e.SvtdComments).HasColumnName("svtd_comments");
            entity.Property(e => e.SvtdDescription)
                .HasMaxLength(256)
                .HasColumnName("svtd_description");
            entity.Property(e => e.SvtdSvtId).HasColumnName("svtd_svt_id");

            entity.HasOne(d => d.SvtdCdIdSvtdcondNavigation).WithMany(p => p.ServiceTicketDetailSvtdCdIdSvtdcondNavigations)
                .HasForeignKey(d => d.SvtdCdIdSvtdcond)
                .HasConstraintName("FK_svt_ref_cd_svtdcond");

            entity.HasOne(d => d.SvtdCdIdSvtdrsNavigation).WithMany(p => p.ServiceTicketDetailSvtdCdIdSvtdrsNavigations)
                .HasForeignKey(d => d.SvtdCdIdSvtdrs)
                .HasConstraintName("FK_svtd_ref_cd_svtdrs");

            entity.HasOne(d => d.SvtdSvt).WithMany(p => p.ServiceTicketDetails)
                .HasForeignKey(d => d.SvtdSvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_svtd_ref_svt");
        });

        modelBuilder.Entity<ServiceTicketDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSvtdId, e.SSvtdVersion, e.SSvtdSmId })
                .HasName("PK__SERVICE___DCDAED1D0FB9DBB0")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET_DETAIL_SNC", "syn");

            entity.Property(e => e.SSvtdId).HasColumnName("s_svtd_id");
            entity.Property(e => e.SSvtdVersion)
                .HasMaxLength(32)
                .HasColumnName("s_svtd_version");
            entity.Property(e => e.SSvtdSmId).HasColumnName("s_svtd_sm_id");
            entity.Property(e => e.SSvtdCdIdSvtdcond).HasColumnName("s_svtd_cd_id_svtdcond");
            entity.Property(e => e.SSvtdCdIdSvtdrs).HasColumnName("s_svtd_cd_id_svtdrs");
            entity.Property(e => e.SSvtdComments).HasColumnName("s_svtd_comments");
            entity.Property(e => e.SSvtdDescription)
                .HasMaxLength(256)
                .HasColumnName("s_svtd_description");
            entity.Property(e => e.SSvtdSvtId).HasColumnName("s_svtd_svt_id");
        });

        modelBuilder.Entity<ServiceTicketSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSvtId, e.SSvtVersion, e.SSvtSmId })
                .HasName("PK__SERVICE___6721E46BE00EAB73")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET_SNC", "syn");

            entity.Property(e => e.SSvtId).HasColumnName("s_svt_id");
            entity.Property(e => e.SSvtVersion)
                .HasMaxLength(32)
                .HasColumnName("s_svt_version");
            entity.Property(e => e.SSvtSmId).HasColumnName("s_svt_sm_id");
            entity.Property(e => e.SSvtCauseOfIssue)
                .HasMaxLength(255)
                .HasColumnName("s_svt_cause_of_issue");
            entity.Property(e => e.SSvtCdIdStcoi).HasColumnName("s_svt_cd_id_stcoi");
            entity.Property(e => e.SSvtCdIdStpr).HasColumnName("s_svt_cd_id_stpr");
            entity.Property(e => e.SSvtCdIdStsts).HasColumnName("s_svt_cd_id_ststs");
            entity.Property(e => e.SSvtCdIdStt).HasColumnName("s_svt_cd_id_stt");
            entity.Property(e => e.SSvtCode)
                .HasMaxLength(64)
                .HasColumnName("s_svt_code");
            entity.Property(e => e.SSvtComments).HasColumnName("s_svt_comments");
            entity.Property(e => e.SSvtCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_svt_creation_date");
            entity.Property(e => e.SSvtDeliveredTo)
                .HasMaxLength(256)
                .HasColumnName("s_svt_delivered_to");
            entity.Property(e => e.SSvtDescription)
                .HasMaxLength(255)
                .HasColumnName("s_svt_description");
            entity.Property(e => e.SSvtExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_svt_expiry_date");
            entity.Property(e => e.SSvtItId).HasColumnName("s_svt_it_id");
            entity.Property(e => e.SSvtResolution)
                .HasMaxLength(255)
                .HasColumnName("s_svt_resolution");
            entity.Property(e => e.SSvtSerialNo)
                .HasMaxLength(64)
                .HasColumnName("s_svt_serial_no");
            entity.Property(e => e.SSvtUid)
                .HasMaxLength(256)
                .HasColumnName("s_svt_uid");
            entity.Property(e => e.SSvtUsId).HasColumnName("s_svt_us_id");
            entity.Property(e => e.SSvtVtId).HasColumnName("s_svt_vt_id");
        });

        modelBuilder.Entity<ServiceTicketStatusHistory>(entity =>
        {
            entity.HasKey(e => e.SvtshId)
                .HasName("PK__SERVICE___49914DED6C387556")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET_STATUS_HISTORY", "sls");

            entity.Property(e => e.SvtshId).HasColumnName("svtsh_id");
            entity.Property(e => e.SvtshCdIdStsts).HasColumnName("svtsh_cd_id_ststs");
            entity.Property(e => e.SvtshCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("svtsh_creation_date");
            entity.Property(e => e.SvtshSvtId).HasColumnName("svtsh_svt_id");
            entity.Property(e => e.SvtshUsId).HasColumnName("svtsh_us_id");

            entity.HasOne(d => d.SvtshCdIdStstsNavigation).WithMany(p => p.ServiceTicketStatusHistories)
                .HasForeignKey(d => d.SvtshCdIdStsts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_svtsh_ref_ststs");

            entity.HasOne(d => d.SvtshSvt).WithMany(p => p.ServiceTicketStatusHistories)
                .HasForeignKey(d => d.SvtshSvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_svtsh_ref_svt");
        });

        modelBuilder.Entity<ServiceTicketStatusHistorySnc>(entity =>
        {
            entity.HasKey(e => new { e.SSvtshId, e.SSvtshVersion, e.SSvtshSmId })
                .HasName("PK__SERVICE___BAE142C67B470F14")
                .HasFillFactor(90);

            entity.ToTable("SERVICE_TICKET_STATUS_HISTORY_SNC", "syn");

            entity.Property(e => e.SSvtshId).HasColumnName("s_svtsh_id");
            entity.Property(e => e.SSvtshVersion)
                .HasMaxLength(32)
                .HasColumnName("s_svtsh_version");
            entity.Property(e => e.SSvtshSmId).HasColumnName("s_svtsh_sm_id");
            entity.Property(e => e.SSvtshCdIdStsts).HasColumnName("s_svtsh_cd_id_ststs");
            entity.Property(e => e.SSvtshCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_svtsh_creation_date");
            entity.Property(e => e.SSvtshSvtId).HasColumnName("s_svtsh_svt_id");
            entity.Property(e => e.SSvtshUsId).HasColumnName("s_svtsh_us_id");
        });

        modelBuilder.Entity<SignatureConfig>(entity =>
        {
            entity.HasKey(e => e.SgcId).HasFillFactor(90);

            entity.ToTable("SIGNATURE_CONFIG", "cmn");

            entity.Property(e => e.SgcId).HasColumnName("sgc_id");
            entity.Property(e => e.SgcFolder)
                .HasMaxLength(255)
                .HasColumnName("sgc_folder");
            entity.Property(e => e.SgcMaxCount).HasColumnName("sgc_max_count");
            entity.Property(e => e.SgcMinCount).HasColumnName("sgc_min_count");
            entity.Property(e => e.SgcScreenCode)
                .HasMaxLength(64)
                .HasColumnName("sgc_screen_code");
            entity.Property(e => e.SgcSourceCodes)
                .HasMaxLength(255)
                .HasColumnName("sgc_source_codes");
        });

        modelBuilder.Entity<SignatureConfigLine>(entity =>
        {
            entity.HasKey(e => e.SgclId).HasFillFactor(90);

            entity.ToTable("SIGNATURE_CONFIG_LINE", "cmn");

            entity.Property(e => e.SgclId).HasColumnName("sgcl_id");
            entity.Property(e => e.SgclCanDelete).HasColumnName("sgcl_can_delete");
            entity.Property(e => e.SgclCanModifyDescription).HasColumnName("sgcl_can_modify_description");
            entity.Property(e => e.SgclCanModifyLabel).HasColumnName("sgcl_can_modify_label");
            entity.Property(e => e.SgclCanModifySatisfaction).HasColumnName("sgcl_can_modify_satisfaction");
            entity.Property(e => e.SgclCanModifySsrc).HasColumnName("sgcl_can_modify_ssrc");
            entity.Property(e => e.SgclDefaultDescription)
                .HasMaxLength(255)
                .HasColumnName("sgcl_default_description");
            entity.Property(e => e.SgclDefaultLabel)
                .HasMaxLength(255)
                .HasColumnName("sgcl_default_label");
            entity.Property(e => e.SgclDefaultSatisfaction).HasColumnName("sgcl_default_satisfaction");
            entity.Property(e => e.SgclDefaultSsrc)
                .HasMaxLength(32)
                .HasColumnName("sgcl_default_ssrc");
            entity.Property(e => e.SgclIsNew).HasColumnName("sgcl_is_new");
            entity.Property(e => e.SgclMandatoryDescription).HasColumnName("sgcl_mandatory_description");
            entity.Property(e => e.SgclMandatoryLabel).HasColumnName("sgcl_mandatory_label");
            entity.Property(e => e.SgclMandatorySatisfaction).HasColumnName("sgcl_mandatory_satisfaction");
            entity.Property(e => e.SgclMandatorySsrc).HasColumnName("sgcl_mandatory_ssrc");
            entity.Property(e => e.SgclSgcId).HasColumnName("sgcl_sgc_id");
            entity.Property(e => e.SgclWithDescription).HasColumnName("sgcl_with_description");
            entity.Property(e => e.SgclWithLabel).HasColumnName("sgcl_with_label");
            entity.Property(e => e.SgclWithSatisfaction).HasColumnName("sgcl_with_satisfaction");
            entity.Property(e => e.SgclWithSsrc).HasColumnName("sgcl_with_ssrc");

            entity.HasOne(d => d.SgclSgc).WithMany(p => p.SignatureConfigLines)
                .HasForeignKey(d => d.SgclSgcId)
                .HasConstraintName("FK_SGCL_REF_SGC");
        });

        modelBuilder.Entity<SignatureDetail>(entity =>
        {
            entity.HasKey(e => e.SgdId).HasFillFactor(90);

            entity.ToTable("SIGNATURE_DETAIL", "cmn");

            entity.Property(e => e.SgdId).HasColumnName("sgd_id");
            entity.Property(e => e.SgdCdIdSsrc).HasColumnName("sgd_cd_id_ssrc");
            entity.Property(e => e.SgdDate)
                .HasColumnType("datetime")
                .HasColumnName("sgd_date");
            entity.Property(e => e.SgdDescription)
                .HasMaxLength(1024)
                .HasColumnName("sgd_description");
            entity.Property(e => e.SgdFkValue).HasColumnName("sgd_fk_value");
            entity.Property(e => e.SgdLabel)
                .HasMaxLength(256)
                .HasColumnName("sgd_label");
            entity.Property(e => e.SgdOrgId).HasColumnName("sgd_org_id");
            entity.Property(e => e.SgdReference)
                .HasMaxLength(256)
                .HasColumnName("sgd_reference");
            entity.Property(e => e.SgdSatisfaction).HasColumnName("sgd_satisfaction");
            entity.Property(e => e.SgdSignFileName)
                .HasMaxLength(1024)
                .HasColumnName("sgd_sign_file_name");
            entity.Property(e => e.SgdSignFilePath)
                .HasMaxLength(1024)
                .HasColumnName("sgd_sign_file_path");
            entity.Property(e => e.SgdText1)
                .HasMaxLength(256)
                .HasColumnName("sgd_text1");
            entity.Property(e => e.SgdText2)
                .HasMaxLength(256)
                .HasColumnName("sgd_text2");
        });

        modelBuilder.Entity<SignatureDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSgdId, e.SSgdVersion }).HasFillFactor(90);

            entity.ToTable("SIGNATURE_DETAILS_SNC", "syn");

            entity.Property(e => e.SSgdId).HasColumnName("s_sgd_id");
            entity.Property(e => e.SSgdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_sgd_version");
            entity.Property(e => e.SSgdDate)
                .HasColumnType("datetime")
                .HasColumnName("s_sgd_date");
            entity.Property(e => e.SSgdIsCreated).HasColumnName("s_sgd_is_created");
            entity.Property(e => e.SSgdName)
                .HasMaxLength(100)
                .HasColumnName("s_sgd_name");
            entity.Property(e => e.SSgdSignFile)
                .HasMaxLength(255)
                .HasColumnName("s_sgd_sign_file");
            entity.Property(e => e.SSgdSmId).HasColumnName("s_sgd_sm_id");
            entity.Property(e => e.SSgdSynched).HasColumnName("s_sgd_synched");
            entity.Property(e => e.SSgdText1)
                .HasMaxLength(100)
                .HasColumnName("s_sgd_text1");
            entity.Property(e => e.SSgdText2)
                .HasMaxLength(100)
                .HasColumnName("s_sgd_text2");
        });

        modelBuilder.Entity<SignatureInfoSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSiId, e.SSiSmId, e.SSiVersion })
                .HasName("pk_signature_info_snc")
                .HasFillFactor(90);

            entity.ToTable("SIGNATURE_INFO_SNC", "syn");

            entity.Property(e => e.SSiId).HasColumnName("s_si_id");
            entity.Property(e => e.SSiSmId)
                .HasMaxLength(32)
                .HasColumnName("s_si_sm_id");
            entity.Property(e => e.SSiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_si_version");
            entity.Property(e => e.SSiCodeLb)
                .HasMaxLength(20)
                .HasColumnName("s_si_code_lb");
            entity.Property(e => e.SSiDocLb)
                .HasMaxLength(20)
                .HasColumnName("s_si_doc_lb");
            entity.Property(e => e.SSiDocvalLb)
                .HasMaxLength(20)
                .HasColumnName("s_si_docval_lb");
            entity.Property(e => e.SSiFolder)
                .HasMaxLength(50)
                .HasColumnName("s_si_folder");
            entity.Property(e => e.SSiNameLb)
                .HasMaxLength(20)
                .HasColumnName("s_si_name_lb");
            entity.Property(e => e.SSiScreenCode)
                .HasMaxLength(3)
                .HasColumnName("s_si_screen_code");
        });

        modelBuilder.Entity<Stand>(entity =>
        {
            entity.HasKey(e => e.StId).HasFillFactor(90);

            entity.ToTable("STANDS", "mforce");

            entity.Property(e => e.StId).HasColumnName("st_id");
            entity.Property(e => e.StBarcode)
                .HasMaxLength(32)
                .HasColumnName("st_barcode");
            entity.Property(e => e.StBeId).HasColumnName("st_be_id");
            entity.Property(e => e.StCdIdSclr).HasColumnName("st_cd_id_sclr");
            entity.Property(e => e.StCdIdSdim).HasColumnName("st_cd_id_sdim");
            entity.Property(e => e.StCdIdSfrm).HasColumnName("st_cd_id_sfrm");
            entity.Property(e => e.StCdIdSmtr).HasColumnName("st_cd_id_smtr");
            entity.Property(e => e.StCdIdStyp).HasColumnName("st_cd_id_styp");
            entity.Property(e => e.StCode)
                .HasMaxLength(32)
                .HasColumnName("st_code");
            entity.Property(e => e.StCuId).HasColumnName("st_cu_id");
            entity.Property(e => e.StDescription)
                .HasMaxLength(250)
                .HasColumnName("st_description");
            entity.Property(e => e.StDescriptionAr)
                .HasMaxLength(250)
                .HasColumnName("st_description_ar");
            entity.Property(e => e.StNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("st_num1");
            entity.Property(e => e.StNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("st_num2");
            entity.Property(e => e.StText1)
                .HasMaxLength(250)
                .HasColumnName("st_text1");
            entity.Property(e => e.StText2)
                .HasMaxLength(250)
                .HasColumnName("st_text2");
        });

        modelBuilder.Entity<StandsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SStId, e.SStSmId, e.SStVersion })
                .HasName("pk_stands_snc")
                .HasFillFactor(90);

            entity.ToTable("STANDS_SNC", "syn");

            entity.Property(e => e.SStId).HasColumnName("s_st_id");
            entity.Property(e => e.SStSmId)
                .HasMaxLength(32)
                .HasColumnName("s_st_sm_id");
            entity.Property(e => e.SStVersion)
                .HasMaxLength(32)
                .HasColumnName("s_st_version");
            entity.Property(e => e.SStBarcode)
                .HasMaxLength(32)
                .HasColumnName("s_st_barcode");
            entity.Property(e => e.SStCdIdSclr).HasColumnName("s_st_cd_id_sclr");
            entity.Property(e => e.SStCdIdSdim).HasColumnName("s_st_cd_id_sdim");
            entity.Property(e => e.SStCdIdSfrm).HasColumnName("s_st_cd_id_sfrm");
            entity.Property(e => e.SStCdIdSmtr).HasColumnName("s_st_cd_id_smtr");
            entity.Property(e => e.SStCdIdStyp).HasColumnName("s_st_cd_id_styp");
            entity.Property(e => e.SStCode)
                .HasMaxLength(32)
                .HasColumnName("s_st_code");
            entity.Property(e => e.SStCuId).HasColumnName("s_st_cu_id");
            entity.Property(e => e.SStDescription)
                .HasMaxLength(250)
                .HasColumnName("s_st_description");
            entity.Property(e => e.SStDescriptionAr)
                .HasMaxLength(250)
                .HasColumnName("s_st_description_ar");
            entity.Property(e => e.SStNum1)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_st_num1");
            entity.Property(e => e.SStNum2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_st_num2");
            entity.Property(e => e.SStText1)
                .HasMaxLength(250)
                .HasColumnName("s_st_text1");
            entity.Property(e => e.SStText2)
                .HasMaxLength(250)
                .HasColumnName("s_st_text2");
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.HasKey(e => e.SrId)
                .HasName("PK_SURVEY_CATEGORY")
                .HasFillFactor(90);

            entity.ToTable("SURVEY", "cmn");

            entity.HasIndex(e => e.SrNameLan1, "ix_survey_category").HasFillFactor(90);

            entity.Property(e => e.SrId).HasColumnName("sr_id");
            entity.Property(e => e.SrActive).HasColumnName("sr_active");
            entity.Property(e => e.SrAllUsers)
                .HasDefaultValue((short)1)
                .HasColumnName("sr_all_users");
            entity.Property(e => e.SrBuId).HasColumnName("sr_bu_id");
            entity.Property(e => e.SrCdIdSra).HasColumnName("sr_cd_id_sra");
            entity.Property(e => e.SrCdIdSrt).HasColumnName("sr_cd_id_srt");
            entity.Property(e => e.SrCode)
                .HasMaxLength(400)
                .HasColumnName("sr_code");
            entity.Property(e => e.SrDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan1");
            entity.Property(e => e.SrDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan2");
            entity.Property(e => e.SrDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan3");
            entity.Property(e => e.SrFromDate)
                .HasColumnType("datetime")
                .HasColumnName("sr_from_date");
            entity.Property(e => e.SrMandatory).HasColumnName("sr_mandatory");
            entity.Property(e => e.SrNameLan1)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan1");
            entity.Property(e => e.SrNameLan2)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan2");
            entity.Property(e => e.SrNameLan3)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan3");
            entity.Property(e => e.SrReadBarcode).HasColumnName("sr_read_barcode");
            entity.Property(e => e.SrToDate)
                .HasColumnType("datetime")
                .HasColumnName("sr_to_date");

            entity.HasOne(d => d.SrBu).WithMany(p => p.Surveys)
                .HasForeignKey(d => d.SrBuId)
                .HasConstraintName("FK_SURVEY_REFERENCE_BUSINESS");

            entity.HasOne(d => d.SrCdIdSraNavigation).WithMany(p => p.SurveySrCdIdSraNavigations)
                .HasForeignKey(d => d.SrCdIdSra)
                .HasConstraintName("FK_SR_REF_CD_SRA");

            entity.HasOne(d => d.SrCdIdSrtNavigation).WithMany(p => p.SurveySrCdIdSrtNavigations)
                .HasForeignKey(d => d.SrCdIdSrt)
                .HasConstraintName("FK_SR_REF_CD_SRT");
        });

        modelBuilder.Entity<Survey2>(entity =>
        {
            entity.HasKey(e => e.SrId)
                .HasName("PK_SURVEY_CATEGORY")
                .HasFillFactor(90);

            entity.ToTable("SURVEY2", "svy");

            entity.HasIndex(e => e.SrNameLan1, "ix_survey_category").HasFillFactor(90);

            entity.Property(e => e.SrId).HasColumnName("sr_id");
            entity.Property(e => e.SrActive).HasColumnName("sr_active");
            entity.Property(e => e.SrCdIdSra).HasColumnName("sr_cd_id_sra");
            entity.Property(e => e.SrCdIdSrt).HasColumnName("sr_cd_id_srt");
            entity.Property(e => e.SrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sr_code");
            entity.Property(e => e.SrDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan1");
            entity.Property(e => e.SrDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan2");
            entity.Property(e => e.SrDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("sr_description_lan3");
            entity.Property(e => e.SrGenerated).HasColumnName("sr_generated");
            entity.Property(e => e.SrNameLan1)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan1");
            entity.Property(e => e.SrNameLan2)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan2");
            entity.Property(e => e.SrNameLan3)
                .HasMaxLength(32)
                .HasColumnName("sr_name_lan3");
            entity.Property(e => e.SrOrgId).HasColumnName("sr_org_id");
            entity.Property(e => e.SrReadBarcode).HasColumnName("sr_read_barcode");
            entity.Property(e => e.SrSrId).HasColumnName("sr_sr_id");
            entity.Property(e => e.SrVersion)
                .HasMaxLength(128)
                .HasColumnName("sr_version");

            entity.HasOne(d => d.SrCdIdSraNavigation).WithMany(p => p.Survey2SrCdIdSraNavigations)
                .HasForeignKey(d => d.SrCdIdSra)
                .HasConstraintName("FK_SR_REF_CD_SRA");

            entity.HasOne(d => d.SrCdIdSrtNavigation).WithMany(p => p.Survey2SrCdIdSrtNavigations)
                .HasForeignKey(d => d.SrCdIdSrt)
                .HasConstraintName("FK_SR_REF_CD_SRT");

            entity.HasOne(d => d.SrSr).WithMany(p => p.InverseSrSr)
                .HasForeignKey(d => d.SrSrId)
                .HasConstraintName("FK_SR_REF_SR");
        });

        modelBuilder.Entity<Survey2BusinessUnit>(entity =>
        {
            entity.HasKey(e => e.SrbId).HasFillFactor(90);

            entity.ToTable("SURVEY2_BUSINESS_UNIT", "svy");

            entity.Property(e => e.SrbId).HasColumnName("srb_id");
            entity.Property(e => e.SrbBuId).HasColumnName("srb_bu_id");
            entity.Property(e => e.SrbCdIdSrt).HasColumnName("srb_cd_id_srt");
            entity.Property(e => e.SrbSrId).HasColumnName("srb_sr_id");

            entity.HasOne(d => d.SrbBu).WithMany(p => p.Survey2BusinessUnits)
                .HasForeignKey(d => d.SrbBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRB_REF_BU");

            entity.HasOne(d => d.SrbCdIdSrtNavigation).WithMany(p => p.Survey2BusinessUnits)
                .HasForeignKey(d => d.SrbCdIdSrt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRB_REF_CD_SRT");

            entity.HasOne(d => d.SrbSr).WithMany(p => p.Survey2BusinessUnits)
                .HasForeignKey(d => d.SrbSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRB_REF_SR");
        });

        modelBuilder.Entity<Survey2Detail>(entity =>
        {
            entity.HasKey(e => e.SrdId).HasFillFactor(90);

            entity.ToTable("SURVEY2_DETAIL", "svy");

            entity.HasIndex(e => e.SrdSrId, "srqd_srq_idx").HasFillFactor(90);

            entity.Property(e => e.SrdId).HasColumnName("srd_id");
            entity.Property(e => e.SrdBudget)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("srd_budget");
            entity.Property(e => e.SrdCdIdCur).HasColumnName("srd_cd_id_cur");
            entity.Property(e => e.SrdCdIdFrq).HasColumnName("srd_cd_id_frq");
            entity.Property(e => e.SrdCdIdSrdagr).HasColumnName("srd_cd_id_srdagr");
            entity.Property(e => e.SrdCdIdSrdct).HasColumnName("srd_cd_id_srdct");
            entity.Property(e => e.SrdCdIdSrdsts)
                .HasDefaultValue((short)-1)
                .HasColumnName("srd_cd_id_srdsts");
            entity.Property(e => e.SrdCdIdSrdtp).HasColumnName("srd_cd_id_srdtp");
            entity.Property(e => e.SrdComments)
                .HasMaxLength(255)
                .HasColumnName("srd_comments");
            entity.Property(e => e.SrdCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("srd_creation_date");
            entity.Property(e => e.SrdDateFrom)
                .HasColumnType("datetime")
                .HasColumnName("srd_date_from");
            entity.Property(e => e.SrdDateTo)
                .HasColumnType("datetime")
                .HasColumnName("srd_date_to");
            entity.Property(e => e.SrdFacing).HasColumnName("srd_facing");
            entity.Property(e => e.SrdIcfId).HasColumnName("srd_icf_id");
            entity.Property(e => e.SrdIcfvId).HasColumnName("srd_icfv_id");
            entity.Property(e => e.SrdNotes).HasColumnName("srd_notes");
            entity.Property(e => e.SrdOccurence)
                .HasDefaultValue(1)
                .HasColumnName("srd_occurence");
            entity.Property(e => e.SrdOrgId).HasColumnName("srd_org_id");
            entity.Property(e => e.SrdReminderDate)
                .HasColumnType("datetime")
                .HasColumnName("srd_reminder_date");
            entity.Property(e => e.SrdSrId).HasColumnName("srd_sr_id");
            entity.Property(e => e.SrdUsId).HasColumnName("srd_us_id");
            entity.Property(e => e.SrdUsIdCr).HasColumnName("srd_us_id_cr");

            entity.HasOne(d => d.SrdSr).WithMany(p => p.Survey2Details)
                .HasForeignKey(d => d.SrdSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRD_REF_SR");

            entity.HasOne(d => d.SrdUs).WithMany(p => p.Survey2DetailSrdUs)
                .HasForeignKey(d => d.SrdUsId)
                .HasConstraintName("FK_SRD_REF_US");

            entity.HasOne(d => d.SrdUsIdCrNavigation).WithMany(p => p.Survey2DetailSrdUsIdCrNavigations)
                .HasForeignKey(d => d.SrdUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRD_REF_US_CR");
        });

        modelBuilder.Entity<Survey2DetailStatusHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SURVEY2_DETAIL_STATUS_HISTORY", "svy");

            entity.Property(e => e.SrdhCdIdSrdsts)
                .HasDefaultValue((short)-1)
                .HasColumnName("srdh_cd_id_srdsts");
            entity.Property(e => e.SrdhCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("srdh_creation_date");
            entity.Property(e => e.SrdhId)
                .ValueGeneratedOnAdd()
                .HasColumnName("srdh_id");
            entity.Property(e => e.SrdhSrdId).HasColumnName("srdh_srd_id");
            entity.Property(e => e.SrdhUsId).HasColumnName("srdh_us_id");

            entity.HasOne(d => d.SrdhSrd).WithMany()
                .HasForeignKey(d => d.SrdhSrdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRDH_REF_SRd");

            entity.HasOne(d => d.SrdhUs).WithMany()
                .HasForeignKey(d => d.SrdhUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRDH_REF_US");
        });

        modelBuilder.Entity<Survey2Question>(entity =>
        {
            entity.HasKey(e => e.SrqId)
                .HasName("PK_SURVEY_ITEM")
                .HasFillFactor(90);

            entity.ToTable("SURVEY2_QUESTION", "svy");

            entity.HasIndex(e => e.SrqSrId, "ix_survey_item_1").HasFillFactor(90);

            entity.Property(e => e.SrqId).HasColumnName("srq_id");
            entity.Property(e => e.SrqActive).HasColumnName("srq_active");
            entity.Property(e => e.SrqBarcode)
                .HasMaxLength(32)
                .HasColumnName("srq_barcode");
            entity.Property(e => e.SrqCanMultiply).HasColumnName("srq_can_multiply");
            entity.Property(e => e.SrqCdIdAnt).HasColumnName("srq_cd_id_ant");
            entity.Property(e => e.SrqCdIdFrq).HasColumnName("srq_cd_id_frq");
            entity.Property(e => e.SrqCdIdSgr).HasColumnName("srq_cd_id_sgr");
            entity.Property(e => e.SrqCdIdSqa).HasColumnName("srq_cd_id_sqa");
            entity.Property(e => e.SrqCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("srq_code");
            entity.Property(e => e.SrqGroupCode)
                .HasMaxLength(32)
                .HasColumnName("srq_group_code");
            entity.Property(e => e.SrqGroupText)
                .HasMaxLength(255)
                .HasColumnName("srq_group_text");
            entity.Property(e => e.SrqIdTable)
                .HasMaxLength(20)
                .HasColumnName("srq_id_table");
            entity.Property(e => e.SrqIdValue).HasColumnName("srq_id_value");
            entity.Property(e => e.SrqIsRequired).HasColumnName("srq_is_required");
            entity.Property(e => e.SrqMultipleSelection).HasColumnName("srq_multiple_selection");
            entity.Property(e => e.SrqOrder).HasColumnName("srq_order");
            entity.Property(e => e.SrqOrgId).HasColumnName("srq_org_id");
            entity.Property(e => e.SrqParentAnswer)
                .HasMaxLength(100)
                .HasColumnName("srq_parent_answer");
            entity.Property(e => e.SrqQuestion).HasColumnName("srq_question");
            entity.Property(e => e.SrqRequireBarcode).HasColumnName("srq_require_barcode");
            entity.Property(e => e.SrqSaId).HasColumnName("srq_sa_id");
            entity.Property(e => e.SrqSadIdParent).HasColumnName("srq_sad_id_parent");
            entity.Property(e => e.SrqSrId).HasColumnName("srq_sr_id");
            entity.Property(e => e.SrqSrqId).HasColumnName("srq_srq_id");
            entity.Property(e => e.SrqVersion)
                .HasMaxLength(128)
                .HasColumnName("srq_version");

            entity.HasOne(d => d.SrqCdIdAntNavigation).WithMany(p => p.Survey2QuestionSrqCdIdAntNavigations)
                .HasForeignKey(d => d.SrqCdIdAnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRQ_REF_CD_ANT");

            entity.HasOne(d => d.SrqCdIdFrqNavigation).WithMany(p => p.Survey2QuestionSrqCdIdFrqNavigations)
                .HasForeignKey(d => d.SrqCdIdFrq)
                .HasConstraintName("FK_SRQ_REF_CD_FRQ");

            entity.HasOne(d => d.SrqCdIdSgrNavigation).WithMany(p => p.Survey2QuestionSrqCdIdSgrNavigations)
                .HasForeignKey(d => d.SrqCdIdSgr)
                .HasConstraintName("FK_SRQ_REF_CD_SGR");

            entity.HasOne(d => d.SrqCdIdSqaNavigation).WithMany(p => p.Survey2QuestionSrqCdIdSqaNavigations)
                .HasForeignKey(d => d.SrqCdIdSqa)
                .HasConstraintName("FK_SRQ_REF_CD_SQA");

            entity.HasOne(d => d.SrqSa).WithMany(p => p.Survey2Questions)
                .HasForeignKey(d => d.SrqSaId)
                .HasConstraintName("FK_SRQ_REF_SA");

            entity.HasOne(d => d.SrqSadIdParentNavigation).WithMany(p => p.Survey2Questions)
                .HasForeignKey(d => d.SrqSadIdParent)
                .HasConstraintName("FK_SRQ_REF_SAD_Parent");

            entity.HasOne(d => d.SrqSr).WithMany(p => p.Survey2Questions)
                .HasForeignKey(d => d.SrqSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_REF_SRQ");

            entity.HasOne(d => d.SrqSrq).WithMany(p => p.InverseSrqSrq)
                .HasForeignKey(d => d.SrqSrqId)
                .HasConstraintName("FK_SRQ_REF_SRQ");
        });

        modelBuilder.Entity<Survey2Result>(entity =>
        {
            entity.HasKey(e => e.SrrId).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT", "svy");

            entity.Property(e => e.SrrId).HasColumnName("srr_id");
            entity.Property(e => e.SrrCdIdSrc).HasColumnName("srr_cd_id_src");
            entity.Property(e => e.SrrComment)
                .HasMaxLength(512)
                .HasColumnName("srr_comment");
            entity.Property(e => e.SrrOrgId).HasColumnName("srr_org_id");
            entity.Property(e => e.SrrSrId).HasColumnName("srr_sr_id");
            entity.Property(e => e.SrrTimeIn)
                .HasColumnType("smalldatetime")
                .HasColumnName("srr_time_in");
            entity.Property(e => e.SrrTimeOut)
                .HasColumnType("smalldatetime")
                .HasColumnName("srr_time_out");
            entity.Property(e => e.SrrUid)
                .HasMaxLength(64)
                .HasColumnName("srr_uid");
            entity.Property(e => e.SrrVtId).HasColumnName("srr_vt_id");
            entity.Property(e => e.SrrVtIdOrg).HasColumnName("srr_vt_id_org");

            entity.HasOne(d => d.SrrSr).WithMany(p => p.Survey2Results)
                .HasForeignKey(d => d.SrrSrId)
                .HasConstraintName("FK_SRX_REF_SR");

            entity.HasOne(d => d.SrrVt).WithMany(p => p.Survey2Results)
                .HasForeignKey(d => d.SrrVtId)
                .HasConstraintName("FK_SRR_REF_VT");
        });

        modelBuilder.Entity<Survey2ResultAnswer>(entity =>
        {
            entity.HasKey(e => e.SraId).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT_ANSWER", "svy");

            entity.HasIndex(e => e.SraSrrId, "sra_srr_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.SraSrrId, e.SraSrqdId, e.SraSadId }, "sra_srr_srqd_sad_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.SraId).HasColumnName("sra_id");
            entity.Property(e => e.SraComments)
                .HasMaxLength(1024)
                .HasColumnName("sra_comments");
            entity.Property(e => e.SraDatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("sra_datetime");
            entity.Property(e => e.SraFreeText)
                .HasMaxLength(150)
                .HasColumnName("sra_free_text");
            entity.Property(e => e.SraIdOrg).HasColumnName("sra_id_org");
            entity.Property(e => e.SraOrder).HasColumnName("sra_order");
            entity.Property(e => e.SraSadId).HasColumnName("sra_sad_id");
            entity.Property(e => e.SraSrqdId).HasColumnName("sra_srqd_id");
            entity.Property(e => e.SraSrrId).HasColumnName("sra_srr_id");
            entity.Property(e => e.SraSrrIdOrg).HasColumnName("sra_srr_id_org");

            entity.HasOne(d => d.SraSad).WithMany(p => p.Survey2ResultAnswers)
                .HasForeignKey(d => d.SraSadId)
                .HasConstraintName("FK_SRA_REF_SAD");

            entity.HasOne(d => d.SraSrqd).WithMany(p => p.Survey2ResultAnswers)
                .HasForeignKey(d => d.SraSrqdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRQD_REF_SRXA");

            entity.HasOne(d => d.SraSrr).WithMany(p => p.Survey2ResultAnswers)
                .HasForeignKey(d => d.SraSrrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRR_REF_SRA");
        });

        modelBuilder.Entity<Survey2ResultAnswerMulti>(entity =>
        {
            entity.HasKey(e => e.SramId).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT_ANSWER_MULTI", "svy");

            entity.Property(e => e.SramId).HasColumnName("sram_id");
            entity.Property(e => e.SramSadId).HasColumnName("sram_sad_id");
            entity.Property(e => e.SramSraId).HasColumnName("sram_sra_id");

            entity.HasOne(d => d.SramSad).WithMany(p => p.Survey2ResultAnswerMultis)
                .HasForeignKey(d => d.SramSadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRAM_REF_SAD");

            entity.HasOne(d => d.SramSra).WithMany(p => p.Survey2ResultAnswerMultis)
                .HasForeignKey(d => d.SramSraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRAM_REF_SRA");
        });

        modelBuilder.Entity<Survey2ResultAnswerMultiSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSramId, e.SSramVersion, e.SSramUsId }).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT_ANSWER_MULTI_SNC", "syn");

            entity.Property(e => e.SSramId).HasColumnName("s_sram_id");
            entity.Property(e => e.SSramVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sram_version");
            entity.Property(e => e.SSramUsId).HasColumnName("s_sram_us_id");
            entity.Property(e => e.SSramSadId).HasColumnName("s_sram_sad_id");
            entity.Property(e => e.SSramSraId).HasColumnName("s_sram_sra_id");
        });

        modelBuilder.Entity<Survey2ResultAnswerSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSraId, e.SSraVersion, e.SSraUsId }).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT_ANSWER_SNC", "syn");

            entity.Property(e => e.SSraId).HasColumnName("s_sra_id");
            entity.Property(e => e.SSraVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sra_version");
            entity.Property(e => e.SSraUsId).HasColumnName("s_sra_us_id");
            entity.Property(e => e.SSraComments)
                .HasMaxLength(1024)
                .HasColumnName("s_sra_comments");
            entity.Property(e => e.SSraDatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("s_sra_datetime");
            entity.Property(e => e.SSraFreeText)
                .HasMaxLength(150)
                .HasColumnName("s_sra_free_text");
            entity.Property(e => e.SSraIdOrg).HasColumnName("s_sra_id_org");
            entity.Property(e => e.SSraOrder).HasColumnName("s_sra_order");
            entity.Property(e => e.SSraSadId).HasColumnName("s_sra_sad_id");
            entity.Property(e => e.SSraSrqdId).HasColumnName("s_sra_srqd_id");
            entity.Property(e => e.SSraSrrId).HasColumnName("s_sra_srr_id");
            entity.Property(e => e.SSraSrrIdOrg).HasColumnName("s_sra_srr_id_org");
            entity.Property(e => e.SSraSrrUid)
                .HasMaxLength(128)
                .HasColumnName("s_sra_srr_uid");
        });

        modelBuilder.Entity<Survey2ResultSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSrrId, e.SSrrVersion, e.SSrrUsId }).HasFillFactor(90);

            entity.ToTable("SURVEY2_RESULT_SNC", "syn");

            entity.Property(e => e.SSrrId).HasColumnName("s_srr_id");
            entity.Property(e => e.SSrrVersion)
                .HasMaxLength(32)
                .HasColumnName("s_srr_version");
            entity.Property(e => e.SSrrUsId).HasColumnName("s_srr_us_id");
            entity.Property(e => e.SSrrCdIdSrc).HasColumnName("s_srr_cd_id_src");
            entity.Property(e => e.SSrrComment)
                .HasMaxLength(512)
                .HasColumnName("s_srr_comment");
            entity.Property(e => e.SSrrOrgId).HasColumnName("s_srr_org_id");
            entity.Property(e => e.SSrrSrId).HasColumnName("s_srr_sr_id");
            entity.Property(e => e.SSrrTimeIn)
                .HasColumnType("smalldatetime")
                .HasColumnName("s_srr_time_in");
            entity.Property(e => e.SSrrTimeOut)
                .HasColumnType("smalldatetime")
                .HasColumnName("s_srr_time_out");
            entity.Property(e => e.SSrrUid)
                .HasMaxLength(64)
                .HasColumnName("s_srr_uid");
            entity.Property(e => e.SSrrVtId).HasColumnName("s_srr_vt_id");
            entity.Property(e => e.SSrrVtIdOrg).HasColumnName("s_srr_vt_id_org");
            entity.Property(e => e.SSrrVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_srr_vt_uid");
        });

        modelBuilder.Entity<Survey2Status>(entity =>
        {
            entity.HasKey(e => e.SrsId).HasFillFactor(90);

            entity.ToTable("SURVEY2_STATUS", "svy");

            entity.Property(e => e.SrsId).HasColumnName("srs_id");
            entity.Property(e => e.SrsCdIdIns).HasColumnName("srs_cd_id_ins");
            entity.Property(e => e.SrsSrId).HasColumnName("srs_sr_id");

            entity.HasOne(d => d.SrsCdIdInsNavigation).WithMany(p => p.Survey2Statuses)
                .HasForeignKey(d => d.SrsCdIdIns)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRS_REF_CD_INS");

            entity.HasOne(d => d.SrsSr).WithMany(p => p.Survey2Statuses)
                .HasForeignKey(d => d.SrsSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRS_REF_SR");
        });

        modelBuilder.Entity<Survey2answer>(entity =>
        {
            entity.HasKey(e => e.SaId).HasFillFactor(90);

            entity.ToTable("SURVEY2ANSWER", "svy");

            entity.Property(e => e.SaId).HasColumnName("sa_id");
            entity.Property(e => e.SaCdIdAnt).HasColumnName("sa_cd_id_ant");
            entity.Property(e => e.SaCode)
                .HasMaxLength(50)
                .HasColumnName("sa_code");
            entity.Property(e => e.SaDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan1");
            entity.Property(e => e.SaDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan2");
            entity.Property(e => e.SaDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan3");

            entity.HasOne(d => d.SaCdIdAntNavigation).WithMany(p => p.Survey2answers)
                .HasForeignKey(d => d.SaCdIdAnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SA_REF_CD_ANT");
        });

        modelBuilder.Entity<Survey2answerDetail>(entity =>
        {
            entity.HasKey(e => e.SadId).HasFillFactor(90);

            entity.ToTable("SURVEY2ANSWER_DETAIL", "svy");

            entity.Property(e => e.SadId).HasColumnName("sad_id");
            entity.Property(e => e.SadCdIdAnt).HasColumnName("sad_cd_id_ant");
            entity.Property(e => e.SadCode)
                .HasMaxLength(50)
                .HasColumnName("sad_code");
            entity.Property(e => e.SadDescriptionLan1)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan1");
            entity.Property(e => e.SadDescriptionLan2)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan2");
            entity.Property(e => e.SadDescriptionLan3)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan3");
            entity.Property(e => e.SadOrder).HasColumnName("sad_order");
            entity.Property(e => e.SadRequired).HasColumnName("sad_required");
            entity.Property(e => e.SadSaId).HasColumnName("sad_sa_id");

            entity.HasOne(d => d.SadCdIdAntNavigation).WithMany(p => p.Survey2answerDetails)
                .HasForeignKey(d => d.SadCdIdAnt)
                .HasConstraintName("FK_SAD_REF_CD_ANT");

            entity.HasOne(d => d.SadSa).WithMany(p => p.Survey2answerDetails)
                .HasForeignKey(d => d.SadSaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAD_REF_SA");
        });

        modelBuilder.Entity<Survey2detailPromotionType>(entity =>
        {
            entity.HasKey(e => e.SrdpId)
                .HasName("PK_SURVEY2DETAIL_PROMOTION_TYP")
                .HasFillFactor(90);

            entity.ToTable("SURVEY2DETAIL_PROMOTION_TYPE", "svy");

            entity.HasIndex(e => e.SrdpSrdId, "srqd_srq_idx").HasFillFactor(90);

            entity.Property(e => e.SrdpId).HasColumnName("srdp_id");
            entity.Property(e => e.SrdpCdIdSrdpt).HasColumnName("srdp_cd_id_srdpt");
            entity.Property(e => e.SrdpComments)
                .HasMaxLength(255)
                .HasColumnName("srdp_comments");
            entity.Property(e => e.SrdpSrdId).HasColumnName("srdp_srd_id");

            entity.HasOne(d => d.SrdpCdIdSrdptNavigation).WithMany(p => p.Survey2detailPromotionTypes)
                .HasForeignKey(d => d.SrdpCdIdSrdpt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRDP_REF_SRD");

            entity.HasOne(d => d.SrdpSrd).WithMany(p => p.Survey2detailPromotionTypes)
                .HasForeignKey(d => d.SrdpSrdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRDQ_REF_SRD");
        });

        modelBuilder.Entity<Survey2exeanswerImage>(entity =>
        {
            entity.HasKey(e => e.SrxaiId).HasFillFactor(90);

            entity.ToTable("SURVEY2EXEANSWER_IMAGE", "svy");

            entity.Property(e => e.SrxaiId).HasColumnName("srxai_id");
            entity.Property(e => e.SrxaiOrder).HasColumnName("srxai_order");
            entity.Property(e => e.SrxaiPathname)
                .HasMaxLength(512)
                .HasColumnName("srxai_pathname");
            entity.Property(e => e.SrxaiSraId).HasColumnName("srxai_sra_id");

            entity.HasOne(d => d.SrxaiSra).WithMany(p => p.Survey2exeanswerImages)
                .HasForeignKey(d => d.SrxaiSraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRXAI_REF_SRXA");
        });

        modelBuilder.Entity<Survey2exeanswerImageSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSrxaiId, e.SSrxaiUsId, e.SSrxaiVersion }).HasFillFactor(90);

            entity.ToTable("SURVEY2EXEANSWER_IMAGE_SNC", "syn");

            entity.Property(e => e.SSrxaiId).HasColumnName("s_srxai_id");
            entity.Property(e => e.SSrxaiUsId).HasColumnName("s_srxai_us_id");
            entity.Property(e => e.SSrxaiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_srxai_version");
            entity.Property(e => e.SSrxaiOrder).HasColumnName("s_srxai_order");
            entity.Property(e => e.SSrxaiPathname)
                .HasMaxLength(512)
                .HasColumnName("s_srxai_pathname");
            entity.Property(e => e.SSrxaiSraId).HasColumnName("s_srxai_sra_id");
        });

        modelBuilder.Entity<Survey2questionDetail>(entity =>
        {
            entity.HasKey(e => e.SrqdId).HasFillFactor(90);

            entity.ToTable("SURVEY2QUESTION_DETAIL", "svy");

            entity.HasIndex(e => e.SrqdSrqId, "srqd_srq_idx").HasFillFactor(90);

            entity.Property(e => e.SrqdId).HasColumnName("srqd_id");
            entity.Property(e => e.SrqdCdIdFrq).HasColumnName("srqd_cd_id_frq");
            entity.Property(e => e.SrqdDateFrom)
                .HasColumnType("datetime")
                .HasColumnName("srqd_date_from");
            entity.Property(e => e.SrqdDateTo)
                .HasColumnType("datetime")
                .HasColumnName("srqd_date_to");
            entity.Property(e => e.SrqdOccurence)
                .HasDefaultValue(1)
                .HasColumnName("srqd_occurence");
            entity.Property(e => e.SrqdSrdId).HasColumnName("srqd_srd_id");
            entity.Property(e => e.SrqdSrqId).HasColumnName("srqd_srq_id");
            entity.Property(e => e.SrqdStatus)
                .HasDefaultValue((short)-1)
                .HasColumnName("srqd_status");
            entity.Property(e => e.SrqdUsId).HasColumnName("srqd_us_id");

            entity.HasOne(d => d.SrqdSrq).WithMany(p => p.Survey2questionDetails)
                .HasForeignKey(d => d.SrqdSrqId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRQD_REF_SRQ");
        });

        modelBuilder.Entity<SurveyCategorySnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SURVEY_CATEGORY_SNC", "syn");

            entity.Property(e => e.SScActive).HasColumnName("s_sc_active");
            entity.Property(e => e.SScCdNum1ApplyTo).HasColumnName("s_sc_cd_num1_apply_to");
            entity.Property(e => e.SScCdNum1Type).HasColumnName("s_sc_cd_num1_type");
            entity.Property(e => e.SScCode)
                .HasMaxLength(64)
                .HasColumnName("s_sc_code");
            entity.Property(e => e.SScId).HasColumnName("s_sc_id");
            entity.Property(e => e.SScName)
                .HasMaxLength(32)
                .HasColumnName("s_sc_name");
            entity.Property(e => e.SScNameAr)
                .HasMaxLength(64)
                .HasColumnName("s_sc_name_ar");
            entity.Property(e => e.SScReadBarcode).HasColumnName("s_sc_read_barcode");
            entity.Property(e => e.SScSmId)
                .HasMaxLength(32)
                .HasColumnName("s_sc_sm_id");
            entity.Property(e => e.SScVersion)
                .HasMaxLength(32)
                .HasColumnName("s_sc_version");
        });

        modelBuilder.Entity<SurveyItemSnc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SURVEY_ITEM_SNC", "syn");

            entity.Property(e => e.SSiActive).HasColumnName("s_si_active");
            entity.Property(e => e.SSiCdIdAnswerType).HasColumnName("s_si_cd_id_answer_type");
            entity.Property(e => e.SSiCode)
                .HasMaxLength(64)
                .HasColumnName("s_si_code");
            entity.Property(e => e.SSiId).HasColumnName("s_si_id");
            entity.Property(e => e.SSiQuestion)
                .HasMaxLength(255)
                .HasColumnName("s_si_question");
            entity.Property(e => e.SSiReadBarcode).HasColumnName("s_si_read_barcode");
            entity.Property(e => e.SSiScId).HasColumnName("s_si_sc_id");
            entity.Property(e => e.SSiSmId)
                .HasMaxLength(32)
                .HasColumnName("s_si_sm_id");
            entity.Property(e => e.SSiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_si_version");
        });

        modelBuilder.Entity<SurveyQuestion>(entity =>
        {
            entity.HasKey(e => e.SrqId)
                .HasName("PK_SURVEY_ITEM")
                .HasFillFactor(90);

            entity.ToTable("SURVEY_QUESTION", "cmn");

            entity.HasIndex(e => e.SrqCdIdAnt, "ix_survey_item").HasFillFactor(90);

            entity.HasIndex(e => e.SrqSrId, "ix_survey_item_1").HasFillFactor(90);

            entity.Property(e => e.SrqId).HasColumnName("srq_id");
            entity.Property(e => e.SrqActive).HasColumnName("srq_active");
            entity.Property(e => e.SrqBarcode)
                .HasMaxLength(32)
                .HasColumnName("srq_barcode");
            entity.Property(e => e.SrqCdIdAnt).HasColumnName("srq_cd_id_ant");
            entity.Property(e => e.SrqCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("srq_code");
            entity.Property(e => e.SrqIdTable)
                .HasMaxLength(20)
                .HasColumnName("srq_id_table");
            entity.Property(e => e.SrqIdValue).HasColumnName("srq_id_value");
            entity.Property(e => e.SrqIsRequired).HasColumnName("srq_is_required");
            entity.Property(e => e.SrqItref).HasColumnName("srq_itref");
            entity.Property(e => e.SrqMultipleSelection).HasColumnName("srq_multiple_selection");
            entity.Property(e => e.SrqOrder).HasColumnName("srq_order");
            entity.Property(e => e.SrqParentAnswer)
                .HasMaxLength(100)
                .HasColumnName("srq_parent_answer");
            entity.Property(e => e.SrqParentSadId).HasColumnName("srq_parent_sad_id");
            entity.Property(e => e.SrqQuestionLan1)
                .HasMaxLength(255)
                .HasColumnName("srq_question_lan1");
            entity.Property(e => e.SrqQuestionLan2)
                .HasMaxLength(255)
                .HasColumnName("srq_question_lan2");
            entity.Property(e => e.SrqQuestionLan3)
                .HasMaxLength(255)
                .HasColumnName("srq_question_lan3");
            entity.Property(e => e.SrqRequireBarcode).HasColumnName("srq_require_barcode");
            entity.Property(e => e.SrqSaId).HasColumnName("srq_sa_id");
            entity.Property(e => e.SrqSrId).HasColumnName("srq_sr_id");
            entity.Property(e => e.SrqSrqId).HasColumnName("srq_srq_id");

            entity.HasOne(d => d.SrqCdIdAntNavigation).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SrqCdIdAnt)
                .HasConstraintName("FK_SRI_REF_CD_ANT");

            entity.HasOne(d => d.SrqSa).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SrqSaId)
                .HasConstraintName("FK_SRQ_REF_SA");

            entity.HasOne(d => d.SrqSr).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SrqSrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_REF_SRQ");
        });

        modelBuilder.Entity<SurveyResult>(entity =>
        {
            entity.HasKey(e => e.SrrId).HasFillFactor(90);

            entity.ToTable("SURVEY_RESULT", "cmn");

            entity.Property(e => e.SrrId).HasColumnName("srr_id");
            entity.Property(e => e.SrrCdIdSrc).HasColumnName("srr_cd_id_src");
            entity.Property(e => e.SrrComment)
                .HasMaxLength(100)
                .HasColumnName("srr_comment");
            entity.Property(e => e.SrrOrgId).HasColumnName("srr_org_id");
            entity.Property(e => e.SrrSgdId).HasColumnName("srr_sgd_id");
            entity.Property(e => e.SrrSrId).HasColumnName("srr_sr_id");
            entity.Property(e => e.SrrTimeIn)
                .HasColumnType("smalldatetime")
                .HasColumnName("srr_time_in");
            entity.Property(e => e.SrrTimeOut)
                .HasColumnType("smalldatetime")
                .HasColumnName("srr_time_out");
            entity.Property(e => e.SrrUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("srr_uid");
            entity.Property(e => e.SrrUsId).HasColumnName("srr_us_id");
            entity.Property(e => e.SrrVtId).HasColumnName("srr_vt_id");
            entity.Property(e => e.SrrVtIdOrg).HasColumnName("srr_vt_id_org");

            entity.HasOne(d => d.SrrCdIdSrcNavigation).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.SrrCdIdSrc)
                .HasConstraintName("FK_SURVEY_R_REFERENCE_CODESC");

            entity.HasOne(d => d.SrrSgd).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.SrrSgdId)
                .HasConstraintName("FK_SURVEY_R_REFERENCE_SIGNATUR");

            entity.HasOne(d => d.SrrSr).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.SrrSrId)
                .HasConstraintName("FK_SRR_REFE_SR");

            entity.HasOne(d => d.SrrVt).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.SrrVtId)
                .HasConstraintName("FK_SURVEY_R_REFERENCE_VISIT");
        });

        modelBuilder.Entity<SurveyResultAnswer>(entity =>
        {
            entity.HasKey(e => e.SraId).HasFillFactor(90);

            entity.ToTable("SURVEY_RESULT_ANSWER", "cmn");

            entity.Property(e => e.SraId).HasColumnName("sra_id");
            entity.Property(e => e.SraDatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("sra_datetime");
            entity.Property(e => e.SraFreeText)
                .HasMaxLength(150)
                .HasColumnName("sra_free_text");
            entity.Property(e => e.SraIdOrg).HasColumnName("sra_id_org");
            entity.Property(e => e.SraOrder).HasColumnName("sra_order");
            entity.Property(e => e.SraSadId).HasColumnName("sra_sad_id");
            entity.Property(e => e.SraSrqId).HasColumnName("sra_srq_id");
            entity.Property(e => e.SraSrrId).HasColumnName("sra_srr_id");
            entity.Property(e => e.SraSrrIdOrg).HasColumnName("sra_srr_id_org");

            entity.HasOne(d => d.SraSad).WithMany(p => p.SurveyResultAnswers)
                .HasForeignKey(d => d.SraSadId)
                .HasConstraintName("FK_SRA_REFE_SAD");

            entity.HasOne(d => d.SraSrq).WithMany(p => p.SurveyResultAnswers)
                .HasForeignKey(d => d.SraSrqId)
                .HasConstraintName("FK_SRA_REF_SRQ");

            entity.HasOne(d => d.SraSrr).WithMany(p => p.SurveyResultAnswers)
                .HasForeignKey(d => d.SraSrrId)
                .HasConstraintName("FK_SRR_REF_SRA");
        });

        modelBuilder.Entity<SurveyThirdparty>(entity =>
        {
            entity.HasKey(e => e.SrthId).HasFillFactor(90);

            entity.ToTable("SURVEY_THIRDPARTY", "cmn");

            entity.Property(e => e.SrthId).HasColumnName("srth_id");
            entity.Property(e => e.SrthSrId).HasColumnName("srth_sr_id");
            entity.Property(e => e.SrthThpsId).HasColumnName("srth_thps_id");

            entity.HasOne(d => d.SrthSr).WithMany(p => p.SurveyThirdparties)
                .HasForeignKey(d => d.SrthSrId)
                .HasConstraintName("FK_SRTH_REF_SR");

            entity.HasOne(d => d.SrthThps).WithMany(p => p.SurveyThirdparties)
                .HasForeignKey(d => d.SrthThpsId)
                .HasConstraintName("FK_SRTH_REF_THPS");
        });

        modelBuilder.Entity<SurveyUser>(entity =>
        {
            entity.HasKey(e => e.SrusId).HasFillFactor(90);

            entity.ToTable("SURVEY_USER", "cmn");

            entity.Property(e => e.SrusId).HasColumnName("srus_id");
            entity.Property(e => e.SrusSrId).HasColumnName("srus_sr_id");
            entity.Property(e => e.SrusUsId).HasColumnName("srus_us_id");

            entity.HasOne(d => d.SrusSr).WithMany(p => p.SurveyUsers)
                .HasForeignKey(d => d.SrusSrId)
                .HasConstraintName("FK_SRUS_REF_SR");

            entity.HasOne(d => d.SrusUs).WithMany(p => p.SurveyUsers)
                .HasForeignKey(d => d.SrusUsId)
                .HasConstraintName("FK_SRUS_REF_US");
        });

        modelBuilder.Entity<Surveyanswer>(entity =>
        {
            entity.HasKey(e => e.SaId).HasFillFactor(90);

            entity.ToTable("SURVEYANSWER", "cmn");

            entity.Property(e => e.SaId).HasColumnName("sa_id");
            entity.Property(e => e.SaCdIdAnt).HasColumnName("sa_cd_id_ant");
            entity.Property(e => e.SaCode)
                .HasMaxLength(50)
                .HasColumnName("sa_code");
            entity.Property(e => e.SaDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan1");
            entity.Property(e => e.SaDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan2");
            entity.Property(e => e.SaDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("sa_description_lan3");

            entity.HasOne(d => d.SaCdIdAntNavigation).WithMany(p => p.Surveyanswers)
                .HasForeignKey(d => d.SaCdIdAnt)
                .HasConstraintName("FK_SURVEYAN_REFERENCE_CODESC");
        });

        modelBuilder.Entity<SurveyanswerDetail>(entity =>
        {
            entity.HasKey(e => e.SadId).HasFillFactor(90);

            entity.ToTable("SURVEYANSWER_DETAIL", "cmn");

            entity.Property(e => e.SadId).HasColumnName("sad_id");
            entity.Property(e => e.SadCode)
                .HasMaxLength(50)
                .HasColumnName("sad_code");
            entity.Property(e => e.SadDescriptionLan1)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan1");
            entity.Property(e => e.SadDescriptionLan2)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan2");
            entity.Property(e => e.SadDescriptionLan3)
                .HasMaxLength(64)
                .HasColumnName("sad_description_lan3");
            entity.Property(e => e.SadOrder).HasColumnName("sad_order");
            entity.Property(e => e.SadSaId).HasColumnName("sad_sa_id");

            entity.HasOne(d => d.SadSa).WithMany(p => p.SurveyanswerDetails)
                .HasForeignKey(d => d.SadSaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAD_REF_SA");
        });

        modelBuilder.Entity<SyncInfo>(entity =>
        {
            entity.HasKey(e => e.SiId).HasFillFactor(90);

            entity.ToTable("SYNC_INFO", "syn");

            entity.Property(e => e.SiId).HasColumnName("si_id");
            entity.Property(e => e.SiCdIdSrc).HasColumnName("si_cd_id_src");
            entity.Property(e => e.SiCdIdSyt).HasColumnName("si_cd_id_syt");
            entity.Property(e => e.SiDownloadDate)
                .HasColumnType("datetime")
                .HasColumnName("si_download_date");
            entity.Property(e => e.SiExportDate)
                .HasColumnType("datetime")
                .HasColumnName("si_export_date");
            entity.Property(e => e.SiExportFlag).HasColumnName("si_export_flag");
            entity.Property(e => e.SiMergeDate)
                .HasColumnType("datetime")
                .HasColumnName("si_merge_date");
            entity.Property(e => e.SiMergeFlag).HasColumnName("si_merge_flag");
            entity.Property(e => e.SiUploadDate)
                .HasColumnType("datetime")
                .HasColumnName("si_upload_date");
            entity.Property(e => e.SiUploadFlag).HasColumnName("si_upload_flag");
            entity.Property(e => e.SiUsId).HasColumnName("si_us_id");
            entity.Property(e => e.SiVersionSync)
                .HasMaxLength(32)
                .HasColumnName("si_version_sync");
        });

        modelBuilder.Entity<SyncInfoSnc>(entity =>
        {
            entity.HasKey(e => new { e.SSiId, e.SSiVersionSync, e.SSiUsIdSync }).HasFillFactor(90);

            entity.ToTable("SYNC_INFO_SNC", "syn");

            entity.Property(e => e.SSiId).HasColumnName("s_si_id");
            entity.Property(e => e.SSiVersionSync)
                .HasMaxLength(32)
                .HasColumnName("s_si_version_sync");
            entity.Property(e => e.SSiUsIdSync).HasColumnName("s_si_us_id_sync");
            entity.Property(e => e.SSiCdIdSrc).HasColumnName("s_si_cd_id_src");
            entity.Property(e => e.SSiCdIdSyt).HasColumnName("s_si_cd_id_syt");
            entity.Property(e => e.SSiDownloadDate)
                .HasColumnType("datetime")
                .HasColumnName("s_si_download_date");
            entity.Property(e => e.SSiExportDate)
                .HasColumnType("datetime")
                .HasColumnName("s_si_export_date");
            entity.Property(e => e.SSiExportFlag).HasColumnName("s_si_export_flag");
            entity.Property(e => e.SSiMergeDate)
                .HasColumnType("datetime")
                .HasColumnName("s_si_merge_date");
            entity.Property(e => e.SSiMergeFlag).HasColumnName("s_si_merge_flag");
            entity.Property(e => e.SSiUploadDate)
                .HasColumnType("datetime")
                .HasColumnName("s_si_upload_date");
            entity.Property(e => e.SSiUploadFlag).HasColumnName("s_si_upload_flag");
            entity.Property(e => e.SSiUsId).HasColumnName("s_si_us_id");
        });

        modelBuilder.Entity<SyncLog>(entity =>
        {
            entity.HasKey(e => e.SylId).HasFillFactor(90);

            entity.ToTable("SYNC_LOG", "syn");

            entity.HasIndex(e => e.SylUsId, "NonClusteredIndex-20180730-095437").HasFillFactor(90);

            entity.Property(e => e.SylId).HasColumnName("syl_id");
            entity.Property(e => e.SylResult).HasColumnName("syl_result");
            entity.Property(e => e.SylSyncVersion)
                .HasMaxLength(30)
                .HasColumnName("syl_sync_version");
            entity.Property(e => e.SylUsId).HasColumnName("syl_us_id");
            entity.Property(e => e.TsyDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tsy_datetime");
        });

        modelBuilder.Entity<SyncReturntable>(entity =>
        {
            entity.HasKey(e => new { e.SId, e.SUsId, e.SVersion }).HasFillFactor(90);

            entity.ToTable("SYNC_RETURNTABLE", "syn");

            entity.Property(e => e.SId)
                .ValueGeneratedOnAdd()
                .HasColumnName("s_id");
            entity.Property(e => e.SUsId).HasColumnName("s_us_id");
            entity.Property(e => e.SVersion)
                .HasMaxLength(64)
                .HasColumnName("s_version");
            entity.Property(e => e.SDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("s_datetime");
            entity.Property(e => e.SOrd).HasColumnName("s_ord");
            entity.Property(e => e.SQueryString).HasColumnName("s_query_string");
            entity.Property(e => e.SScriptType).HasColumnName("s_script_type");
        });

        modelBuilder.Entity<SystemOperator>(entity =>
        {
            entity.HasKey(e => e.SoId).HasFillFactor(90);

            entity.ToTable("SYSTEM_OPERATOR", "cmn");

            entity.Property(e => e.SoId).HasColumnName("so_id");
            entity.Property(e => e.SoActive).HasColumnName("so_active");
            entity.Property(e => e.SoEmail)
                .HasMaxLength(100)
                .HasColumnName("so_email");
            entity.Property(e => e.SoName)
                .HasMaxLength(50)
                .HasColumnName("so_name");
            entity.Property(e => e.SoSms)
                .HasMaxLength(20)
                .HasColumnName("so_sms");
            entity.Property(e => e.SoUsId).HasColumnName("so_us_id");
        });

        modelBuilder.Entity<TableLock>(entity =>
        {
            entity.HasKey(e => e.TlId).HasFillFactor(90);

            entity.ToTable("TABLE_LOCKS", "cmn");

            entity.HasIndex(e => e.TlSession, "tl_session_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.TlTable, e.TlPk }, "tl_table_pk_idx").HasFillFactor(90);

            entity.Property(e => e.TlId).HasColumnName("tl_id");
            entity.Property(e => e.TlActive)
                .HasComputedColumnSql("(case when getdate()>dateadd(second,(120),[tl_date]) then (-1) else (1) end)", false)
                .HasColumnName("tl_active");
            entity.Property(e => e.TlBeId).HasColumnName("tl_be_id");
            entity.Property(e => e.TlDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tl_date");
            entity.Property(e => e.TlPk).HasColumnName("tl_pk");
            entity.Property(e => e.TlPkSupp)
                .HasMaxLength(64)
                .HasColumnName("tl_pk_supp");
            entity.Property(e => e.TlSession)
                .HasMaxLength(64)
                .HasColumnName("tl_session");
            entity.Property(e => e.TlSource)
                .HasMaxLength(255)
                .HasColumnName("tl_source");
            entity.Property(e => e.TlTable)
                .HasMaxLength(64)
                .HasColumnName("tl_table");
            entity.Property(e => e.TlUser)
                .HasMaxLength(64)
                .HasColumnName("tl_user");
        });

        modelBuilder.Entity<Target>(entity =>
        {
            entity.HasKey(e => e.TaId).HasFillFactor(90);

            entity.ToTable("TARGET", "sls");

            entity.HasIndex(e => e.TaCode, "ix_target").HasFillFactor(90);

            entity.HasIndex(e => e.TaCdIdTrs1, "ta_cd_id_trs_1").HasFillFactor(90);

            entity.HasIndex(e => e.TaCdIdTrs2, "ta_cd_id_trs_2").HasFillFactor(90);

            entity.HasIndex(e => e.TaCdIdTrs3, "ta_cd_id_trs_3").HasFillFactor(90);

            entity.Property(e => e.TaId).HasColumnName("ta_id");
            entity.Property(e => e.CodCdId3).HasColumnName("cod_cd_id3");
            entity.Property(e => e.TaActive).HasColumnName("ta_active");
            entity.Property(e => e.TaBuId).HasColumnName("ta_bu_id");
            entity.Property(e => e.TaCdIdCur).HasColumnName("ta_cd_id_cur");
            entity.Property(e => e.TaCdIdTrc).HasColumnName("ta_cd_id_trc");
            entity.Property(e => e.TaCdIdTrs1).HasColumnName("ta_cd_id_trs_1");
            entity.Property(e => e.TaCdIdTrs2).HasColumnName("ta_cd_id_trs_2");
            entity.Property(e => e.TaCdIdTrs3).HasColumnName("ta_cd_id_trs_3");
            entity.Property(e => e.TaCdIdTrs4).HasColumnName("ta_cd_id_trs_4");
            entity.Property(e => e.TaCdIdTrs5).HasColumnName("ta_cd_id_trs_5");
            entity.Property(e => e.TaCdIdTrs6).HasColumnName("ta_cd_id_trs_6");
            entity.Property(e => e.TaCdIdTrt).HasColumnName("ta_cd_id_trt");
            entity.Property(e => e.TaCode)
                .HasMaxLength(50)
                .HasColumnName("ta_code");
            entity.Property(e => e.TaCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("ta_create_date");
            entity.Property(e => e.TaDescription)
                .HasMaxLength(250)
                .HasColumnName("ta_description");
            entity.Property(e => e.TaUsId).HasColumnName("ta_us_id");
            entity.Property(e => e.TaYear)
                .HasDefaultValue(2009)
                .HasColumnName("ta_year");

            entity.HasOne(d => d.CodCdId3Navigation).WithMany(p => p.TargetCodCdId3Navigations)
                .HasForeignKey(d => d.CodCdId3)
                .HasConstraintName("FK_TA_REF_CD_TRS_6");

            entity.HasOne(d => d.TaCdIdCurNavigation).WithMany(p => p.TargetTaCdIdCurNavigations)
                .HasForeignKey(d => d.TaCdIdCur)
                .HasConstraintName("FK_TA_REF_CD_CUR");

            entity.HasOne(d => d.TaCdIdTrcNavigation).WithMany(p => p.TargetTaCdIdTrcNavigations)
                .HasForeignKey(d => d.TaCdIdTrc)
                .HasConstraintName("FK_TA_REF_CD_TRC");

            entity.HasOne(d => d.TaCdIdTrs1Navigation).WithMany(p => p.TargetTaCdIdTrs1Navigations)
                .HasForeignKey(d => d.TaCdIdTrs1)
                .HasConstraintName("FK_TA_REF_CD_TRS_1");

            entity.HasOne(d => d.TaCdIdTrs2Navigation).WithMany(p => p.TargetTaCdIdTrs2Navigations)
                .HasForeignKey(d => d.TaCdIdTrs2)
                .HasConstraintName("FK_TA_REF_CD_TRS_2");

            entity.HasOne(d => d.TaCdIdTrs3Navigation).WithMany(p => p.TargetTaCdIdTrs3Navigations)
                .HasForeignKey(d => d.TaCdIdTrs3)
                .HasConstraintName("FK_TA_REF_CD_TRS_3");

            entity.HasOne(d => d.TaCdIdTrs4Navigation).WithMany(p => p.TargetTaCdIdTrs4Navigations)
                .HasForeignKey(d => d.TaCdIdTrs4)
                .HasConstraintName("FK_TA_REF_CD_TRS_4");

            entity.HasOne(d => d.TaCdIdTrs5Navigation).WithMany(p => p.TargetTaCdIdTrs5Navigations)
                .HasForeignKey(d => d.TaCdIdTrs5)
                .HasConstraintName("FK_TA_REF_CD_TRS_5");

            entity.HasOne(d => d.TaCdIdTrtNavigation).WithMany(p => p.TargetTaCdIdTrtNavigations)
                .HasForeignKey(d => d.TaCdIdTrt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TA_REF_CD_TRT");
        });

        modelBuilder.Entity<TargetAchieved>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TARGET_ACHIEVED", "sls");

            entity.Property(e => e.Value)
                .HasMaxLength(32)
                .HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(32)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(32)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(32)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<TargetDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TARGET_DATA", "cmn");

            entity.Property(e => e.TgAchievement)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tg_achievement");
            entity.Property(e => e.TgDescriptionLan1)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("tg_description_lan1");
            entity.Property(e => e.TgDescriptionLan2)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("tg_description_lan2");
            entity.Property(e => e.TgDescriptionLan3)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("tg_description_lan3");
            entity.Property(e => e.TgDimension)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tg_dimension");
            entity.Property(e => e.TgFkValue).HasColumnName("tg_fk_value");
            entity.Property(e => e.TgId)
                .ValueGeneratedOnAdd()
                .HasColumnName("tg_id");
            entity.Property(e => e.TgPeriod).HasColumnName("tg_period");
            entity.Property(e => e.TgTarget)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tg_target");
            entity.Property(e => e.TgTitleLan1)
                .HasMaxLength(255)
                .HasColumnName("tg_title_lan1");
            entity.Property(e => e.TgTitleLan2)
                .HasMaxLength(255)
                .HasColumnName("tg_title_lan2");
            entity.Property(e => e.TgTitleLan3)
                .HasMaxLength(255)
                .HasColumnName("tg_title_lan3");
            entity.Property(e => e.TgUsId).HasColumnName("tg_us_id");
        });

        modelBuilder.Entity<TargetDetail>(entity =>
        {
            entity.HasKey(e => e.TdId).HasFillFactor(90);

            entity.ToTable("TARGET_DETAILS", "sls");

            entity.HasIndex(e => e.TdThpsId, "td_source_idx").HasFillFactor(90);

            entity.HasIndex(e => e.TdTaId, "td_ta_idx").HasFillFactor(90);

            entity.Property(e => e.TdId).HasColumnName("td_id");
            entity.Property(e => e.TdApr)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_apr");
            entity.Property(e => e.TdAug)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_aug");
            entity.Property(e => e.TdCdIdIbd).HasColumnName("td_cd_id_ibd");
            entity.Property(e => e.TdCdIdIgp).HasColumnName("td_cd_id_igp");
            entity.Property(e => e.TdDec)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_dec");
            entity.Property(e => e.TdFeb)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_feb");
            entity.Property(e => e.TdGlId).HasColumnName("td_gl_id");
            entity.Property(e => e.TdItId).HasColumnName("td_it_id");
            entity.Property(e => e.TdJan)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_jan");
            entity.Property(e => e.TdJul)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_jul");
            entity.Property(e => e.TdJun)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_jun");
            entity.Property(e => e.TdMai)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_mai");
            entity.Property(e => e.TdMar)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_mar");
            entity.Property(e => e.TdNov)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_nov");
            entity.Property(e => e.TdOct)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_oct");
            entity.Property(e => e.TdSep)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_sep");
            entity.Property(e => e.TdTaId).HasColumnName("td_ta_id");
            entity.Property(e => e.TdThpsId).HasColumnName("td_thps_id");
            entity.Property(e => e.TdTotal)
                .HasComputedColumnSql("((((((((((([td_jan]+[td_feb])+[td_mar])+[td_apr])+[td_mai])+[td_jun])+[td_jul])+[td_aug])+[td_sep])+[td_oct])+[td_nov])+[td_dec])", false)
                .HasColumnType("numeric(27, 5)")
                .HasColumnName("td_total");
            entity.Property(e => e.TdUsId).HasColumnName("td_us_id");

            entity.HasOne(d => d.TdCdIdIgpNavigation).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdCdIdIgp)
                .HasConstraintName("FK_TA_REF_CD_IGP");

            entity.HasOne(d => d.TdGl).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdGlId)
                .HasConstraintName("FK_TA_REF_GL");

            entity.HasOne(d => d.TdIt).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdItId)
                .HasConstraintName("FK_TA_REF_IT");

            entity.HasOne(d => d.TdTa).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdTaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TD_REF_TA");

            entity.HasOne(d => d.TdThps).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdThpsId)
                .HasConstraintName("FK_TA_REF_THPS");

            entity.HasOne(d => d.TdUs).WithMany(p => p.TargetDetails)
                .HasForeignKey(d => d.TdUsId)
                .HasConstraintName("FK_TA_REF_US");
        });

        modelBuilder.Entity<TargetDetailspvt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TARGET_DETAILSPVT", "syn");

            entity.Property(e => e.Columnname)
                .HasMaxLength(128)
                .HasColumnName("columnname");
            entity.Property(e => e.Columnvalue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("columnvalue");
            entity.Property(e => e.Monthnum).HasColumnName("monthnum");
            entity.Property(e => e.TdId).HasColumnName("td_id");
            entity.Property(e => e.TdSource).HasColumnName("td_source");
            entity.Property(e => e.TdSourceId).HasColumnName("td_source_id");
            entity.Property(e => e.TdTaId).HasColumnName("td_ta_id");
        });

        modelBuilder.Entity<TargetDetailspvtRepV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TARGET_DETAILSPVT_REP_V", "sls");

            entity.Property(e => e.Columnname)
                .HasMaxLength(128)
                .HasColumnName("columnname");
            entity.Property(e => e.Columnvalue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("columnvalue");
            entity.Property(e => e.Monthnum).HasColumnName("monthnum");
            entity.Property(e => e.TdId).HasColumnName("td_id");
            entity.Property(e => e.TdSource).HasColumnName("td_source");
            entity.Property(e => e.TdSourceId).HasColumnName("td_source_id");
            entity.Property(e => e.TdTaId).HasColumnName("td_ta_id");
        });

        modelBuilder.Entity<TargetDetailspvtYmvV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TARGET_DETAILSPVT_YMV_V", "syn");

            entity.Property(e => e.TaId).HasColumnName("ta_id");
            entity.Property(e => e.TdId).HasColumnName("td_id");
            entity.Property(e => e.TdSource).HasColumnName("td_source");
            entity.Property(e => e.TdSourceId).HasColumnName("td_source_id");
            entity.Property(e => e.TdValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_value");
            entity.Property(e => e.TdYyyy).HasColumnName("td_yyyy");
            entity.Property(e => e.TdYyyymm).HasColumnName("td_yyyymm");
        });

        modelBuilder.Entity<Models.Task>(entity =>
        {
            entity.HasKey(e => e.TkId).HasFillFactor(90);

            entity.ToTable("TASK", "cmn");

            entity.Property(e => e.TkId).HasColumnName("tk_id");
            entity.Property(e => e.TkActive).HasColumnName("tk_active");
            entity.Property(e => e.TkApplyToAll).HasColumnName("tk_apply_to_all");
            entity.Property(e => e.TkBuId).HasColumnName("tk_bu_id");
            entity.Property(e => e.TkCdIdMod).HasColumnName("tk_cd_id_mod");
            entity.Property(e => e.TkCdIdPri)
                .HasMaxLength(50)
                .HasColumnName("tk_cd_id_pri");
            entity.Property(e => e.TkCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("tk_create_date");
            entity.Property(e => e.TkDate)
                .HasColumnType("datetime")
                .HasColumnName("tk_date");
            entity.Property(e => e.TkDescription)
                .HasMaxLength(4000)
                .HasColumnName("tk_description");
            entity.Property(e => e.TkDueDate)
                .HasColumnType("datetime")
                .HasColumnName("tk_due_date");
            entity.Property(e => e.TkOrder).HasColumnName("tk_order");
            entity.Property(e => e.TkSubject)
                .HasMaxLength(128)
                .HasColumnName("tk_subject");
            entity.Property(e => e.TkUsIdCr).HasColumnName("tk_us_id_cr");

            entity.HasOne(d => d.TkBu).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.TkBuId)
                .HasConstraintName("FK_TASK_REFERENCE_BUSINESS");

            entity.HasOne(d => d.TkCdIdModNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.TkCdIdMod)
                .HasConstraintName("FK_TASK_REFERENCE_CODESC");
        });

        modelBuilder.Entity<TaskDetail>(entity =>
        {
            entity.HasKey(e => e.TkdId).HasFillFactor(90);

            entity.ToTable("TASK_DETAIL", "cmn");

            entity.Property(e => e.TkdId).HasColumnName("tkd_id");
            entity.Property(e => e.TkdCompleted).HasColumnName("tkd_completed");
            entity.Property(e => e.TkdCompletedDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("tkd_completed_date");
            entity.Property(e => e.TkdRead).HasColumnName("tkd_read");
            entity.Property(e => e.TkdReadDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("tkd_read_date");
            entity.Property(e => e.TkdTkId).HasColumnName("tkd_tk_id");
            entity.Property(e => e.TkdUsId).HasColumnName("tkd_us_id");

            entity.HasOne(d => d.TkdTk).WithMany(p => p.TaskDetails)
                .HasForeignKey(d => d.TkdTkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TASK_DET_REFERENCE_TASK");

            entity.HasOne(d => d.TkdUs).WithMany(p => p.TaskDetails)
                .HasForeignKey(d => d.TkdUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TASK_DET_REFERENCE_USER");
        });

        modelBuilder.Entity<TaskMessageSnc>(entity =>
        {
            entity.HasKey(e => new { e.STmId, e.STmVersion }).HasFillFactor(90);

            entity.ToTable("TASK_MESSAGE_SNC", "syn");

            entity.Property(e => e.STmId).HasColumnName("s_tm_id");
            entity.Property(e => e.STmVersion)
                .HasMaxLength(25)
                .HasColumnName("s_tm_version");
            entity.Property(e => e.STmDate)
                .HasColumnType("datetime")
                .HasColumnName("s_tm_date");
            entity.Property(e => e.STmDescription)
                .HasMaxLength(4000)
                .HasColumnName("s_tm_description");
            entity.Property(e => e.STmFlag).HasColumnName("s_tm_flag");
            entity.Property(e => e.STmOrder).HasColumnName("s_tm_order");
            entity.Property(e => e.STmSmId).HasColumnName("s_tm_sm_id");
            entity.Property(e => e.STmSynched).HasColumnName("s_tm_synched");
        });

        modelBuilder.Entity<Tax>(entity =>
        {
            entity.HasKey(e => e.TaxId).HasFillFactor(90);

            entity.ToTable("TAX", "sls");

            entity.HasIndex(e => e.TaxCode, "tax_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TaxId).HasColumnName("tax_id");
            entity.Property(e => e.TaxAmountPercentage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("P")
                .IsFixedLength()
                .HasColumnName("tax_amount_percentage");
            entity.Property(e => e.TaxApplyOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("tax_apply_order");
            entity.Property(e => e.TaxCdIdTaxt).HasColumnName("tax_cd_id_taxt");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tax_description_lan1");
            entity.Property(e => e.TaxDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tax_description_lan2");
            entity.Property(e => e.TaxDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("tax_description_lan3");
            entity.Property(e => e.TaxFormula)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("tax_formula");
            entity.Property(e => e.TaxIsOnItemLevel)
                .HasDefaultValue((short)1)
                .HasColumnName("tax_is_on_item_level");
            entity.Property(e => e.TaxMobileFormula)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("tax_mobile_formula");
            entity.Property(e => e.TaxRate)
                .HasColumnType("numeric(10, 5)")
                .HasColumnName("tax_rate");

            entity.HasOne(d => d.TaxCdIdTaxtNavigation).WithMany(p => p.Taxes)
                .HasForeignKey(d => d.TaxCdIdTaxt)
                .HasConstraintName("FK_TAX_REF_CD_TAXT");
        });

        modelBuilder.Entity<TblItemcategoryCommonTree>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TBL_ITEMCATEGORY_COMMON_TREE", "cmn");

            entity.Property(e => e.NodeDescription)
                .HasMaxLength(255)
                .HasColumnName("node_description");
            entity.Property(e => e.NodeHasChild).HasColumnName("node_has_child");
            entity.Property(e => e.NodeHierarchy)
                .HasMaxLength(1002)
                .HasColumnName("node_hierarchy");
            entity.Property(e => e.NodeId).HasColumnName("node_id");
            entity.Property(e => e.NodeParentId).HasColumnName("node_parent_id");
            entity.Property(e => e.TreeType)
                .HasMaxLength(100)
                .HasColumnName("tree_type");
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasKey(e => e.TmplId).HasFillFactor(90);

            entity.ToTable("TEMPLATE", "cmn");

            entity.Property(e => e.TmplId).HasColumnName("tmpl_id");
            entity.Property(e => e.TmplActive)
                .HasDefaultValue((short)1)
                .HasColumnName("tmpl_active");
            entity.Property(e => e.TmplAllCustomers)
                .HasDefaultValue((short)0)
                .HasColumnName("tmpl_all_customers");
            entity.Property(e => e.TmplAllUsers)
                .HasDefaultValue((short)0)
                .HasColumnName("tmpl_all_users");
            entity.Property(e => e.TmplCdIdTmplt).HasColumnName("tmpl_cd_id_tmplt");
            entity.Property(e => e.TmplCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tmpl_code");
            entity.Property(e => e.TmplCreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tmpl_creation_date");
            entity.Property(e => e.TmplDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("tmpl_description_lan1");
            entity.Property(e => e.TmplDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("tmpl_description_lan2");
            entity.Property(e => e.TmplDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("tmpl_description_lan3");
            entity.Property(e => e.TmplFromDate)
                .HasColumnType("datetime")
                .HasColumnName("tmpl_from_date");
            entity.Property(e => e.TmplToDate)
                .HasColumnType("datetime")
                .HasColumnName("tmpl_to_date");
            entity.Property(e => e.TmplUsIdCr).HasColumnName("tmpl_us_id_cr");

            entity.HasOne(d => d.TmplCdIdTmpltNavigation).WithMany(p => p.Templates)
                .HasForeignKey(d => d.TmplCdIdTmplt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPL_REF_CD_ID_TMPLT");

            entity.HasOne(d => d.TmplUsIdCrNavigation).WithMany(p => p.Templates)
                .HasForeignKey(d => d.TmplUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPL_REF_US");
        });

        modelBuilder.Entity<TemplateItem>(entity =>
        {
            entity.HasKey(e => e.TmpliId).HasFillFactor(90);

            entity.ToTable("TEMPLATE_ITEM", "cmn");

            entity.Property(e => e.TmpliId).HasColumnName("tmpli_id");
            entity.Property(e => e.TmpliItId).HasColumnName("tmpli_it_id");
            entity.Property(e => e.TmpliQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tmpli_quantity");
            entity.Property(e => e.TmpliTmplId).HasColumnName("tmpli_tmpl_id");
            entity.Property(e => e.TmpliUomId).HasColumnName("tmpli_uom_id");

            entity.HasOne(d => d.TmpliIt).WithMany(p => p.TemplateItems)
                .HasForeignKey(d => d.TmpliItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPLI_REF_IT");

            entity.HasOne(d => d.TmpliTmpl).WithMany(p => p.TemplateItems)
                .HasForeignKey(d => d.TmpliTmplId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPLI_REF_TMPL");

            entity.HasOne(d => d.TmpliUom).WithMany(p => p.TemplateItems)
                .HasForeignKey(d => d.TmpliUomId)
                .HasConstraintName("FK_TMPLI_REF_UOM");
        });

        modelBuilder.Entity<TemplateThp>(entity =>
        {
            entity.HasKey(e => e.TmpltId).HasFillFactor(90);

            entity.ToTable("TEMPLATE_THPS", "cmn");

            entity.Property(e => e.TmpltId).HasColumnName("tmplt_id");
            entity.Property(e => e.TmpltThcfId).HasColumnName("tmplt_thcf_id");
            entity.Property(e => e.TmpltThcfvId).HasColumnName("tmplt_thcfv_id");
            entity.Property(e => e.TmpltThpsId).HasColumnName("tmplt_thps_id");
            entity.Property(e => e.TmpltTmplId).HasColumnName("tmplt_tmpl_id");

            entity.HasOne(d => d.TmpltThps).WithMany(p => p.TemplateThps)
                .HasForeignKey(d => d.TmpltThpsId)
                .HasConstraintName("FK_TMPLT_REF_THPS");

            entity.HasOne(d => d.TmpltTmpl).WithMany(p => p.TemplateThps)
                .HasForeignKey(d => d.TmpltTmplId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPLT_REF_TMPL");
        });

        modelBuilder.Entity<TemplateUser>(entity =>
        {
            entity.HasKey(e => e.TmpluId).HasFillFactor(90);

            entity.ToTable("TEMPLATE_USERS", "cmn");

            entity.Property(e => e.TmpluId).HasColumnName("tmplu_id");
            entity.Property(e => e.TmpluTmplId).HasColumnName("tmplu_tmpl_id");
            entity.Property(e => e.TmpluUsId).HasColumnName("tmplu_us_id");

            entity.HasOne(d => d.TmpluTmpl).WithMany(p => p.TemplateUsers)
                .HasForeignKey(d => d.TmpluTmplId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPLU_REF_TMPL");

            entity.HasOne(d => d.TmpluUs).WithMany(p => p.TemplateUsers)
                .HasForeignKey(d => d.TmpluUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMPLU_REF_US");
        });

        modelBuilder.Entity<Thirdparty>(entity =>
        {
            entity.HasKey(e => e.ThpId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY", "cmn");

            entity.HasIndex(e => e.ThpCode, "thp_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ThpIsCustomer, "thp_is_customer_idx").HasFillFactor(90);

            entity.Property(e => e.ThpId).HasColumnName("thp_id");
            entity.Property(e => e.ThpActive)
                .HasDefaultValue((short)1)
                .HasColumnName("thp_active");
            entity.Property(e => e.ThpCdIdTpg).HasColumnName("thp_cd_id_tpg");
            entity.Property(e => e.ThpCdIdTps).HasColumnName("thp_cd_id_tps");
            entity.Property(e => e.ThpCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thp_code");
            entity.Property(e => e.ThpCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("thp_create_date");
            entity.Property(e => e.ThpImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thp_imp_uid");
            entity.Property(e => e.ThpImported).HasColumnName("thp_imported");
            entity.Property(e => e.ThpIsB2b).HasColumnName("thp_isB2B");
            entity.Property(e => e.ThpIsCompany).HasColumnName("thp_is_company");
            entity.Property(e => e.ThpIsCustomer).HasColumnName("thp_is_customer");
            entity.Property(e => e.ThpIsSupplier).HasColumnName("thp_is_supplier");
            entity.Property(e => e.ThpModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("thp_modified_date");
            entity.Property(e => e.ThpNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thp_name_lan1");
            entity.Property(e => e.ThpNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thp_name_lan2");
            entity.Property(e => e.ThpNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thp_name_lan3");
            entity.Property(e => e.ThpNewcode)
                .HasMaxLength(32)
                .HasColumnName("thp_newcode");
            entity.Property(e => e.ThpOrgId).HasColumnName("thp_org_id");
            entity.Property(e => e.ThpPrintLang)
                .HasMaxLength(50)
                .HasColumnName("thp_print_lang");
            entity.Property(e => e.ThpPrintarabic).HasColumnName("thp_printarabic");
            entity.Property(e => e.ThpReadonly).HasColumnName("thp_readonly");
            entity.Property(e => e.ThpRemarks)
                .HasMaxLength(255)
                .HasColumnName("thp_remarks");
            entity.Property(e => e.ThpUsIdCreated).HasColumnName("thp_us_id_created");

            entity.HasOne(d => d.ThpCdIdTpgNavigation).WithMany(p => p.ThirdpartyThpCdIdTpgNavigations)
                .HasForeignKey(d => d.ThpCdIdTpg)
                .HasConstraintName("FK_THIRDPAR_REFERENCE_CODESC");

            entity.HasOne(d => d.ThpCdIdTpsNavigation).WithMany(p => p.ThirdpartyThpCdIdTpsNavigations)
                .HasForeignKey(d => d.ThpCdIdTps)
                .HasConstraintName("FK_THP_REF_CD_TPS");
        });

        modelBuilder.Entity<ThirdpartyAccountV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTY_ACCOUNT_V", "cmn");

            entity.Property(e => e.AccCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("acc_code");
            entity.Property(e => e.AccFamilyId).HasColumnName("acc_family_id");
            entity.Property(e => e.AccId).HasColumnName("acc_id");
            entity.Property(e => e.AccLan1)
                .HasMaxLength(255)
                .HasColumnName("acc_lan1");
            entity.Property(e => e.AccLan2)
                .HasMaxLength(255)
                .HasColumnName("acc_lan2");
            entity.Property(e => e.AccLan3)
                .HasMaxLength(255)
                .HasColumnName("acc_lan3");
        });

        modelBuilder.Entity<ThirdpartyAdditionalInfo>(entity =>
        {
            entity.HasKey(e => e.ThpiId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_ADDITIONAL_INFO", "cmn");

            entity.Property(e => e.ThpiId).HasColumnName("thpi_id");
            entity.Property(e => e.ThpiEmail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpi_email");
            entity.Property(e => e.ThpiFax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thpi_fax");
            entity.Property(e => e.ThpiGlId).HasColumnName("thpi_gl_id");
            entity.Property(e => e.ThpiLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpi_latitude");
            entity.Property(e => e.ThpiLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpi_longitude");
            entity.Property(e => e.ThpiMobile)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thpi_mobile");
            entity.Property(e => e.ThpiPhone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thpi_phone");
            entity.Property(e => e.ThpiRemarks)
                .HasMaxLength(255)
                .HasColumnName("thpi_remarks");
            entity.Property(e => e.ThpiThpId).HasColumnName("thpi_thp_id");
            entity.Property(e => e.ThpiWebsite)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpi_website");

            entity.HasOne(d => d.ThpiGl).WithMany(p => p.ThirdpartyAdditionalInfos)
                .HasForeignKey(d => d.ThpiGlId)
                .HasConstraintName("FK_THPI_REF_GL");

            entity.HasOne(d => d.ThpiThp).WithMany(p => p.ThirdpartyAdditionalInfos)
                .HasForeignKey(d => d.ThpiThpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPI_REF_THP");
        });

        modelBuilder.Entity<ThirdpartyBillShip>(entity =>
        {
            entity.HasKey(e => e.ThbsId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_BILL_SHIP", "cmn");

            entity.HasIndex(e => new { e.ThbsCdIdBst, e.ThbsThpsId, e.ThbsThpsIdBst }, "thbs_thp_id_billship_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThbsId).HasColumnName("thbs_id");
            entity.Property(e => e.ThbsCdIdBst).HasColumnName("thbs_cd_id_bst");
            entity.Property(e => e.ThbsThpsId).HasColumnName("thbs_thps_id");
            entity.Property(e => e.ThbsThpsIdBst).HasColumnName("thbs_thps_id_bst");

            entity.HasOne(d => d.ThbsCdIdBstNavigation).WithMany(p => p.ThirdpartyBillShips)
                .HasForeignKey(d => d.ThbsCdIdBst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THBS_REF_CD_BST");

            entity.HasOne(d => d.ThbsThps).WithMany(p => p.ThirdpartyBillShipThbsThps)
                .HasForeignKey(d => d.ThbsThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THBS_REF_THPS");

            entity.HasOne(d => d.ThbsThpsIdBstNavigation).WithMany(p => p.ThirdpartyBillShipThbsThpsIdBstNavigations)
                .HasForeignKey(d => d.ThbsThpsIdBst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THP_REF_THBS_BST");
        });

        modelBuilder.Entity<ThirdpartyClassificationV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTY_CLASSIFICATION_V", "cmn");

            entity.Property(e => e.ClsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cls_code");
            entity.Property(e => e.ClsFamilyId).HasColumnName("cls_family_id");
            entity.Property(e => e.ClsId).HasColumnName("cls_id");
            entity.Property(e => e.ClsLan1)
                .HasMaxLength(255)
                .HasColumnName("cls_lan1");
            entity.Property(e => e.ClsLan2)
                .HasMaxLength(255)
                .HasColumnName("cls_lan2");
            entity.Property(e => e.ClsLan3)
                .HasMaxLength(255)
                .HasColumnName("cls_lan3");
        });

        modelBuilder.Entity<ThirdpartyFinance>(entity =>
        {
            entity.HasKey(e => e.ThpfId)
                .HasName("PK_CUSTOMER_FINANCE")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTY_FINANCE", "sls");

            entity.HasIndex(e => new { e.ThpfThpsId, e.ThpfBuId }, "thpf_thps_thpf_bu_idx").HasFillFactor(90);

            entity.Property(e => e.ThpfId).HasColumnName("thpf_id");
            entity.Property(e => e.ThpfAccountNo)
                .HasMaxLength(32)
                .HasColumnName("thpf_account_no");
            entity.Property(e => e.ThpfActive)
                .HasDefaultValue((short)1)
                .HasColumnName("thpf_active");
            entity.Property(e => e.ThpfBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_balance");
            entity.Property(e => e.ThpfBuId).HasColumnName("thpf_bu_id");
            entity.Property(e => e.ThpfCdIdCur).HasColumnName("thpf_cd_id_cur");
            entity.Property(e => e.ThpfCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("thpf_create_date");
            entity.Property(e => e.ThpfCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_credit_limit");
            entity.Property(e => e.ThpfDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_discount");
            entity.Property(e => e.ThpfFreeVolume)
                .HasDefaultValue(0)
                .HasColumnName("thpf_free_volume");
            entity.Property(e => e.ThpfImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpf_imp_uid");
            entity.Property(e => e.ThpfLpId).HasColumnName("thpf_lp_id");
            entity.Property(e => e.ThpfModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("thpf_modified_date");
            entity.Property(e => e.ThpfOrgId).HasColumnName("thpf_org_id");
            entity.Property(e => e.ThpfTaxId).HasColumnName("thpf_tax_id");
            entity.Property(e => e.ThpfThpsId).HasColumnName("thpf_thps_id");

            entity.HasOne(d => d.ThpfBu).WithMany(p => p.ThirdpartyFinances)
                .HasForeignKey(d => d.ThpfBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPF_REF_BU");

            entity.HasOne(d => d.ThpfCdIdCurNavigation).WithMany(p => p.ThirdpartyFinances)
                .HasForeignKey(d => d.ThpfCdIdCur)
                .HasConstraintName("FK_THPF_REF_CD_CUR");

            entity.HasOne(d => d.ThpfLp).WithMany(p => p.ThirdpartyFinances)
                .HasForeignKey(d => d.ThpfLpId)
                .HasConstraintName("FK_THPF_REF_PL");

            entity.HasOne(d => d.ThpfThps).WithMany(p => p.ThirdpartyFinances)
                .HasForeignKey(d => d.ThpfThpsId)
                .HasConstraintName("FK_THPF_REF_THP");
        });

        modelBuilder.Entity<ThirdpartyGroupCategory>(entity =>
        {
            entity.HasKey(e => e.ThgcId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_GROUP_CATEGORY", "cmn");

            entity.HasIndex(e => new { e.ThgcThcfId, e.ThgcCdIdTpg }, "thgc_thcf_tpg_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThgcId).HasColumnName("thgc_id");
            entity.Property(e => e.ThgcActive)
                .HasDefaultValue((short)1)
                .HasColumnName("thgc_active");
            entity.Property(e => e.ThgcCdIdTpg).HasColumnName("thgc_cd_id_tpg");
            entity.Property(e => e.ThgcMandatory)
                .HasDefaultValue((short)-1)
                .HasColumnName("thgc_mandatory");
            entity.Property(e => e.ThgcThcfId).HasColumnName("thgc_thcf_id");

            entity.HasOne(d => d.ThgcCdIdTpgNavigation).WithMany(p => p.ThirdpartyGroupCategories)
                .HasForeignKey(d => d.ThgcCdIdTpg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THP_REF_CD_TPG");

            entity.HasOne(d => d.ThgcThcf).WithMany(p => p.ThirdpartyGroupCategories)
                .HasForeignKey(d => d.ThgcThcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THC_REF_THCF");
        });

        modelBuilder.Entity<ThirdpartyGroupV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTY_GROUP_V", "cmn");

            entity.Property(e => e.ThirdpartyGroupId).HasColumnName("thirdparty_group_id");
            entity.Property(e => e.ThirdpartyId).HasColumnName("thirdparty_id");
        });

        modelBuilder.Entity<ThirdpartyItem>(entity =>
        {
            entity.HasKey(e => e.ThpiId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_ITEM", "cmn");

            entity.HasIndex(e => e.ThpiCode, "thpi_code_idx").HasFillFactor(90);

            entity.HasIndex(e => e.ThpiItId, "thpi_thp_it_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThpiId).HasColumnName("thpi_id");
            entity.Property(e => e.ThpiCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thpi_code");
            entity.Property(e => e.ThpiDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thpi_description_lan1");
            entity.Property(e => e.ThpiDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("thpi_description_lan2");
            entity.Property(e => e.ThpiDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("thpi_description_lan3");
            entity.Property(e => e.ThpiItId).HasColumnName("thpi_it_id");
            entity.Property(e => e.ThpiThpsId).HasColumnName("thpi_thps_id");

            entity.HasOne(d => d.ThpiIt).WithOne(p => p.ThirdpartyItem)
                .HasForeignKey<ThirdpartyItem>(d => d.ThpiItId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPI_REF_IT");

            entity.HasOne(d => d.ThpiThps).WithMany(p => p.ThirdpartyItems)
                .HasForeignKey(d => d.ThpiThpsId)
                .HasConstraintName("FK_THPI_REF_THPS");
        });

        modelBuilder.Entity<ThirdpartyPaymentterm>(entity =>
        {
            entity.HasKey(e => e.ThptId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_PAYMENTTERM", "sls");

            entity.HasIndex(e => new { e.ThptPtId, e.ThptThpfId }, "thpt_pt_thpf_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThptId).HasColumnName("thpt_id");
            entity.Property(e => e.ThptPtId).HasColumnName("thpt_pt_id");
            entity.Property(e => e.ThptThpfId).HasColumnName("thpt_thpf_id");

            entity.HasOne(d => d.ThptPt).WithMany(p => p.ThirdpartyPaymentterms)
                .HasForeignKey(d => d.ThptPtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPT_REF_PT");

            entity.HasOne(d => d.ThptThpf).WithMany(p => p.ThirdpartyPaymentterms)
                .HasForeignKey(d => d.ThptThpfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPT_REF_THPF");
        });

        modelBuilder.Entity<ThirdpartyPaymethod>(entity =>
        {
            entity.HasKey(e => e.ThpmId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_PAYMETHOD", "sls");

            entity.HasIndex(e => new { e.ThpmThpfId, e.ThpmCdIdPam }, "thpm_thpf_pam_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThpmId).HasColumnName("thpm_id");
            entity.Property(e => e.ThpmCdIdPam).HasColumnName("thpm_cd_id_pam");
            entity.Property(e => e.ThpmThpfId).HasColumnName("thpm_thpf_id");

            entity.HasOne(d => d.ThpmCdIdPamNavigation).WithMany(p => p.ThirdpartyPaymethods)
                .HasForeignKey(d => d.ThpmCdIdPam)
                .HasConstraintName("FK_THPM_REF_CD_PAM");

            entity.HasOne(d => d.ThpmThpf).WithMany(p => p.ThirdpartyPaymethods)
                .HasForeignKey(d => d.ThpmThpfId)
                .HasConstraintName("FK_THPM_REF_THPF");
        });

        modelBuilder.Entity<ThirdpartySite>(entity =>
        {
            entity.HasKey(e => e.ThpsId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE", "cmn");

            entity.HasIndex(e => e.ThpsCode, "thps_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ThpsSiteId, "thps_site_id_idx").HasFillFactor(90);

            entity.HasIndex(e => e.ThpsThpId, "thps_thp_idx").HasFillFactor(90);

            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsActive)
                .HasDefaultValue((short)1)
                .HasColumnName("thps_active");
            entity.Property(e => e.ThpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("thps_address1");
            entity.Property(e => e.ThpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("thps_address2");
            entity.Property(e => e.ThpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("thps_address3");
            entity.Property(e => e.ThpsBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_barcode");
            entity.Property(e => e.ThpsCdIdBst).HasColumnName("thps_cd_id_bst");
            entity.Property(e => e.ThpsCdIdTpg).HasColumnName("thps_cd_id_tpg");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan1");
            entity.Property(e => e.ThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan2");
            entity.Property(e => e.ThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan3");
            entity.Property(e => e.ThpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("thps_create_date");
            entity.Property(e => e.ThpsEmail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_email");
            entity.Property(e => e.ThpsFax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_fax");
            entity.Property(e => e.ThpsGlId).HasColumnName("thps_gl_id");
            entity.Property(e => e.ThpsImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_imp_uid");
            entity.Property(e => e.ThpsLangPrint)
                .HasMaxLength(32)
                .HasColumnName("thps_lang_print");
            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsMobile)
                .HasMaxLength(256)
                .HasColumnName("thps_mobile");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.ThpsNewcode)
                .HasMaxLength(32)
                .HasColumnName("thps_newcode");
            entity.Property(e => e.ThpsOrgId).HasColumnName("thps_org_id");
            entity.Property(e => e.ThpsPhone)
                .HasMaxLength(256)
                .HasColumnName("thps_phone");
            entity.Property(e => e.ThpsRemarks)
                .HasMaxLength(255)
                .HasColumnName("thps_remarks");
            entity.Property(e => e.ThpsSiteId)
                .HasMaxLength(256)
                .HasColumnName("thps_site_id");
            entity.Property(e => e.ThpsThpId).HasColumnName("thps_thp_id");
            entity.Property(e => e.ThpsUsIdCreated).HasColumnName("thps_us_id_created");
            entity.Property(e => e.ThpsWebsite)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_website");

            entity.HasOne(d => d.ThpsCdIdBstNavigation).WithMany(p => p.ThirdpartySites)
                .HasForeignKey(d => d.ThpsCdIdBst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPS_REF_CD_BST");

            entity.HasOne(d => d.ThpsGl).WithMany(p => p.ThirdpartySites)
                .HasForeignKey(d => d.ThpsGlId)
                .HasConstraintName("FK_THPS_REF_GL");

            entity.HasOne(d => d.ThpsThp).WithMany(p => p.ThirdpartySites)
                .HasForeignKey(d => d.ThpsThpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPS_REF_THP");
        });

        modelBuilder.Entity<ThirdpartySiteAdditionnalinfoKfm>(entity =>
        {
            entity.HasKey(e => e.ThpsaiId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_ADDITIONNALINFO_KFM", "cmn");

            entity.Property(e => e.ThpsaiId).HasColumnName("thpsai_id");
            entity.Property(e => e.ThpsaiPartyId)
                .HasMaxLength(64)
                .HasColumnName("thpsai_party_id");
            entity.Property(e => e.ThpsaiPartyNumber)
                .HasMaxLength(64)
                .HasColumnName("thpsai_party_number");
            entity.Property(e => e.ThpsaiPartySiteId)
                .HasMaxLength(64)
                .HasColumnName("thpsai_party_site_id");
            entity.Property(e => e.ThpsaiPartySiteNumber)
                .HasMaxLength(64)
                .HasColumnName("thpsai_party_site_number");
            entity.Property(e => e.ThpsaiThpsId).HasColumnName("thpsai_thps_id");
        });

        modelBuilder.Entity<ThirdpartySiteComment>(entity =>
        {
            entity.HasKey(e => e.ThpscId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_COMMENTS", "cmn");

            entity.HasIndex(e => e.ThpscThpsId, "idx_thpsc_thps_id").HasFillFactor(90);

            entity.HasIndex(e => e.ThpscUid, "idx_thpsc_uid")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThpscId).HasColumnName("thpsc_id");
            entity.Property(e => e.ThpscCdIdThpscList)
                .HasMaxLength(1000)
                .HasColumnName("thpsc_cd_id_thpsc_list");
            entity.Property(e => e.ThpscComments)
                .HasMaxLength(1000)
                .HasColumnName("thpsc_comments");
            entity.Property(e => e.ThpscCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("thpsc_creation_date");
            entity.Property(e => e.ThpscImgPath)
                .HasMaxLength(1000)
                .HasColumnName("thpsc_img_path");
            entity.Property(e => e.ThpscLatitude)
                .HasMaxLength(64)
                .HasColumnName("thpsc_latitude");
            entity.Property(e => e.ThpscLongitude)
                .HasMaxLength(64)
                .HasColumnName("thpsc_longitude");
            entity.Property(e => e.ThpscThpsId).HasColumnName("thpsc_thps_id");
            entity.Property(e => e.ThpscUid)
                .HasMaxLength(256)
                .HasColumnName("thpsc_uid");
            entity.Property(e => e.ThpscUsId).HasColumnName("thpsc_us_id");
        });

        modelBuilder.Entity<ThirdpartySiteListpriceRoute>(entity =>
        {
            entity.HasKey(e => e.TslrId).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_LISTPRICE_ROUTE", "sls");

            entity.Property(e => e.TslrId).HasColumnName("tslr_id");
            entity.Property(e => e.TslrLpId).HasColumnName("tslr_lp_id");
            entity.Property(e => e.TslrPlId).HasColumnName("tslr_pl_id");
            entity.Property(e => e.TslrRoute)
                .HasMaxLength(50)
                .HasColumnName("tslr_route");
            entity.Property(e => e.TslrThpfId).HasColumnName("tslr_thpf_id");

            entity.HasOne(d => d.TslrLp).WithMany(p => p.ThirdpartySiteListpriceRoutes)
                .HasForeignKey(d => d.TslrLpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tslr_lp_id");

            entity.HasOne(d => d.TslrPl).WithMany(p => p.ThirdpartySiteListpriceRoutes)
                .HasForeignKey(d => d.TslrPlId)
                .HasConstraintName("FK_tslr_pl_id");

            entity.HasOne(d => d.TslrThpf).WithMany(p => p.ThirdpartySiteListpriceRoutes)
                .HasForeignKey(d => d.TslrThpfId)
                .HasConstraintName("FK_tslr_thpf_id");
        });

        modelBuilder.Entity<ThirdpartySiteOrdering>(entity =>
        {
            entity.HasKey(e => e.ThpsoId)
                .HasName("PK_Thirdparty_Site_Ordering")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_ORDERING", "cmn");

            entity.Property(e => e.ThpsoId).HasColumnName("thpso_id");
            entity.Property(e => e.ThpsoCdIdMdtp).HasColumnName("thpso_cd_id_mdtp");
            entity.Property(e => e.ThpsoOrder)
                .HasMaxLength(50)
                .HasColumnName("thpso_order");
            entity.Property(e => e.ThpsoThpsId).HasColumnName("thpso_thps_id");

            entity.HasOne(d => d.ThpsoThps).WithMany(p => p.ThirdpartySiteOrderings)
                .HasForeignKey(d => d.ThpsoThpsId)
                .HasConstraintName("FK_TSIO_REF_THPS_ID");
        });

        modelBuilder.Entity<ThirdpartySiteVisitSchedule>(entity =>
        {
            entity.HasKey(e => e.ThpsvsId)
                .HasName("PK_THIRDPARTY_SITE_VISIT_SCHED")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_VISIT_SCHEDULE", "cmn");

            entity.Property(e => e.ThpsvsId).HasColumnName("thpsvs_id");
            entity.Property(e => e.ThpsvsCdIdTms).HasColumnName("thpsvs_cd_id_tms");
            entity.Property(e => e.ThpsvsCdIdTmsd).HasColumnName("thpsvs_cd_id_tmsd");
            entity.Property(e => e.ThpsvsComments)
                .HasMaxLength(1000)
                .HasColumnName("thpsvs_comments");
            entity.Property(e => e.ThpsvsCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("thpsvs_creation_date");
            entity.Property(e => e.ThpsvsThpsId).HasColumnName("thpsvs_thps_id");
            entity.Property(e => e.ThpsvsUsIdCr).HasColumnName("thpsvs_us_id_cr");

            entity.HasOne(d => d.ThpsvsCdIdTmsNavigation).WithMany(p => p.ThirdpartySiteVisitScheduleThpsvsCdIdTmsNavigations)
                .HasForeignKey(d => d.ThpsvsCdIdTms)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSVS_REF_CDTMS");

            entity.HasOne(d => d.ThpsvsCdIdTmsdNavigation).WithMany(p => p.ThirdpartySiteVisitScheduleThpsvsCdIdTmsdNavigations)
                .HasForeignKey(d => d.ThpsvsCdIdTmsd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSVS_REF_CDTMSD");

            entity.HasOne(d => d.ThpsvsThps).WithMany(p => p.ThirdpartySiteVisitSchedules)
                .HasForeignKey(d => d.ThpsvsThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSVS_REF_THPS");

            entity.HasOne(d => d.ThpsvsUsIdCrNavigation).WithMany(p => p.ThirdpartySiteVisitSchedules)
                .HasForeignKey(d => d.ThpsvsUsIdCr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSVS_REF_US");
        });

        modelBuilder.Entity<ThirdpartySiteVisitScheduleSnc>(entity =>
        {
            entity.HasKey(e => new { e.SThpsvsId, e.SThpsvsSmId, e.SThpsvsVersion }).HasFillFactor(90);

            entity.ToTable("THIRDPARTY_SITE_VISIT_SCHEDULE_SNC", "syn");

            entity.Property(e => e.SThpsvsId).HasColumnName("s_thpsvs_id");
            entity.Property(e => e.SThpsvsSmId).HasColumnName("s_thpsvs_sm_id");
            entity.Property(e => e.SThpsvsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_thpsvs_version");
            entity.Property(e => e.SThpsvsCdIdTms).HasColumnName("s_thpsvs_cd_id_tms");
            entity.Property(e => e.SThpsvsCdIdTmsd).HasColumnName("s_thpsvs_cd_id_tmsd");
            entity.Property(e => e.SThpsvsComments)
                .HasMaxLength(1000)
                .HasColumnName("s_thpsvs_comments");
            entity.Property(e => e.SThpsvsCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_thpsvs_creation_date");
            entity.Property(e => e.SThpsvsThpsUid)
                .HasMaxLength(128)
                .HasColumnName("s_thpsvs_thps_uid");
            entity.Property(e => e.SThpsvsUsIdCr).HasColumnName("s_thpsvs_us_id_cr");
        });

        modelBuilder.Entity<ThirdpartySpecialtiesV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTY_SPECIALTIES_V", "cmn");

            entity.Property(e => e.SpcCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("spc_code");
            entity.Property(e => e.SpcFamilyId).HasColumnName("spc_family_id");
            entity.Property(e => e.SpcId).HasColumnName("spc_id");
            entity.Property(e => e.SpcLan1)
                .HasMaxLength(255)
                .HasColumnName("spc_lan1");
            entity.Property(e => e.SpcLan2)
                .HasMaxLength(255)
                .HasColumnName("spc_lan2");
            entity.Property(e => e.SpcLan3)
                .HasMaxLength(255)
                .HasColumnName("spc_lan3");
        });

        modelBuilder.Entity<ThirdpartycategoryFamily>(entity =>
        {
            entity.HasKey(e => e.ThcfId)
                .HasName("PK_THIRDPARTY_CATEGORY_FAMILY")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTYCATEGORY_FAMILY", "cmn");

            entity.HasIndex(e => new { e.ThcfCode, e.ThcfBuId }, "thcf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ThcfThcfId, "thcf_thcf_idx").HasFillFactor(90);

            entity.Property(e => e.ThcfId).HasColumnName("thcf_id");
            entity.Property(e => e.ThcfBuId).HasColumnName("thcf_bu_id");
            entity.Property(e => e.ThcfCalculated)
                .HasDefaultValue((short)-1)
                .HasColumnName("thcf_calculated");
            entity.Property(e => e.ThcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcf_code");
            entity.Property(e => e.ThcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan1");
            entity.Property(e => e.ThcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan2");
            entity.Property(e => e.ThcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan3");
            entity.Property(e => e.ThcfLevel).HasColumnName("thcf_level");
            entity.Property(e => e.ThcfThcfId).HasColumnName("thcf_thcf_id");
        });

        modelBuilder.Entity<ThirdpartycategoryFamilyValue>(entity =>
        {
            entity.HasKey(e => e.ThcfvId)
                .HasName("PK_THIRDPARTY_CATEGORY_FAMILY_")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTYCATEGORY_FAMILY_VALUES", "cmn");

            entity.HasIndex(e => new { e.ThcfvThcfId, e.ThcfvCode }, "thcv_thcf_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThcfvId).HasColumnName("thcfv_id");
            entity.Property(e => e.ThcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_code");
            entity.Property(e => e.ThcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan1");
            entity.Property(e => e.ThcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan2");
            entity.Property(e => e.ThcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan3");
            entity.Property(e => e.ThcfvThcfId).HasColumnName("thcfv_thcf_id");

            entity.HasOne(d => d.ThcfvThcf).WithMany(p => p.ThirdpartycategoryFamilyValues)
                .HasForeignKey(d => d.ThcfvThcfId)
                .HasConstraintName("FK_THCFV_REF_THCF");
        });

        modelBuilder.Entity<ThirdpartycategoryFamilyValuesVActivityGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_FAMILY_VALUES_V_ACTIVITY_GROUP", "dex");

            entity.Property(e => e.IThcfId).HasColumnName("i_thcf_id");
            entity.Property(e => e.IThcfvCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_code");
            entity.Property(e => e.IThcfvDescriptionLan1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan1");
            entity.Property(e => e.IThcfvDescriptionLan2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan2");
            entity.Property(e => e.IThcfvDescriptionLan3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan3");
            entity.Property(e => e.IThcfvThcfId).HasColumnName("i_thcfv_thcf_id");
        });

        modelBuilder.Entity<ThirdpartycategoryFamilyValuesVGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_FAMILY_VALUES_V_GROUP", "dex");

            entity.Property(e => e.IThcfId).HasColumnName("i_thcf_id");
            entity.Property(e => e.IThcfvCode)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_thcfv_code");
            entity.Property(e => e.IThcfvDescriptionLan1)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_thcfv_description_lan1");
            entity.Property(e => e.IThcfvDescriptionLan2)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_thcfv_description_lan2");
            entity.Property(e => e.IThcfvDescriptionLan3)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("i_thcfv_description_lan3");
            entity.Property(e => e.IThcfvThcfId).HasColumnName("i_thcfv_thcf_id");
        });

        modelBuilder.Entity<ThirdpartycategoryFamilyValuesVLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_FAMILY_VALUES_V_LINE", "dex");

            entity.Property(e => e.IThcfId).HasColumnName("i_thcf_id");
            entity.Property(e => e.IThcfvCode)
                .HasMaxLength(30)
                .HasColumnName("i_thcfv_code");
            entity.Property(e => e.IThcfvDescriptionLan1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan1");
            entity.Property(e => e.IThcfvDescriptionLan2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan2");
            entity.Property(e => e.IThcfvDescriptionLan3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("i_thcfv_description_lan3");
            entity.Property(e => e.IThcfvThcfId).HasColumnName("i_thcfv_thcf_id");
        });

        modelBuilder.Entity<ThirdpartycategoryValue>(entity =>
        {
            entity.HasKey(e => e.ThcvId)
                .HasName("PK_THIRDPARTY_CATEGORY_VALUE")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTYCATEGORY_VALUE", "cmn");

            entity.HasIndex(e => e.ThcvThcfvId, "NonClusteredIndex-20180910-150325").HasFillFactor(90);

            entity.HasIndex(e => e.ThcvThpId, "NonClusteredIndex-thpcv_thp_id").HasFillFactor(90);

            entity.HasIndex(e => new { e.ThcvThpId, e.ThcvThcfvId }, "icv_it_icfv_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThcvId).HasColumnName("thcv_id");
            entity.Property(e => e.ThcvThcfId).HasColumnName("thcv_thcf_id");
            entity.Property(e => e.ThcvThcfvId).HasColumnName("thcv_thcfv_id");
            entity.Property(e => e.ThcvThpId).HasColumnName("thcv_thp_id");

            entity.HasOne(d => d.ThcvThcf).WithMany(p => p.ThirdpartycategoryValues)
                .HasForeignKey(d => d.ThcvThcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THCV_REF_THCF");

            entity.HasOne(d => d.ThcvThcfv).WithMany(p => p.ThirdpartycategoryValues)
                .HasForeignKey(d => d.ThcvThcfvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THCV_REF_THCFV");

            entity.HasOne(d => d.ThcvThp).WithMany(p => p.ThirdpartycategoryValues)
                .HasForeignKey(d => d.ThcvThpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THCV_REF_THP");
        });

        modelBuilder.Entity<ThirdpartycategoryValueCustomerActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_VALUE_CUSTOMER_ACTIVITY", "dex");

            entity.Property(e => e.IThcvThcfId).HasColumnName("i_thcv_thcf_id");
            entity.Property(e => e.IThcvThcfvId).HasColumnName("i_thcv_thcfv_id");
            entity.Property(e => e.IThcvThpId).HasColumnName("i_thcv_thp_id");
        });

        modelBuilder.Entity<ThirdpartycategoryValueCustomerActivityGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_VALUE_CUSTOMER_ACTIVITY_GROUP", "dex");

            entity.Property(e => e.IThcvThcfId).HasColumnName("i_thcv_thcf_id");
            entity.Property(e => e.IThcvThcfvId).HasColumnName("i_thcv_thcfv_id");
            entity.Property(e => e.IThcvThpId).HasColumnName("i_thcv_thp_id");
        });

        modelBuilder.Entity<ThirdpartycategoryValueCustomerGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_VALUE_CUSTOMER_GROUP", "dex");

            entity.Property(e => e.IThcvThcfId).HasColumnName("i_thcv_thcf_id");
            entity.Property(e => e.IThcvThcfvId).HasColumnName("i_thcv_thcfv_id");
            entity.Property(e => e.IThcvThpId).HasColumnName("i_thcv_thp_id");
        });

        modelBuilder.Entity<ThirdpartycategoryValueCustomerLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("THIRDPARTYCATEGORY_VALUE_CUSTOMER_LINE", "dex");

            entity.Property(e => e.IThcvThcfId).HasColumnName("i_thcv_thcf_id");
            entity.Property(e => e.IThcvThcfvId).HasColumnName("i_thcv_thcfv_id");
            entity.Property(e => e.IThcvThpId).HasColumnName("i_thcv_thp_id");
        });

        modelBuilder.Entity<ThirdpartysitecategoryValue>(entity =>
        {
            entity.HasKey(e => e.ThpscvId)
                .HasName("PK_THIRDPARTYSITE_CATEGORY_VALUE")
                .HasFillFactor(90);

            entity.ToTable("THIRDPARTYSITECATEGORY_VALUE", "cmn");

            entity.HasIndex(e => e.ThpscvThcfvId, "NonClusteredIndex-20180910-150357").HasFillFactor(90);

            entity.HasIndex(e => new { e.ThpscvThpsId, e.ThpscvThcfId }, "thpscv_thps_thcf_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThpscvId).HasColumnName("thpscv_id");
            entity.Property(e => e.ThpscvThcfId).HasColumnName("thpscv_thcf_id");
            entity.Property(e => e.ThpscvThcfvId).HasColumnName("thpscv_thcfv_id");
            entity.Property(e => e.ThpscvThpsId).HasColumnName("thpscv_thps_id");

            entity.HasOne(d => d.ThpscvThcf).WithMany(p => p.ThirdpartysitecategoryValues)
                .HasForeignKey(d => d.ThpscvThcfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSCV_REF_THCF");

            entity.HasOne(d => d.ThpscvThcfv).WithMany(p => p.ThirdpartysitecategoryValues)
                .HasForeignKey(d => d.ThpscvThcfvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSCV_REF_THCFV");

            entity.HasOne(d => d.ThpscvThps).WithMany(p => p.ThirdpartysitecategoryValues)
                .HasForeignKey(d => d.ThpscvThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPSCV_REF_THPS");
        });

        modelBuilder.Entity<ThirdpartysitefinanceTax>(entity =>
        {
            entity.HasKey(e => e.ThpfxId).HasFillFactor(90);

            entity.ToTable("THIRDPARTYSITEFINANCE_TAX", "sls");

            entity.HasIndex(e => new { e.ThpfxThpfId, e.ThpfxTaxId }, "thpfx_thpf_tax_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ThpfxId).HasColumnName("thpfx_id");
            entity.Property(e => e.ThpfxTaxId).HasColumnName("thpfx_tax_id");
            entity.Property(e => e.ThpfxThpfId).HasColumnName("thpfx_thpf_id");

            entity.HasOne(d => d.ThpfxTax).WithMany(p => p.ThirdpartysitefinanceTaxes)
                .HasForeignKey(d => d.ThpfxTaxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPFX_REF_TAX");

            entity.HasOne(d => d.ThpfxThpf).WithMany(p => p.ThirdpartysitefinanceTaxes)
                .HasForeignKey(d => d.ThpfxThpfId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_THPFX_REF_THPF");
        });

        modelBuilder.Entity<ThpTransactiontype>(entity =>
        {
            entity.HasKey(e => e.TttId).HasFillFactor(90);

            entity.ToTable("THP_TRANSACTIONTYPE", "sls");

            entity.HasIndex(e => new { e.TttThpId, e.TttThpsId, e.TttBuId, e.TttTstId }, "ttt_bu_thp_thps_tst_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TttId).HasColumnName("ttt_id");
            entity.Property(e => e.TttBuId).HasColumnName("ttt_bu_id");
            entity.Property(e => e.TttThpId).HasColumnName("ttt_thp_id");
            entity.Property(e => e.TttThpsId).HasColumnName("ttt_thps_id");
            entity.Property(e => e.TttTstId).HasColumnName("ttt_tst_id");

            entity.HasOne(d => d.TttBu).WithMany(p => p.ThpTransactiontypes)
                .HasForeignKey(d => d.TttBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTT_REF_BU");

            entity.HasOne(d => d.TttThp).WithMany(p => p.ThpTransactiontypes)
                .HasForeignKey(d => d.TttThpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTT_REF_THP");

            entity.HasOne(d => d.TttThps).WithMany(p => p.ThpTransactiontypes)
                .HasForeignKey(d => d.TttThpsId)
                .HasConstraintName("FK_TTT_REF_THPS");

            entity.HasOne(d => d.TttTst).WithMany(p => p.ThpTransactiontypes)
                .HasForeignKey(d => d.TttTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTT_REF_TST");
        });

        modelBuilder.Entity<ThpsInventory>(entity =>
        {
            entity.HasKey(e => e.ThpsiId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORY", "sls");

            entity.HasIndex(e => e.ThpsiCode, "thpsi_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ThpsiTihId, "thpsi_tih_idx").HasFillFactor(90);

            entity.Property(e => e.ThpsiId).HasColumnName("thpsi_id");
            entity.Property(e => e.ThpsiBuId).HasColumnName("thpsi_bu_id");
            entity.Property(e => e.ThpsiCdIdTivs).HasColumnName("thpsi_cd_id_tivs");
            entity.Property(e => e.ThpsiCode)
                .HasMaxLength(50)
                .HasColumnName("thpsi_code");
            entity.Property(e => e.ThpsiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("thpsi_create_date");
            entity.Property(e => e.ThpsiDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thpsi_description_lan1");
            entity.Property(e => e.ThpsiDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thpsi_description_lan2");
            entity.Property(e => e.ThpsiDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thpsi_description_lan3");
            entity.Property(e => e.ThpsiOrgId).HasColumnName("thpsi_org_id");
            entity.Property(e => e.ThpsiThpsId).HasColumnName("thpsi_thps_id");
            entity.Property(e => e.ThpsiTihId).HasColumnName("thpsi_tih_id");
            entity.Property(e => e.ThpsiUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("thpsi_uid");
            entity.Property(e => e.ThpsiVtId).HasColumnName("thpsi_vt_id");

            entity.HasOne(d => d.ThpsiBu).WithMany(p => p.ThpsInventories)
                .HasForeignKey(d => d.ThpsiBuId)
                .HasConstraintName("FK_THPSI_REF_BU");

            entity.HasOne(d => d.ThpsiCdIdTivsNavigation).WithMany(p => p.ThpsInventories)
                .HasForeignKey(d => d.ThpsiCdIdTivs)
                .HasConstraintName("FK_THPSI_REF_CD_TIVS");

            entity.HasOne(d => d.ThpsiThps).WithMany(p => p.ThpsInventories)
                .HasForeignKey(d => d.ThpsiThpsId)
                .HasConstraintName("FK_THPSI_REF_THPS");

            entity.HasOne(d => d.ThpsiTih).WithMany(p => p.ThpsInventories)
                .HasForeignKey(d => d.ThpsiTihId)
                .HasConstraintName("FK_THPSI_REF_TIH");

            entity.HasOne(d => d.ThpsiVt).WithMany(p => p.ThpsInventories)
                .HasForeignKey(d => d.ThpsiVtId)
                .HasConstraintName("FK_THPSI_REF_VT");
        });

        modelBuilder.Entity<ThpsInventoryDetail>(entity =>
        {
            entity.HasKey(e => e.ThpsidId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORY_DETAIL", "sls");

            entity.HasIndex(e => new { e.ThpsidThpsiId, e.ThpsidItId, e.ThpsidUomId, e.ThpsidIldId }, "thpsid_thpsi_it_uom_ild_id").HasFillFactor(90);

            entity.Property(e => e.ThpsidId).HasColumnName("thpsid_id");
            entity.Property(e => e.ThpsidIldId).HasColumnName("thpsid_ild_id");
            entity.Property(e => e.ThpsidItId).HasColumnName("thpsid_it_id");
            entity.Property(e => e.ThpsidQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpsid_quantity");
            entity.Property(e => e.ThpsidThpsiId).HasColumnName("thpsid_thpsi_id");
            entity.Property(e => e.ThpsidThpsiOrgId).HasColumnName("thpsid_thpsi_org_id");
            entity.Property(e => e.ThpsidUomId).HasColumnName("thpsid_uom_id");

            entity.HasOne(d => d.ThpsidIld).WithMany(p => p.ThpsInventoryDetails)
                .HasForeignKey(d => d.ThpsidIldId)
                .HasConstraintName("FK_THPSID_REF_ILD");

            entity.HasOne(d => d.ThpsidIt).WithMany(p => p.ThpsInventoryDetails)
                .HasForeignKey(d => d.ThpsidItId)
                .HasConstraintName("FK_THPSID_REF_IT");

            entity.HasOne(d => d.ThpsidUom).WithMany(p => p.ThpsInventoryDetails)
                .HasForeignKey(d => d.ThpsidUomId)
                .HasConstraintName("FK_THPSID_REF_UOM");
        });

        modelBuilder.Entity<ThpsInventoryHeader>(entity =>
        {
            entity.HasKey(e => e.TihId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORY_HEADER", "sls");

            entity.HasIndex(e => e.TihCode, "ivh_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TihId).HasColumnName("tih_id");
            entity.Property(e => e.TihActive)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_active");
            entity.Property(e => e.TihAllGeo)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_all_geo");
            entity.Property(e => e.TihAllItems)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_all_items");
            entity.Property(e => e.TihAllThps)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_all_thps");
            entity.Property(e => e.TihAllUser)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_all_user");
            entity.Property(e => e.TihBuId).HasColumnName("tih_bu_id");
            entity.Property(e => e.TihCdIdTivs).HasColumnName("tih_cd_id_tivs");
            entity.Property(e => e.TihCdIdTivt).HasColumnName("tih_cd_id_tivt");
            entity.Property(e => e.TihCode)
                .HasMaxLength(32)
                .HasColumnName("tih_code");
            entity.Property(e => e.TihCount)
                .HasDefaultValue((short)1)
                .HasColumnName("tih_count");
            entity.Property(e => e.TihCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tih_create_date");
            entity.Property(e => e.TihDateEnd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tih_date_end");
            entity.Property(e => e.TihDateStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tih_date_start");
            entity.Property(e => e.TihDescription)
                .HasMaxLength(32)
                .HasColumnName("tih_description");
            entity.Property(e => e.TihItemLotDate)
                .HasDefaultValue((short)-1)
                .HasColumnName("tih_item_lot_date");
            entity.Property(e => e.TihMandatory).HasColumnName("tih_mandatory");
            entity.Property(e => e.TihModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tih_modified_date");
            entity.Property(e => e.TihRemarks)
                .HasMaxLength(4000)
                .HasColumnName("tih_remarks");
            entity.Property(e => e.TihUsId).HasColumnName("tih_us_id");

            entity.HasOne(d => d.TihBu).WithMany(p => p.ThpsInventoryHeaders)
                .HasForeignKey(d => d.TihBuId)
                .HasConstraintName("FK_TIH_REF_BU");
        });

        modelBuilder.Entity<ThpsInventoryheaderGl>(entity =>
        {
            entity.HasKey(e => e.TihgId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYHEADER_GL", "sls");

            entity.HasIndex(e => new { e.TihgTihId, e.TihgGlId }, "tihg_tih_ge_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TihgId).HasColumnName("tihg_id");
            entity.Property(e => e.TihgGlId).HasColumnName("tihg_gl_id");
            entity.Property(e => e.TihgTihId).HasColumnName("tihg_tih_id");

            entity.HasOne(d => d.TihgGl).WithMany(p => p.ThpsInventoryheaderGls)
                .HasForeignKey(d => d.TihgGlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHG_REF_GL");

            entity.HasOne(d => d.TihgTih).WithMany(p => p.ThpsInventoryheaderGls)
                .HasForeignKey(d => d.TihgTihId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHG_REF_TIH");
        });

        modelBuilder.Entity<ThpsInventoryheaderItem>(entity =>
        {
            entity.HasKey(e => e.TihiId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYHEADER_ITEM", "sls");

            entity.Property(e => e.TihiId).HasColumnName("tihi_id");
            entity.Property(e => e.TihiIcfId).HasColumnName("tihi_icf_id");
            entity.Property(e => e.TihiIcfvId).HasColumnName("tihi_icfv_id");
            entity.Property(e => e.TihiTihId).HasColumnName("tihi_tih_id");
        });

        modelBuilder.Entity<ThpsInventoryheaderThp>(entity =>
        {
            entity.HasKey(e => e.TihtId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYHEADER_THPS", "sls");

            entity.HasIndex(e => new { e.TihtTihId, e.TihtThcfId, e.TihtThcfvId, e.TihtThpsId }, "tiht_thcf_v_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TihtId).HasColumnName("tiht_id");
            entity.Property(e => e.TihtThcfId).HasColumnName("tiht_thcf_id");
            entity.Property(e => e.TihtThcfvId).HasColumnName("tiht_thcfv_id");
            entity.Property(e => e.TihtThpsId).HasColumnName("tiht_thps_id");
            entity.Property(e => e.TihtTihId).HasColumnName("tiht_tih_id");

            entity.HasOne(d => d.TihtThps).WithMany(p => p.ThpsInventoryheaderThps)
                .HasForeignKey(d => d.TihtThpsId)
                .HasConstraintName("FK_TIHT_REF_THPS");

            entity.HasOne(d => d.TihtTih).WithMany(p => p.ThpsInventoryheaderThps)
                .HasForeignKey(d => d.TihtTihId)
                .HasConstraintName("FK_TIHT_REF_TIH");
        });

        modelBuilder.Entity<ThpsInventoryheaderUser>(entity =>
        {
            entity.HasKey(e => e.TihuId).HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYHEADER_USER", "sls");

            entity.HasIndex(e => new { e.TihuTihId, e.TihuUsId }, "tihu_tih_us_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TihuId).HasColumnName("tihu_id");
            entity.Property(e => e.TihuTihId).HasColumnName("tihu_tih_id");
            entity.Property(e => e.TihuUsId).HasColumnName("tihu_us_id");

            entity.HasOne(d => d.TihuTih).WithMany(p => p.ThpsInventoryheaderUsers)
                .HasForeignKey(d => d.TihuTihId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHU_REF_TIH");

            entity.HasOne(d => d.TihuUs).WithMany(p => p.ThpsInventoryheaderUsers)
                .HasForeignKey(d => d.TihuUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHU_REF_US");
        });

        modelBuilder.Entity<ThpsInventoryheaderstatusTransition>(entity =>
        {
            entity.HasKey(e => e.TivhstId)
                .HasName("PK_THPS_INVENTORYHEADERSTATUS_")
                .HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYHEADERSTATUS_TRANSITION", "sls");

            entity.HasIndex(e => new { e.TivhstCdIdTivt, e.TivhstCdIdTivsFrom, e.TivhstCdIdTivsTo }, "ivhst_cd_ivt_ivs_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TivhstId).HasColumnName("tivhst_id");
            entity.Property(e => e.TivhstCdIdTivsFrom).HasColumnName("tivhst_cd_id_tivs_from");
            entity.Property(e => e.TivhstCdIdTivsTo).HasColumnName("tivhst_cd_id_tivs_to");
            entity.Property(e => e.TivhstCdIdTivt).HasColumnName("tivhst_cd_id_tivt");
            entity.Property(e => e.TivhstExportData)
                .HasDefaultValue((short)-1)
                .HasColumnName("tivhst_export_data");
            entity.Property(e => e.TivhstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("tivhst_extra_code");

            entity.HasOne(d => d.TivhstCdIdTivsFromNavigation).WithMany(p => p.ThpsInventoryheaderstatusTransitionTivhstCdIdTivsFromNavigations)
                .HasForeignKey(d => d.TivhstCdIdTivsFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVHST_REF_CD_IVS_FROM");

            entity.HasOne(d => d.TivhstCdIdTivsToNavigation).WithMany(p => p.ThpsInventoryheaderstatusTransitionTivhstCdIdTivsToNavigations)
                .HasForeignKey(d => d.TivhstCdIdTivsTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVHST_REF_CD_IVS_TO");

            entity.HasOne(d => d.TivhstCdIdTivtNavigation).WithMany(p => p.ThpsInventoryheaderstatusTransitionTivhstCdIdTivtNavigations)
                .HasForeignKey(d => d.TivhstCdIdTivt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVHST_REF_CD_IVT");
        });

        modelBuilder.Entity<ThpsInventorystatusTransition>(entity =>
        {
            entity.HasKey(e => e.TivstId)
                .HasName("PK_THPS_INVENTORYSTATUS_TRANSI")
                .HasFillFactor(90);

            entity.ToTable("THPS_INVENTORYSTATUS_TRANSITION", "sls");

            entity.HasIndex(e => new { e.TivstCdIdTivt, e.TivstCdIdTivsFrom, e.TivstCdIdTivsTo }, "ivst_cd_ivt_ivs_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TivstId).HasColumnName("tivst_id");
            entity.Property(e => e.TivstCdIdTivsFrom).HasColumnName("tivst_cd_id_tivs_from");
            entity.Property(e => e.TivstCdIdTivsTo).HasColumnName("tivst_cd_id_tivs_to");
            entity.Property(e => e.TivstCdIdTivt).HasColumnName("tivst_cd_id_tivt");
            entity.Property(e => e.TivstExportData)
                .HasDefaultValue((short)-1)
                .HasColumnName("tivst_export_data");
            entity.Property(e => e.TivstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("tivst_extra_code");

            entity.HasOne(d => d.TivstCdIdTivsFromNavigation).WithMany(p => p.ThpsInventorystatusTransitionTivstCdIdTivsFromNavigations)
                .HasForeignKey(d => d.TivstCdIdTivsFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVS_FROM");

            entity.HasOne(d => d.TivstCdIdTivsToNavigation).WithMany(p => p.ThpsInventorystatusTransitionTivstCdIdTivsToNavigations)
                .HasForeignKey(d => d.TivstCdIdTivsTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVS_TO");

            entity.HasOne(d => d.TivstCdIdTivtNavigation).WithMany(p => p.ThpsInventorystatusTransitionTivstCdIdTivtNavigations)
                .HasForeignKey(d => d.TivstCdIdTivt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVST_REF_CD_IVT");
        });

        modelBuilder.Entity<ThpsItemcontainer>(entity =>
        {
            entity.HasKey(e => e.TsicId).HasFillFactor(90);

            entity.ToTable("THPS_ITEMCONTAINER", "sls");

            entity.Property(e => e.TsicId).HasColumnName("tsic_id");
            entity.Property(e => e.TsicBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tsic_barcode");
            entity.Property(e => e.TsicIcId).HasColumnName("tsic_ic_id");
            entity.Property(e => e.TsicQuantity)
                .HasDefaultValue((short)1)
                .HasColumnName("tsic_quantity");
            entity.Property(e => e.TsicThpsId).HasColumnName("tsic_thps_id");

            entity.HasOne(d => d.TsicIc).WithMany(p => p.ThpsItemcontainers)
                .HasForeignKey(d => d.TsicIcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSIC_REF_IC");

            entity.HasOne(d => d.TsicThps).WithMany(p => p.ThpsItemcontainers)
                .HasForeignKey(d => d.TsicThpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSIC_REF_THPS");
        });

        modelBuilder.Entity<ThpsIvhsTransitionBu>(entity =>
        {
            entity.HasKey(e => e.TihstbId).HasFillFactor(90);

            entity.ToTable("THPS_IVHS_TRANSITION_BU", "sls");

            entity.HasIndex(e => new { e.TihstbTivhstId, e.TihstbBuId }, "tihstb_tivhst_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TihstbId).HasColumnName("tihstb_id");
            entity.Property(e => e.TihstbBuId).HasColumnName("tihstb_bu_id");
            entity.Property(e => e.TihstbTivhstId).HasColumnName("tihstb_tivhst_id");

            entity.HasOne(d => d.TihstbBu).WithMany(p => p.ThpsIvhsTransitionBus)
                .HasForeignKey(d => d.TihstbBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHSTB_REF_BU");

            entity.HasOne(d => d.TihstbTivhst).WithMany(p => p.ThpsIvhsTransitionBus)
                .HasForeignKey(d => d.TihstbTivhstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIHSTB_REF_TIVHST");
        });

        modelBuilder.Entity<ThpsIvhsTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.TivhtpId)
                .HasName("PK_THPS_IVHS_TRANSITION_PROFIL")
                .HasFillFactor(90);

            entity.ToTable("THPS_IVHS_TRANSITION_PROFILE", "sls");

            entity.HasIndex(e => e.TivhtpTivhstId, "ivhtp_ivhst_pr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TivhtpId).HasColumnName("tivhtp_id");
            entity.Property(e => e.TivhtpTivhstId).HasColumnName("tivhtp_tivhst_id");

            entity.HasOne(d => d.TivhtpTivhst).WithOne(p => p.ThpsIvhsTransitionProfile)
                .HasForeignKey<ThpsIvhsTransitionProfile>(d => d.TivhtpTivhstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IVTP_REF_IVST");
        });

        modelBuilder.Entity<ThpsIvsTransitionBu>(entity =>
        {
            entity.HasKey(e => e.TistbId).HasFillFactor(90);

            entity.ToTable("THPS_IVS_TRANSITION_BU", "sls");

            entity.HasIndex(e => new { e.TistbTivstId, e.TistbBuId }, "tstb_tsst_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TistbId).HasColumnName("tistb_id");
            entity.Property(e => e.TistbBuId).HasColumnName("tistb_bu_id");
            entity.Property(e => e.TistbTivstId).HasColumnName("tistb_tivst_id");

            entity.HasOne(d => d.TistbBu).WithMany(p => p.ThpsIvsTransitionBus)
                .HasForeignKey(d => d.TistbBuId)
                .HasConstraintName("FK_TISTB_REF_BU");

            entity.HasOne(d => d.TistbTivst).WithMany(p => p.ThpsIvsTransitionBus)
                .HasForeignKey(d => d.TistbTivstId)
                .HasConstraintName("FK_TISTB_REF_TIVST");
        });

        modelBuilder.Entity<ThpsIvsTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.TivtpId).HasFillFactor(90);

            entity.ToTable("THPS_IVS_TRANSITION_PROFILE", "sls");

            entity.HasIndex(e => e.TivtpTivstId, "ivtp_ivst_pr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TivtpId).HasColumnName("tivtp_id");
            entity.Property(e => e.TivtpTivstId).HasColumnName("tivtp_tivst_id");
        });

        modelBuilder.Entity<ThpsSuggestedQtyV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("thps_suggested_qty_V", "cmn");

            entity.Property(e => e.TsqId).HasColumnName("tsq_id");
            entity.Property(e => e.TsqStockQty)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("tsq_stock_qty");
            entity.Property(e => e.TsqThpsId).HasColumnName("tsq_thps_id");
            entity.Property(e => e.TsqTsiQty)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("tsq_tsi_qty");
            entity.Property(e => e.TsqTstCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tsq_tst_code");
        });

        modelBuilder.Entity<TmpUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_uom");

            entity.Property(e => e.IPlPrCode)
                .HasMaxLength(32)
                .HasColumnName("i_pl_pr_Code");
            entity.Property(e => e.IPlUom)
                .HasMaxLength(32)
                .HasColumnName("i_pl_uom");
        });

        modelBuilder.Entity<TraceAppActivity>(entity =>
        {
            entity.HasKey(e => e.TaaId).HasFillFactor(90);

            entity.ToTable("TRACE_APP_ACTIVITY", "cmn");

            entity.Property(e => e.TaaId).HasColumnName("taa_id");
            entity.Property(e => e.TaaAction)
                .HasMaxLength(20)
                .HasColumnName("taa_action");
            entity.Property(e => e.TaaClientAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("taa_client_address");
            entity.Property(e => e.TaaDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("taa_datetime");
            entity.Property(e => e.TaaDescription)
                .HasMaxLength(255)
                .HasColumnName("taa_description");
            entity.Property(e => e.TaaPageId)
                .HasMaxLength(100)
                .HasColumnName("taa_page_id");
            entity.Property(e => e.TaaSessionId)
                .HasMaxLength(20)
                .HasColumnName("taa_session_id");
            entity.Property(e => e.TaaUsId).HasColumnName("taa_us_id");
        });

        modelBuilder.Entity<TraceAppExport>(entity =>
        {
            entity.HasKey(e => e.TreId).HasFillFactor(90);

            entity.ToTable("TRACE_APP_EXPORT", "cmn");

            entity.Property(e => e.TreId).HasColumnName("tre_id");
            entity.Property(e => e.TreDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tre_date");
            entity.Property(e => e.TreFilePath)
                .HasMaxLength(255)
                .HasColumnName("tre_file_path");
            entity.Property(e => e.TreQdId).HasColumnName("tre_qd_id");
            entity.Property(e => e.TreStatus).HasColumnName("tre_status");
            entity.Property(e => e.TreTableName)
                .HasMaxLength(50)
                .HasColumnName("tre_table_name");
            entity.Property(e => e.TreUsId).HasColumnName("tre_us_id");
        });

        modelBuilder.Entity<TraceAppSql>(entity =>
        {
            entity.HasKey(e => e.TrasId).HasFillFactor(90);

            entity.ToTable("TRACE_APP_SQL", "cmn");

            entity.Property(e => e.TrasId).HasColumnName("tras_id");
            entity.Property(e => e.TrasAction)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tras_action");
            entity.Property(e => e.TrasDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tras_date_time");
            entity.Property(e => e.TrasMessage)
                .HasMaxLength(255)
                .HasColumnName("tras_message");
            entity.Property(e => e.TrasObject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tras_object");
            entity.Property(e => e.TrasSession)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tras_session");
            entity.Property(e => e.TrasStatus).HasColumnName("tras_status");
            entity.Property(e => e.TrasUsId).HasColumnName("tras_us_id");
        });

        modelBuilder.Entity<TraceAppWeb>(entity =>
        {
            entity.HasKey(e => e.TraId).HasFillFactor(90);

            entity.ToTable("TRACE_APP_WEB", "cmn");

            entity.Property(e => e.TraId).HasColumnName("tra_id");
            entity.Property(e => e.TraAction)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tra_action");
            entity.Property(e => e.TraClientAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tra_client_address");
            entity.Property(e => e.TraDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tra_date_time");
            entity.Property(e => e.TraMessage)
                .HasMaxLength(255)
                .HasColumnName("tra_message");
            entity.Property(e => e.TraPage)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tra_page");
            entity.Property(e => e.TraSession)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tra_session");
            entity.Property(e => e.TraStatus).HasColumnName("tra_status");
            entity.Property(e => e.TraUsId).HasColumnName("tra_us_id");
        });

        modelBuilder.Entity<TraceDex>(entity =>
        {
            entity.HasKey(e => e.TdxId)
                .HasName("PK_TRACE_SYNC")
                .HasFillFactor(90);

            entity.ToTable("TRACE_DEX", "dex");

            entity.Property(e => e.TdxId).HasColumnName("tdx_id");
            entity.Property(e => e.TdxAction)
                .HasMaxLength(255)
                .HasColumnName("tdx_action");
            entity.Property(e => e.TdxCdIdDxt).HasColumnName("tdx_cd_id_dxt");
            entity.Property(e => e.TdxDatetime)
                .HasColumnType("datetime")
                .HasColumnName("tdx_datetime");
            entity.Property(e => e.TdxDescription)
                .HasMaxLength(255)
                .HasColumnName("tdx_description");
            entity.Property(e => e.TdxResult).HasColumnName("tdx_result");
            entity.Property(e => e.TdxSyncSession)
                .HasMaxLength(255)
                .HasColumnName("tdx_sync_session");
            entity.Property(e => e.TdxSyncVersion)
                .HasMaxLength(255)
                .HasColumnName("tdx_sync_version");
            entity.Property(e => e.TdxUsId).HasColumnName("tdx_us_id");
        });

        modelBuilder.Entity<TraceSync>(entity =>
        {
            entity.HasKey(e => e.TsyId).HasFillFactor(90);

            entity.ToTable("TRACE_SYNC", "syn");

            entity.Property(e => e.TsyId).HasColumnName("tsy_id");
            entity.Property(e => e.TsyAction)
                .HasMaxLength(50)
                .HasColumnName("tsy_action");
            entity.Property(e => e.TsyDatetime)
                .HasColumnType("datetime")
                .HasColumnName("tsy_datetime");
            entity.Property(e => e.TsyDescription)
                .HasMaxLength(255)
                .HasColumnName("tsy_description");
            entity.Property(e => e.TsyResult).HasColumnName("tsy_result");
            entity.Property(e => e.TsySyncVersion)
                .HasMaxLength(30)
                .HasColumnName("tsy_sync_version");
            entity.Property(e => e.TsyUsId).HasColumnName("tsy_us_id");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TsId).HasFillFactor(90);

            entity.ToTable("TRANSACTION", "sls");

            entity.HasIndex(e => e.TsNumber, "idx_ts_number")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.TsUsId, e.TsBuId, e.TsTstId, e.TsNumber }, "idx_ts_us_bu_tst_number")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.TsUsId, e.TsBuId, e.TsTstId, e.TsNumber }, "idx_us_bu_tst_number").HasFillFactor(90);

            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsAttribute01)
                .HasMaxLength(50)
                .HasColumnName("ts_attribute_01");
            entity.Property(e => e.TsAttribute02)
                .HasMaxLength(50)
                .HasColumnName("ts_attribute_02");
            entity.Property(e => e.TsAttribute03)
                .HasMaxLength(50)
                .HasColumnName("ts_attribute_03");
            entity.Property(e => e.TsBuId).HasColumnName("ts_bu_id");
            entity.Property(e => e.TsCdIdCms).HasColumnName("ts_cd_id_cms");
            entity.Property(e => e.TsCdIdCur).HasColumnName("ts_cd_id_cur");
            entity.Property(e => e.TsCdIdSrc).HasColumnName("ts_cd_id_src");
            entity.Property(e => e.TsCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("ts_create_date");
            entity.Property(e => e.TsCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_cur_rate");
            entity.Property(e => e.TsDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts_date");
            entity.Property(e => e.TsDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_discount");
            entity.Property(e => e.TsDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_discount_amount");
            entity.Property(e => e.TsDueDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts_due_date");
            entity.Property(e => e.TsExportedDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_exported_date");
            entity.Property(e => e.TsInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_inv_cur_rate");
            entity.Property(e => e.TsModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_modified_date");
            entity.Property(e => e.TsNumber)
                .HasMaxLength(40)
                .HasColumnName("ts_number");
            entity.Property(e => e.TsOrgId).HasColumnName("ts_org_id");
            entity.Property(e => e.TsOurReference)
                .HasMaxLength(10)
                .HasColumnName("ts_our_reference");
            entity.Property(e => e.TsPtId).HasColumnName("ts_pt_id");
            entity.Property(e => e.TsRemarks)
                .HasMaxLength(255)
                .HasColumnName("ts_remarks");
            entity.Property(e => e.TsSgdId).HasColumnName("ts_sgd_id");
            entity.Property(e => e.TsTheirReference)
                .HasMaxLength(30)
                .HasColumnName("ts_their_reference");
            entity.Property(e => e.TsThpsIdBill).HasColumnName("ts_thps_id_bill");
            entity.Property(e => e.TsThpsIdShip).HasColumnName("ts_thps_id_ship");
            entity.Property(e => e.TsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total");
            entity.Property(e => e.TsTotalBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_bc");
            entity.Property(e => e.TsTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount");
            entity.Property(e => e.TsTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount_bc");
            entity.Property(e => e.TsTotalFinal)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("ts_total_final");
            entity.Property(e => e.TsTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax");
            entity.Property(e => e.TsTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax_bc");
            entity.Property(e => e.TsTssId).HasColumnName("ts_tss_id");
            entity.Property(e => e.TsTstId).HasColumnName("ts_tst_id");
            entity.Property(e => e.TsUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ts_uid");
            entity.Property(e => e.TsUsId).HasColumnName("ts_us_id");
            entity.Property(e => e.TsUsIdCreatedby).HasColumnName("ts_us_id_createdby");
            entity.Property(e => e.TsVtId).HasColumnName("ts_vt_id");

            entity.HasOne(d => d.TsBu).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TS_REF_BU");

            entity.HasOne(d => d.TsCdIdCmsNavigation).WithMany(p => p.TransactionTsCdIdCmsNavigations)
                .HasForeignKey(d => d.TsCdIdCms)
                .HasConstraintName("FK_TS_REF_CD_CMS");

            entity.HasOne(d => d.TsCdIdCurNavigation).WithMany(p => p.TransactionTsCdIdCurNavigations)
                .HasForeignKey(d => d.TsCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TS_REF_CD_CUR");

            entity.HasOne(d => d.TsCdIdSrcNavigation).WithMany(p => p.TransactionTsCdIdSrcNavigations)
                .HasForeignKey(d => d.TsCdIdSrc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TS_REF_CD_SRC");

            entity.HasOne(d => d.TsSgd).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsSgdId)
                .HasConstraintName("FK_TS_REF_SGD");

            entity.HasOne(d => d.TsThpsIdBillNavigation).WithMany(p => p.TransactionTsThpsIdBillNavigations)
                .HasForeignKey(d => d.TsThpsIdBill)
                .HasConstraintName("FK_TS_REF_THPS_Bill");

            entity.HasOne(d => d.TsThpsIdShipNavigation).WithMany(p => p.TransactionTsThpsIdShipNavigations)
                .HasForeignKey(d => d.TsThpsIdShip)
                .HasConstraintName("FK_TS_REF_THPS_Ship");

            entity.HasOne(d => d.TsTss).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsTssId)
                .HasConstraintName("FK_TS_REF_TSS");

            entity.HasOne(d => d.TsTst).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TS_REF_TST");

            entity.HasOne(d => d.TsUs).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsUsId)
                .HasConstraintName("FK_TS_REF_US");

            entity.HasOne(d => d.TsVt).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TsVtId)
                .HasConstraintName("FK_TS_REF_VT");
        });

        modelBuilder.Entity<TransactionAmount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TransactionAmount", "cmn");

            entity.Property(e => e.Salestotal).HasColumnType("numeric(13, 5)");
            entity.Property(e => e.TransId).HasColumnName("trans_id");
        });

        modelBuilder.Entity<TransactionBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("transaction_backup", "sls");

            entity.Property(e => e.TsBuId).HasColumnName("ts_bu_id");
            entity.Property(e => e.TsCdIdCms).HasColumnName("ts_cd_id_cms");
            entity.Property(e => e.TsCdIdCur).HasColumnName("ts_cd_id_cur");
            entity.Property(e => e.TsCdIdSrc).HasColumnName("ts_cd_id_src");
            entity.Property(e => e.TsCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_create_date");
            entity.Property(e => e.TsCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_cur_rate");
            entity.Property(e => e.TsDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_date");
            entity.Property(e => e.TsDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_discount");
            entity.Property(e => e.TsDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_due_date");
            entity.Property(e => e.TsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ts_id");
            entity.Property(e => e.TsInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_inv_cur_rate");
            entity.Property(e => e.TsModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_modified_date");
            entity.Property(e => e.TsNumber)
                .HasMaxLength(40)
                .HasColumnName("ts_number");
            entity.Property(e => e.TsOrgId).HasColumnName("ts_org_id");
            entity.Property(e => e.TsOurReference)
                .HasMaxLength(10)
                .HasColumnName("ts_our_reference");
            entity.Property(e => e.TsPtId).HasColumnName("ts_pt_id");
            entity.Property(e => e.TsRemarks)
                .HasMaxLength(255)
                .HasColumnName("ts_remarks");
            entity.Property(e => e.TsSgdId).HasColumnName("ts_sgd_id");
            entity.Property(e => e.TsTheirReference)
                .HasMaxLength(10)
                .HasColumnName("ts_their_reference");
            entity.Property(e => e.TsThpsIdBill).HasColumnName("ts_thps_id_bill");
            entity.Property(e => e.TsThpsIdShip).HasColumnName("ts_thps_id_ship");
            entity.Property(e => e.TsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total");
            entity.Property(e => e.TsTotalBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_bc");
            entity.Property(e => e.TsTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount");
            entity.Property(e => e.TsTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount_bc");
            entity.Property(e => e.TsTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax");
            entity.Property(e => e.TsTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax_bc");
            entity.Property(e => e.TsTssId).HasColumnName("ts_tss_id");
            entity.Property(e => e.TsTstId).HasColumnName("ts_tst_id");
            entity.Property(e => e.TsUsId).HasColumnName("ts_us_id");
            entity.Property(e => e.TsUsIdCreatedby).HasColumnName("ts_us_id_createdby");
            entity.Property(e => e.TsVtId).HasColumnName("ts_vt_id");
        });

        modelBuilder.Entity<TransactionConfig>(entity =>
        {
            entity.HasKey(e => e.TcId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_CONFIG", "cmn");

            entity.Property(e => e.TcId).HasColumnName("tc_id");
            entity.Property(e => e.TcCdIdReturntype).HasColumnName("tc_cd_id_returntype");
            entity.Property(e => e.TcClickable)
                .HasDefaultValue((short)1)
                .HasColumnName("tc_clickable");
            entity.Property(e => e.TcGridCode)
                .HasMaxLength(64)
                .HasColumnName("tc_grid_code");
            entity.Property(e => e.TcOrder).HasColumnName("tc_order");
            entity.Property(e => e.TcSearchCriteria)
                .HasMaxLength(64)
                .HasColumnName("tc_search_criteria");
            entity.Property(e => e.TcSelecteye)
                .HasMaxLength(64)
                .HasColumnName("tc_selecteye");
            entity.Property(e => e.TcShowAddToWishlist)
                .HasDefaultValue((short)0)
                .HasColumnName("tc_show_add_to_wishlist");
            entity.Property(e => e.TcSkipIfEmpty).HasColumnName("tc_skip_if_empty");
            entity.Property(e => e.TcTitle)
                .HasMaxLength(64)
                .HasColumnName("tc_title");
            entity.Property(e => e.TcTtId).HasColumnName("tc_tt_id");
        });

        modelBuilder.Entity<TransactionDelivery>(entity =>
        {
            entity.HasKey(e => e.TsdId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_DELIVERY", "sls");

            entity.Property(e => e.TsdId).HasColumnName("tsd_id");
            entity.Property(e => e.TsdAttribute01)
                .HasMaxLength(50)
                .HasColumnName("tsd_attribute_01");
            entity.Property(e => e.TsdAttribute02)
                .HasMaxLength(50)
                .HasColumnName("tsd_attribute_02");
            entity.Property(e => e.TsdAttribute03)
                .HasMaxLength(1000)
                .HasColumnName("tsd_attribute_03");
            entity.Property(e => e.TsdBuId).HasColumnName("tsd_bu_id");
            entity.Property(e => e.TsdCdIdCms).HasColumnName("tsd_cd_id_cms");
            entity.Property(e => e.TsdCdIdCur).HasColumnName("tsd_cd_id_cur");
            entity.Property(e => e.TsdCdIdSrc).HasColumnName("tsd_cd_id_src");
            entity.Property(e => e.TsdCrRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_cr_rate");
            entity.Property(e => e.TsdCreateDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime")
                .HasColumnName("tsd_create_date");
            entity.Property(e => e.TsdCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_cur_rate");
            entity.Property(e => e.TsdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tsd_date");
            entity.Property(e => e.TsdDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_discount");
            entity.Property(e => e.TsdDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_discount_amount");
            entity.Property(e => e.TsdDueDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tsd_due_date");
            entity.Property(e => e.TsdInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_inv_cur_rate");
            entity.Property(e => e.TsdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("tsd_modified_date");
            entity.Property(e => e.TsdNumber)
                .HasMaxLength(40)
                .HasColumnName("tsd_number");
            entity.Property(e => e.TsdOrgId).HasColumnName("tsd_org_id");
            entity.Property(e => e.TsdOurReference)
                .HasMaxLength(10)
                .HasColumnName("tsd_our_reference");
            entity.Property(e => e.TsdPtId).HasColumnName("tsd_pt_id");
            entity.Property(e => e.TsdRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsd_remarks");
            entity.Property(e => e.TsdSgdId).HasColumnName("tsd_sgd_id");
            entity.Property(e => e.TsdTheirReference)
                .HasMaxLength(10)
                .HasColumnName("tsd_their_reference");
            entity.Property(e => e.TsdThpsIdBill).HasColumnName("tsd_thps_id_bill");
            entity.Property(e => e.TsdThpsIdShip).HasColumnName("tsd_thps_id_ship");
            entity.Property(e => e.TsdTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total");
            entity.Property(e => e.TsdTotalBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total_bc");
            entity.Property(e => e.TsdTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total_discount");
            entity.Property(e => e.TsdTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total_discount_bc");
            entity.Property(e => e.TsdTotalFinal)
                .HasComputedColumnSql("(([tsd_total]-isnull([tsd_discount_amount],(0)))-([tsd_total]*isnull([tsd_discount],(0)))/(100))", false)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("tsd_total_final");
            entity.Property(e => e.TsdTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total_tax");
            entity.Property(e => e.TsdTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsd_total_tax_bc");
            entity.Property(e => e.TsdTsId).HasColumnName("tsd_ts_id");
            entity.Property(e => e.TsdTsUid)
                .HasMaxLength(64)
                .HasColumnName("tsd_ts_uid");
            entity.Property(e => e.TsdTssId).HasColumnName("tsd_tss_id");
            entity.Property(e => e.TsdTstId).HasColumnName("tsd_tst_id");
            entity.Property(e => e.TsdUid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("tsd_uid");
            entity.Property(e => e.TsdUsId).HasColumnName("tsd_us_id");
            entity.Property(e => e.TsdUsIdCreatedby).HasColumnName("tsd_us_id_createdby");
            entity.Property(e => e.TsdVtId).HasColumnName("tsd_vt_id");

            entity.HasOne(d => d.TsdBu).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSD_REF_BU");

            entity.HasOne(d => d.TsdCdIdCmsNavigation).WithMany(p => p.TransactionDeliveryTsdCdIdCmsNavigations)
                .HasForeignKey(d => d.TsdCdIdCms)
                .HasConstraintName("FK_TSD_REF_CD_CMS");

            entity.HasOne(d => d.TsdCdIdCurNavigation).WithMany(p => p.TransactionDeliveryTsdCdIdCurNavigations)
                .HasForeignKey(d => d.TsdCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSD_REF_CD_CUR");

            entity.HasOne(d => d.TsdCdIdSrcNavigation).WithMany(p => p.TransactionDeliveryTsdCdIdSrcNavigations)
                .HasForeignKey(d => d.TsdCdIdSrc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSD_REF_CD_SRC");

            entity.HasOne(d => d.TsdSgd).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdSgdId)
                .HasConstraintName("FK_TSD_REF_SGD");

            entity.HasOne(d => d.TsdThpsIdBillNavigation).WithMany(p => p.TransactionDeliveryTsdThpsIdBillNavigations)
                .HasForeignKey(d => d.TsdThpsIdBill)
                .HasConstraintName("FK_TSD_REF_THPS_Bill");

            entity.HasOne(d => d.TsdThpsIdShipNavigation).WithMany(p => p.TransactionDeliveryTsdThpsIdShipNavigations)
                .HasForeignKey(d => d.TsdThpsIdShip)
                .HasConstraintName("FK_TSD_REF_THPS_Ship");

            entity.HasOne(d => d.TsdTss).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdTssId)
                .HasConstraintName("FK_TSD_REF_TSS");

            entity.HasOne(d => d.TsdTst).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSD_REF_TST");

            entity.HasOne(d => d.TsdUs).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdUsId)
                .HasConstraintName("FK_TSD_REF_US");

            entity.HasOne(d => d.TsdVt).WithMany(p => p.TransactionDeliveries)
                .HasForeignKey(d => d.TsdVtId)
                .HasConstraintName("FK_TSD_REF_VT");
        });

        modelBuilder.Entity<TransactionDeliveryItem>(entity =>
        {
            entity.HasKey(e => e.TsdiId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_DELIVERY_ITEM", "sls");

            entity.Property(e => e.TsdiId).HasColumnName("tsdi_id");
            entity.Property(e => e.TsdiCdIdFrc).HasColumnName("tsdi_cd_id_frc");
            entity.Property(e => e.TsdiCdIdRett).HasColumnName("tsdi_cd_id_rett");
            entity.Property(e => e.TsdiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_discount_amount");
            entity.Property(e => e.TsdiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_discount_percentage");
            entity.Property(e => e.TsdiFreeComment)
                .HasMaxLength(512)
                .HasColumnName("tsdi_free_comment");
            entity.Property(e => e.TsdiItId).HasColumnName("tsdi_it_id");
            entity.Property(e => e.TsdiLineSequence).HasColumnName("tsdi_line_sequence");
            entity.Property(e => e.TsdiLpiId).HasColumnName("tsdi_lpi_id");
            entity.Property(e => e.TsdiOrgId).HasColumnName("tsdi_org_id");
            entity.Property(e => e.TsdiPlIdWhs).HasColumnName("tsdi_pl_id_whs");
            entity.Property(e => e.TsdiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_price");
            entity.Property(e => e.TsdiPriceChanged).HasColumnName("tsdi_price_changed");
            entity.Property(e => e.TsdiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_quantity");
            entity.Property(e => e.TsdiQuantity2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_quantity2");
            entity.Property(e => e.TsdiRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsdi_remarks");
            entity.Property(e => e.TsdiThpsDiscount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_thps_discount");
            entity.Property(e => e.TsdiTotalAmount)
                .HasComputedColumnSql("((([tsdi_price]*[tsdi_quantity])*((1)-isnull([tsdi_discount_percentage],(0))/(100)))*((1)-isnull([tsdi_thps_discount],(0))/(100))+isnull([tsdi_total_tax],(0)))", false)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("tsdi_total_amount");
            entity.Property(e => e.TsdiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_total_amount_bc");
            entity.Property(e => e.TsdiTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_total_discount");
            entity.Property(e => e.TsdiTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_total_discount_bc");
            entity.Property(e => e.TsdiTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_total_tax");
            entity.Property(e => e.TsdiTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsdi_total_tax_bc");
            entity.Property(e => e.TsdiTsId).HasColumnName("tsdi_ts_id");
            entity.Property(e => e.TsdiTsOrgId).HasColumnName("tsdi_ts_org_id");
            entity.Property(e => e.TsdiTsdiId).HasColumnName("tsdi_tsdi_id");
            entity.Property(e => e.TsdiTstoId).HasColumnName("tsdi_tsto_id");
            entity.Property(e => e.TsdiUomId).HasColumnName("tsdi_uom_id");

            entity.HasOne(d => d.TsdiIt).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiItId)
                .HasConstraintName("FK_TSDI_REF_IT");

            entity.HasOne(d => d.TsdiLpi).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiLpiId)
                .HasConstraintName("FK_tsdi_REF_LP");

            entity.HasOne(d => d.TsdiPlIdWhsNavigation).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiPlIdWhs)
                .HasConstraintName("FK_tsdi_REF_PL_WHS");

            entity.HasOne(d => d.TsdiTs).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tsdi_REF_TS");

            entity.HasOne(d => d.TsdiTsdi).WithMany(p => p.InverseTsdiTsdi)
                .HasForeignKey(d => d.TsdiTsdiId)
                .HasConstraintName("FK_tsdi_REF_TSI");

            entity.HasOne(d => d.TsdiTsto).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiTstoId)
                .HasConstraintName("FK_tsdi_REF_TSTO");

            entity.HasOne(d => d.TsdiUom).WithMany(p => p.TransactionDeliveryItems)
                .HasForeignKey(d => d.TsdiUomId)
                .HasConstraintName("FK_tsdi_REF_UOM");
        });

        modelBuilder.Entity<TransactionItem>(entity =>
        {
            entity.HasKey(e => e.TsiId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_ITEM", "sls");

            entity.HasIndex(e => e.TsiTsId, "mvi_mv_idx").HasFillFactor(90);

            entity.HasIndex(e => e.TsiItId, "tsi_it_idx").HasFillFactor(90);

            entity.Property(e => e.TsiId).HasColumnName("tsi_id");
            entity.Property(e => e.TsiCdIdFrc).HasColumnName("tsi_cd_id_frc");
            entity.Property(e => e.TsiCdIdRett).HasColumnName("tsi_cd_id_rett");
            entity.Property(e => e.TsiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_amount");
            entity.Property(e => e.TsiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_percentage");
            entity.Property(e => e.TsiFreeComment)
                .HasMaxLength(512)
                .HasColumnName("tsi_free_comment");
            entity.Property(e => e.TsiItId).HasColumnName("tsi_it_id");
            entity.Property(e => e.TsiLineSequence).HasColumnName("tsi_line_sequence");
            entity.Property(e => e.TsiLpiId).HasColumnName("tsi_lpi_id");
            entity.Property(e => e.TsiOrgId).HasColumnName("tsi_org_id");
            entity.Property(e => e.TsiPlIdWhs).HasColumnName("tsi_pl_id_whs");
            entity.Property(e => e.TsiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_price");
            entity.Property(e => e.TsiPriceChanged).HasColumnName("tsi_price_changed");
            entity.Property(e => e.TsiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity");
            entity.Property(e => e.TsiQuantity2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity2");
            entity.Property(e => e.TsiRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsi_remarks");
            entity.Property(e => e.TsiThpsDiscount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_thps_discount");
            entity.Property(e => e.TsiTotalAmount)
                .HasComputedColumnSql("((([tsi_price]*[tsi_quantity])*((1)-isnull([tsi_discount_percentage],(0))/(100)))*((1)-isnull([tsi_thps_discount],(0))/(100))+isnull([tsi_total_tax],(0)))", false)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("tsi_total_amount");
            entity.Property(e => e.TsiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_amount_bc");
            entity.Property(e => e.TsiTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount");
            entity.Property(e => e.TsiTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount_bc");
            entity.Property(e => e.TsiTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax");
            entity.Property(e => e.TsiTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax_bc");
            entity.Property(e => e.TsiTsId).HasColumnName("tsi_ts_id");
            entity.Property(e => e.TsiTsOrgId).HasColumnName("tsi_ts_org_id");
            entity.Property(e => e.TsiTsiId).HasColumnName("tsi_tsi_id");
            entity.Property(e => e.TsiTstoId).HasColumnName("tsi_tsto_id");
            entity.Property(e => e.TsiUomId).HasColumnName("tsi_uom_id");

            entity.HasOne(d => d.TsiIt).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiItId)
                .HasConstraintName("FK_TST_REF_IT");

            entity.HasOne(d => d.TsiLpi).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiLpiId)
                .HasConstraintName("FK_TSI_REF_LP");

            entity.HasOne(d => d.TsiPlIdWhsNavigation).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiPlIdWhs)
                .HasConstraintName("FK_TSI_REF_PL_WHS");

            entity.HasOne(d => d.TsiTs).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSI_REF_TS");

            entity.HasOne(d => d.TsiTsi).WithMany(p => p.InverseTsiTsi)
                .HasForeignKey(d => d.TsiTsiId)
                .HasConstraintName("FK_TSI_REF_TSI");

            entity.HasOne(d => d.TsiTsto).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiTstoId)
                .HasConstraintName("FK_TSI_REF_TSTO");

            entity.HasOne(d => d.TsiUom).WithMany(p => p.TransactionItems)
                .HasForeignKey(d => d.TsiUomId)
                .HasConstraintName("FK_TSI_REF_UOM");
        });

        modelBuilder.Entity<TransactionItemBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("transaction_item_backup", "sls");

            entity.Property(e => e.TsiCdIdFrc).HasColumnName("tsi_cd_id_frc");
            entity.Property(e => e.TsiCdIdRett).HasColumnName("tsi_cd_id_rett");
            entity.Property(e => e.TsiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_amount");
            entity.Property(e => e.TsiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_percentage");
            entity.Property(e => e.TsiFreeComment)
                .HasMaxLength(512)
                .HasColumnName("tsi_free_comment");
            entity.Property(e => e.TsiId)
                .ValueGeneratedOnAdd()
                .HasColumnName("tsi_id");
            entity.Property(e => e.TsiItId).HasColumnName("tsi_it_id");
            entity.Property(e => e.TsiLineSequence).HasColumnName("tsi_line_sequence");
            entity.Property(e => e.TsiLpiId).HasColumnName("tsi_lpi_id");
            entity.Property(e => e.TsiOrgId).HasColumnName("tsi_org_id");
            entity.Property(e => e.TsiPlIdWhs).HasColumnName("tsi_pl_id_whs");
            entity.Property(e => e.TsiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_price");
            entity.Property(e => e.TsiPriceChanged).HasColumnName("tsi_price_changed");
            entity.Property(e => e.TsiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity");
            entity.Property(e => e.TsiQuantity2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity2");
            entity.Property(e => e.TsiRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsi_remarks");
            entity.Property(e => e.TsiThpsDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_thps_discount");
            entity.Property(e => e.TsiTotalAmount)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("tsi_total_amount");
            entity.Property(e => e.TsiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_amount_bc");
            entity.Property(e => e.TsiTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount");
            entity.Property(e => e.TsiTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount_bc");
            entity.Property(e => e.TsiTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax");
            entity.Property(e => e.TsiTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax_bc");
            entity.Property(e => e.TsiTsId).HasColumnName("tsi_ts_id");
            entity.Property(e => e.TsiTsOrgId).HasColumnName("tsi_ts_org_id");
            entity.Property(e => e.TsiTsiId).HasColumnName("tsi_tsi_id");
            entity.Property(e => e.TsiTstoId).HasColumnName("tsi_tsto_id");
            entity.Property(e => e.TsiUomId).HasColumnName("tsi_uom_id");
        });

        modelBuilder.Entity<TransactionItemDetail>(entity =>
        {
            entity.HasKey(e => e.TsidId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_ITEM_DETAIL", "sls");

            entity.HasIndex(e => new { e.TsidTsiId, e.TsidIldId }, "tsid_tsi_ild_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TsidId).HasColumnName("tsid_id");
            entity.Property(e => e.TsidIldId).HasColumnName("tsid_ild_id");
            entity.Property(e => e.TsidOrgId).HasColumnName("tsid_org_id");
            entity.Property(e => e.TsidQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsid_quantity");
            entity.Property(e => e.TsidQuantity2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsid_quantity2");
            entity.Property(e => e.TsidTsiId).HasColumnName("tsid_tsi_id");

            entity.HasOne(d => d.TsidTsi).WithMany(p => p.TransactionItemDetails)
                .HasForeignKey(d => d.TsidTsiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSIW_REF_TSI");
        });

        modelBuilder.Entity<TransactionItemPlu>(entity =>
        {
            entity.HasKey(e => e.TsipId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_ITEM_PLUS", "sls");

            entity.Property(e => e.TsipId).HasColumnName("tsip_id");
            entity.Property(e => e.TsipAttribut01)
                .HasMaxLength(255)
                .HasColumnName("tsip_attribut01");
            entity.Property(e => e.TsipAttribut02)
                .HasMaxLength(255)
                .HasColumnName("tsip_attribut02");
            entity.Property(e => e.TsipAttribut03)
                .HasMaxLength(255)
                .HasColumnName("tsip_attribut03");
            entity.Property(e => e.TsipTsId).HasColumnName("tsip_ts_id");
            entity.Property(e => e.TsipTsiId).HasColumnName("tsip_tsi_id");
        });

        modelBuilder.Entity<TransactionItemPromotion>(entity =>
        {
            entity.HasKey(e => e.TipId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_ITEM_PROMOTION", "sls");

            entity.HasIndex(e => e.TipPndId, "tip_pnd_idx").HasFillFactor(90);

            entity.HasIndex(e => new { e.TipTsId, e.TipTsiId, e.TipTsidId }, "tip_tsi_idx").HasFillFactor(90);

            entity.Property(e => e.TipId).HasColumnName("tip_id");
            entity.Property(e => e.TipPndApplyOrder)
                .HasDefaultValue(1)
                .HasColumnName("tip_pnd_apply_order");
            entity.Property(e => e.TipPndBucket).HasColumnName("tip_pnd_bucket");
            entity.Property(e => e.TipPndId).HasColumnName("tip_pnd_id");
            entity.Property(e => e.TipPndPrecedence).HasColumnName("tip_pnd_precedence");
            entity.Property(e => e.TipTsId).HasColumnName("tip_ts_id");
            entity.Property(e => e.TipTsiId).HasColumnName("tip_tsi_id");
            entity.Property(e => e.TipTsidId).HasColumnName("tip_tsid_id");
            entity.Property(e => e.TipValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tip_value");
            entity.Property(e => e.TipValueBefore)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tip_value_before");

            entity.HasOne(d => d.TipPnd).WithMany(p => p.TransactionItemPromotions)
                .HasForeignKey(d => d.TipPndId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIP_REF_PND");

            entity.HasOne(d => d.TipTs).WithMany(p => p.TransactionItemPromotions)
                .HasForeignKey(d => d.TipTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIP_REF_TS");

            entity.HasOne(d => d.TipTsi).WithMany(p => p.TransactionItemPromotions)
                .HasForeignKey(d => d.TipTsiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIP_REF_TSI");
        });

        modelBuilder.Entity<TransactionLink>(entity =>
        {
            entity.HasKey(e => e.TslId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_LINK", "sls");

            entity.HasIndex(e => new { e.TslTsId, e.TslTsIdLink }, "tsl_ts_ts_id_link_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TslId).HasColumnName("tsl_id");
            entity.Property(e => e.TslMvIdLink).HasColumnName("tsl_mv_id_link");
            entity.Property(e => e.TslOrgId).HasColumnName("tsl_org_id");
            entity.Property(e => e.TslTsId).HasColumnName("tsl_ts_id");
            entity.Property(e => e.TslTsIdLink).HasColumnName("tsl_ts_id_link");

            entity.HasOne(d => d.TslTs).WithMany(p => p.TransactionLinkTslTs)
                .HasForeignKey(d => d.TslTsId)
                .HasConstraintName("FK_TSL_REF_TS");

            entity.HasOne(d => d.TslTsIdLinkNavigation).WithMany(p => p.TransactionLinkTslTsIdLinkNavigations)
                .HasForeignKey(d => d.TslTsIdLink)
                .HasConstraintName("FK_TSL_REF_TS_LINK");
        });

        modelBuilder.Entity<TransactionLinkDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TRANSACTION_LINK_DETAILS", "sls");

            entity.Property(e => e.DlvTsDate)
                .HasColumnType("datetime")
                .HasColumnName("dlv_ts_date");
            entity.Property(e => e.DlvTsId).HasColumnName("dlv_ts_id");
            entity.Property(e => e.DlvTsNumber)
                .HasMaxLength(40)
                .HasColumnName("dlv_ts_number");
            entity.Property(e => e.DlvTsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("dlv_ts_total");
            entity.Property(e => e.DlvUsId).HasColumnName("dlv_us_id");
            entity.Property(e => e.InvTsDate)
                .HasColumnType("datetime")
                .HasColumnName("inv_ts_date");
            entity.Property(e => e.InvTsId).HasColumnName("inv_ts_id");
            entity.Property(e => e.InvTsNumber)
                .HasMaxLength(40)
                .HasColumnName("inv_ts_number");
            entity.Property(e => e.InvTsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("inv_ts_total");
            entity.Property(e => e.InvUsId).HasColumnName("inv_us_id");
            entity.Property(e => e.OrdTsDate)
                .HasColumnType("datetime")
                .HasColumnName("ord_ts_date");
            entity.Property(e => e.OrdTsId).HasColumnName("ord_ts_id");
            entity.Property(e => e.OrdTsNumber)
                .HasMaxLength(40)
                .HasColumnName("ord_ts_number");
            entity.Property(e => e.OrdTsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ord_ts_total");
            entity.Property(e => e.OrdUsId).HasColumnName("ord_us_id");
            entity.Property(e => e.TslId).HasColumnName("tsl_id");
        });

        modelBuilder.Entity<TransactionReason>(entity =>
        {
            entity.HasKey(e => e.TsrId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_REASON", "sls");

            entity.Property(e => e.TsrId).HasColumnName("tsr_id");
            entity.Property(e => e.TsrCdIdTsr).HasColumnName("tsr_cd_id_tsr");
            entity.Property(e => e.TsrDate)
                .HasColumnType("datetime")
                .HasColumnName("tsr_date");
            entity.Property(e => e.TsrOrgId).HasColumnName("tsr_org_id");
            entity.Property(e => e.TsrRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsr_remarks");
            entity.Property(e => e.TsrTsId).HasColumnName("tsr_ts_id");
            entity.Property(e => e.TsrTssId).HasColumnName("tsr_tss_id");
            entity.Property(e => e.TsrUsId).HasColumnName("tsr_us_id");

            entity.HasOne(d => d.TsrCdIdTsrNavigation).WithMany(p => p.TransactionReasons)
                .HasForeignKey(d => d.TsrCdIdTsr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSr_CD_TSR");

            entity.HasOne(d => d.TsrTs).WithMany(p => p.TransactionReasons)
                .HasForeignKey(d => d.TsrTsId)
                .HasConstraintName("FK_TSr_ts_id");

            entity.HasOne(d => d.TsrTss).WithMany(p => p.TransactionReasons)
                .HasForeignKey(d => d.TsrTssId)
                .HasConstraintName("FK_TSR_REF_TSS");
        });

        modelBuilder.Entity<TransactionStatusHistory>(entity =>
        {
            entity.HasKey(e => e.TsshId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_STATUS_HISTORY", "sls");

            entity.Property(e => e.TsshId).HasColumnName("tssh_id");
            entity.Property(e => e.TsshComments)
                .HasMaxLength(255)
                .HasColumnName("tssh_comments");
            entity.Property(e => e.TsshCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("tssh_create_date");
            entity.Property(e => e.TsshTsId).HasColumnName("tssh_ts_id");
            entity.Property(e => e.TsshTssId).HasColumnName("tssh_tss_id");
            entity.Property(e => e.TsshUsId).HasColumnName("tssh_us_id");

            entity.HasOne(d => d.TsshTs).WithMany(p => p.TransactionStatusHistories)
                .HasForeignKey(d => d.TsshTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSSH_REF_TS");

            entity.HasOne(d => d.TsshTss).WithMany(p => p.TransactionStatusHistories)
                .HasForeignKey(d => d.TsshTssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSSH_REF_TSS");

            entity.HasOne(d => d.TsshUs).WithMany(p => p.TransactionStatusHistories)
                .HasForeignKey(d => d.TsshUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSSH_REF_US");
        });

        modelBuilder.Entity<TransactionStatusSnc>(entity =>
        {
            entity.HasKey(e => new { e.STsId, e.STsSmId, e.STsVersion })
                .HasName("pk_transaction_status_snc")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTION_STATUS_SNC", "syn");

            entity.Property(e => e.STsId).HasColumnName("s_ts_id");
            entity.Property(e => e.STsSmId)
                .HasMaxLength(32)
                .HasColumnName("s_ts_sm_id");
            entity.Property(e => e.STsVersion)
                .HasMaxLength(32)
                .HasColumnName("s_ts_version");
            entity.Property(e => e.STsCuId).HasColumnName("s_ts_cu_id");
            entity.Property(e => e.STsCustomer)
                .HasMaxLength(128)
                .HasColumnName("s_ts_customer");
            entity.Property(e => e.STsCustomerPhone)
                .HasMaxLength(64)
                .HasColumnName("s_ts_customer_phone");
            entity.Property(e => e.STsDate)
                .HasColumnType("datetime")
                .HasColumnName("s_ts_date");
            entity.Property(e => e.STsDocumentNo)
                .HasMaxLength(64)
                .HasColumnName("s_ts_document_no");
            entity.Property(e => e.STsRemark)
                .HasMaxLength(1000)
                .HasColumnName("s_ts_remark");
            entity.Property(e => e.STsStatus)
                .HasMaxLength(64)
                .HasColumnName("s_ts_status");
            entity.Property(e => e.STsType)
                .HasMaxLength(64)
                .HasColumnName("s_ts_type");
        });

        modelBuilder.Entity<TransactionTax>(entity =>
        {
            entity.HasKey(e => e.TsxId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_TAX", "sls");

            entity.HasIndex(e => new { e.TsxTsId, e.TsxTaxId }, "tsx_ts_tax_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TsxId).HasColumnName("tsx_id");
            entity.Property(e => e.TsxOrgId).HasColumnName("tsx_org_id");
            entity.Property(e => e.TsxTaxId).HasColumnName("tsx_tax_id");
            entity.Property(e => e.TsxTaxValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsx_tax_value");
            entity.Property(e => e.TsxTaxableAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsx_taxable_amount");
            entity.Property(e => e.TsxTsId).HasColumnName("tsx_ts_id");

            entity.HasOne(d => d.TsxTax).WithMany(p => p.TransactionTaxes)
                .HasForeignKey(d => d.TsxTaxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSX_REF_TAX");

            entity.HasOne(d => d.TsxTs).WithMany(p => p.TransactionTaxes)
                .HasForeignKey(d => d.TsxTsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSX_REF_TS");
        });

        modelBuilder.Entity<TransactionType>(entity =>
        {
            entity.HasKey(e => e.TtId)
                .HasName("PK_TRANSACTION_TYPE_1")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTION_TYPE", "mforce");

            entity.Property(e => e.TtId)
                .ValueGeneratedNever()
                .HasColumnName("tt_id");
            entity.Property(e => e.TtAllowCustDiscountChange).HasColumnName("tt_allow_cust_discount_change");
            entity.Property(e => e.TtAllowDiscountChange).HasColumnName("tt_allow_discount_change");
            entity.Property(e => e.TtAllowFreeGood).HasColumnName("tt_allow_free_good");
            entity.Property(e => e.TtAllowOverstock).HasColumnName("tt_allow_overstock");
            entity.Property(e => e.TtApplyAdjustment).HasColumnName("tt_apply_adjustment");
            entity.Property(e => e.TtApplyConstraints).HasColumnName("tt_apply_constraints");
            entity.Property(e => e.TtApplyPromotion).HasColumnName("tt_apply_promotion");
            entity.Property(e => e.TtBeId).HasColumnName("tt_be_id");
            entity.Property(e => e.TtCdIdRit).HasColumnName("tt_cd_id_rit");
            entity.Property(e => e.TtCheckCreditLimit).HasColumnName("tt_check_credit_limit");
            entity.Property(e => e.TtCode)
                .HasMaxLength(32)
                .HasColumnName("tt_code");
            entity.Property(e => e.TtColWidthDetail)
                .HasMaxLength(512)
                .HasColumnName("tt_col_width_detail");
            entity.Property(e => e.TtColWidthSearch)
                .HasMaxLength(512)
                .HasColumnName("tt_col_width_search");
            entity.Property(e => e.TtCollect).HasColumnName("tt_collect");
            entity.Property(e => e.TtDate1)
                .HasColumnType("datetime")
                .HasColumnName("tt_date1");
            entity.Property(e => e.TtDate2)
                .HasColumnType("datetime")
                .HasColumnName("tt_date2");
            entity.Property(e => e.TtDescription)
                .HasMaxLength(255)
                .HasColumnName("tt_description");
            entity.Property(e => e.TtDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("tt_description_ar");
            entity.Property(e => e.TtDisplaySearchCriteria).HasColumnName("tt_display_search_criteria");
            entity.Property(e => e.TtExportFlag)
                .HasDefaultValue(-1)
                .HasColumnName("tt_export_flag");
            entity.Property(e => e.TtGenerateDueTrans).HasColumnName("tt_generate_due_trans");
            entity.Property(e => e.TtHeaderExportCode)
                .HasMaxLength(64)
                .HasColumnName("tt_header_export_code");
            entity.Property(e => e.TtImageIndex).HasColumnName("tt_image_index");
            entity.Property(e => e.TtLineExportCode)
                .HasMaxLength(64)
                .HasColumnName("tt_line_export_code");
            entity.Property(e => e.TtManageLotExprod).HasColumnName("tt_manage_lot_exprod");
            entity.Property(e => e.TtMessageCode)
                .HasMaxLength(32)
                .HasColumnName("tt_message_code");
            entity.Property(e => e.TtNum1)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tt_num1");
            entity.Property(e => e.TtNum2)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tt_num2");
            entity.Property(e => e.TtNum3)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tt_num3");
            entity.Property(e => e.TtNumberOfDocumentPrint).HasColumnName("tt_number_of_document_print");
            entity.Property(e => e.TtPrintingCode)
                .HasMaxLength(50)
                .HasColumnName("tt_printing_code");
            entity.Property(e => e.TtText1)
                .HasMaxLength(128)
                .HasColumnName("tt_text1");
            entity.Property(e => e.TtText2)
                .HasMaxLength(128)
                .HasColumnName("tt_text2");
            entity.Property(e => e.TtText3)
                .HasMaxLength(128)
                .HasColumnName("tt_text3");
            entity.Property(e => e.TtUgmId).HasColumnName("tt_ugm_id");
            entity.Property(e => e.TtUomColWidth)
                .HasMaxLength(512)
                .HasColumnName("tt_uom_col_width");
            entity.Property(e => e.TtUomSelectCode)
                .HasMaxLength(50)
                .HasColumnName("tt_uom_select_code");
            entity.Property(e => e.TtUpdateStock).HasColumnName("tt_update_stock");
        });

        modelBuilder.Entity<TransactionTypeOption>(entity =>
        {
            entity.HasKey(e => e.TtoId).HasFillFactor(90);

            entity.ToTable("TRANSACTION_TYPE_OPTION", "mforce");

            entity.Property(e => e.TtoId)
                .ValueGeneratedNever()
                .HasColumnName("tto_id");
            entity.Property(e => e.TtoAllowDiscountChange).HasColumnName("tto_allow_discount_change");
            entity.Property(e => e.TtoAllowFreeGood).HasColumnName("tto_allow_free_good");
            entity.Property(e => e.TtoAllowOverstock).HasColumnName("tto_allow_overstock");
            entity.Property(e => e.TtoApplyConstraints).HasColumnName("tto_apply_constraints");
            entity.Property(e => e.TtoCalculateTotalFactor)
                .HasDefaultValue(1)
                .HasColumnName("tto_calculate_total_factor");
            entity.Property(e => e.TtoCheckStockAvailability)
                .HasDefaultValue(1)
                .HasColumnName("tto_check_stock_availability");
            entity.Property(e => e.TtoCode)
                .HasMaxLength(32)
                .HasColumnName("tto_code");
            entity.Property(e => e.TtoColWidthDetail)
                .HasMaxLength(512)
                .HasColumnName("tto_col_width_detail");
            entity.Property(e => e.TtoColWidthSearch)
                .HasMaxLength(512)
                .HasColumnName("tto_col_width_search");
            entity.Property(e => e.TtoDate1)
                .HasColumnType("datetime")
                .HasColumnName("tto_date1");
            entity.Property(e => e.TtoDate2)
                .HasColumnType("datetime")
                .HasColumnName("tto_date2");
            entity.Property(e => e.TtoDescription)
                .HasMaxLength(255)
                .HasColumnName("tto_description");
            entity.Property(e => e.TtoDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("tto_description_ar");
            entity.Property(e => e.TtoManageLotExprod)
                .HasDefaultValue(-1)
                .HasColumnName("tto_manage_lot_exprod");
            entity.Property(e => e.TtoNum1)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num1");
            entity.Property(e => e.TtoNum2)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num2");
            entity.Property(e => e.TtoNum3)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num3");
            entity.Property(e => e.TtoNum4)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num4");
            entity.Property(e => e.TtoNum5)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num5");
            entity.Property(e => e.TtoNum6)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num6");
            entity.Property(e => e.TtoNum7)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num7");
            entity.Property(e => e.TtoNum8)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num8");
            entity.Property(e => e.TtoNum9)
                .HasColumnType("numeric(18, 5)")
                .HasColumnName("tto_num9");
            entity.Property(e => e.TtoQuantityMultiplier)
                .HasDefaultValue(1)
                .HasColumnName("tto_quantity_multiplier");
            entity.Property(e => e.TtoSaleable)
                .HasDefaultValue(1)
                .HasColumnName("tto_saleable");
            entity.Property(e => e.TtoText1)
                .HasMaxLength(128)
                .HasColumnName("tto_text1");
            entity.Property(e => e.TtoText2)
                .HasMaxLength(128)
                .HasColumnName("tto_text2");
            entity.Property(e => e.TtoText3)
                .HasMaxLength(128)
                .HasColumnName("tto_text3");
            entity.Property(e => e.TtoTtId).HasColumnName("tto_tt_id");
            entity.Property(e => e.TtoUomColWidth)
                .HasMaxLength(512)
                .HasColumnName("tto_uom_col_width");
            entity.Property(e => e.TtoUomSelectCode)
                .HasMaxLength(50)
                .HasColumnName("tto_uom_select_code");
            entity.Property(e => e.TtoUpdateStock)
                .HasDefaultValue(1)
                .HasColumnName("tto_update_stock");

            entity.HasOne(d => d.TtoTt).WithMany(p => p.TransactionTypeOptions)
                .HasForeignKey(d => d.TtoTtId)
                .HasConstraintName("FK_TTO_REF_TT");
        });

        modelBuilder.Entity<TransactionitemTax>(entity =>
        {
            entity.HasKey(e => e.TsixId).HasFillFactor(90);

            entity.ToTable("TRANSACTIONITEM_TAX", "sls");

            entity.HasIndex(e => new { e.TsixTsiId, e.TsixTaxId }, "tsix_tsi_tax_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TsixId).HasColumnName("tsix_id");
            entity.Property(e => e.TsixOrgId).HasColumnName("tsix_org_id");
            entity.Property(e => e.TsixTaxAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsix_tax_amount");
            entity.Property(e => e.TsixTaxId).HasColumnName("tsix_tax_id");
            entity.Property(e => e.TsixTaxRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsix_tax_rate");
            entity.Property(e => e.TsixTsiId).HasColumnName("tsix_tsi_id");

            entity.HasOne(d => d.TsixTax).WithMany(p => p.TransactionitemTaxes)
                .HasForeignKey(d => d.TsixTaxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSIX_REF_TAX");

            entity.HasOne(d => d.TsixTsi).WithMany(p => p.TransactionitemTaxes)
                .HasForeignKey(d => d.TsixTsiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSIX_REF_TSI");
        });

        modelBuilder.Entity<Transactionstatus>(entity =>
        {
            entity.HasKey(e => e.TssId)
                .HasName("PK_TRANSACTION_STATUS")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONSTATUS", "sls");

            entity.HasIndex(e => e.TssCode, "mss_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TssId).HasColumnName("tss_id");
            entity.Property(e => e.TssCausesValidation)
                .HasDefaultValue((short)1)
                .HasColumnName("tss_causes_validation");
            entity.Property(e => e.TssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tss_code");
            entity.Property(e => e.TssConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tss_confirmation_code");
            entity.Property(e => e.TssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan1");
            entity.Property(e => e.TssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan2");
            entity.Property(e => e.TssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan3");
            entity.Property(e => e.TssLabelCode)
                .HasMaxLength(64)
                .HasColumnName("tss_label_code");
            entity.Property(e => e.TssOrder)
                .HasDefaultValue(1)
                .HasColumnName("tss_order");
            entity.Property(e => e.TssStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tss_style");
        });

        modelBuilder.Entity<TransactionstatusTransition>(entity =>
        {
            entity.HasKey(e => e.TsstId)
                .HasName("PK_TRANSACTION_STATUS_TRANSITION")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONSTATUS_TRANSITION", "sls");

            entity.HasIndex(e => new { e.TsstTstId, e.TsstTssIdFrom, e.TsstTssIdTo }, "tsst_tst_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TsstId).HasColumnName("tsst_id");
            entity.Property(e => e.TsstAutoAllocateLxp)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsst_auto_allocate_lxp");
            entity.Property(e => e.TsstCheckAvailability).HasColumnName("tsst_check_availability");
            entity.Property(e => e.TsstCheckCreditLimit)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsst_check_credit_limit");
            entity.Property(e => e.TsstExportData)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsst_export_data");
            entity.Property(e => e.TsstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("tsst_extra_code");
            entity.Property(e => e.TsstLxpRequired).HasColumnName("tsst_lxp_required");
            entity.Property(e => e.TsstManageDueInvoice).HasColumnName("tsst_manage_due_invoice");
            entity.Property(e => e.TsstSilentMode)
                .HasDefaultValue(-1)
                .HasColumnName("tsst_silent_mode");
            entity.Property(e => e.TsstTsUsIsOwner)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsst_ts_us_is_owner");
            entity.Property(e => e.TsstTssIdFrom).HasColumnName("tsst_tss_id_from");
            entity.Property(e => e.TsstTssIdGenerate).HasColumnName("tsst_tss_id_generate");
            entity.Property(e => e.TsstTssIdTo).HasColumnName("tsst_tss_id_to");
            entity.Property(e => e.TsstTstId).HasColumnName("tsst_tst_id");
            entity.Property(e => e.TsstTstIdGenerate).HasColumnName("tsst_tst_id_generate");
            entity.Property(e => e.TsstUpdateQuantity).HasColumnName("tsst_update_quantity");

            entity.HasOne(d => d.TsstTssIdFromNavigation).WithMany(p => p.TransactionstatusTransitionTsstTssIdFromNavigations)
                .HasForeignKey(d => d.TsstTssIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSST_REF_TSS_FROM");

            entity.HasOne(d => d.TsstTssIdGenerateNavigation).WithMany(p => p.TransactionstatusTransitionTsstTssIdGenerateNavigations)
                .HasForeignKey(d => d.TsstTssIdGenerate)
                .HasConstraintName("FK_TSST_REF_TSS_GEN");

            entity.HasOne(d => d.TsstTssIdToNavigation).WithMany(p => p.TransactionstatusTransitionTsstTssIdToNavigations)
                .HasForeignKey(d => d.TsstTssIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSST_REF_TSS_TO");

            entity.HasOne(d => d.TsstTst).WithMany(p => p.TransactionstatusTransitionTsstTsts)
                .HasForeignKey(d => d.TsstTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSST_REF_TST");

            entity.HasOne(d => d.TsstTstIdGenerateNavigation).WithMany(p => p.TransactionstatusTransitionTsstTstIdGenerateNavigations)
                .HasForeignKey(d => d.TsstTstIdGenerate)
                .HasConstraintName("FK_TSST_REF_TST_GEN");
        });

        modelBuilder.Entity<TransactionstatusTransitionBu>(entity =>
        {
            entity.HasKey(e => e.TstbId).HasFillFactor(90);

            entity.ToTable("TRANSACTIONSTATUS_TRANSITION_BU", "sls");

            entity.HasIndex(e => new { e.TstbTsstId, e.TstbBuId }, "tstb_tsst_bu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TstbId).HasColumnName("tstb_id");
            entity.Property(e => e.TstbBuId).HasColumnName("tstb_bu_id");
            entity.Property(e => e.TstbTsstId).HasColumnName("tstb_tsst_id");

            entity.HasOne(d => d.TstbBu).WithMany(p => p.TransactionstatusTransitionBus)
                .HasForeignKey(d => d.TstbBuId)
                .HasConstraintName("FK_TSTB_REF_BU");

            entity.HasOne(d => d.TstbTsst).WithMany(p => p.TransactionstatusTransitionBus)
                .HasForeignKey(d => d.TstbTsstId)
                .HasConstraintName("FK_TSTB_REF_TSST");
        });

        modelBuilder.Entity<TransactionstatusTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.TstpId)
                .HasName("PK_TRANSACTIONSTATUS_TRANSITIO")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONSTATUS_TRANSITION_PROFILE", "sls");

            entity.HasIndex(e => new { e.TstpTsstId, e.TstpPrId }, "tstp_tsst_pr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TstpId).HasColumnName("tstp_id");
            entity.Property(e => e.TstpPrId).HasColumnName("tstp_pr_id");
            entity.Property(e => e.TstpTsstId).HasColumnName("tstp_tsst_id");

            entity.HasOne(d => d.TstpPr).WithMany(p => p.TransactionstatusTransitionProfiles)
                .HasForeignKey(d => d.TstpPrId)
                .HasConstraintName("FK_TSTP_REF_PR");

            entity.HasOne(d => d.TstpTsst).WithMany(p => p.TransactionstatusTransitionProfiles)
                .HasForeignKey(d => d.TstpTsstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSTP_REF_TSST");
        });

        modelBuilder.Entity<TransactionstatusUiGenericpage>(entity =>
        {
            entity.HasKey(e => e.TgId)
                .HasName("PK_TRANSACTIONSTATUS_UI_GENERI")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONSTATUS_UI_GENERICPAGE", "sls");

            entity.HasIndex(e => new { e.TgTssId, e.TgGpId }, "tg_tss_gp_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TgId).HasColumnName("tg_id");
            entity.Property(e => e.TgGpId).HasColumnName("tg_gp_id");
            entity.Property(e => e.TgTssId).HasColumnName("tg_tss_id");
        });

        modelBuilder.Entity<Transactiontype1>(entity =>
        {
            entity.HasKey(e => e.TstId)
                .HasName("PK_TRANSACTION_TYPE")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONTYPE", "sls");

            entity.HasIndex(e => e.TstCode, "tst_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TstId).HasColumnName("tst_id");
            entity.Property(e => e.TstAccountingPost).HasColumnName("tst_accounting_post");
            entity.Property(e => e.TstAllowChangeDelvQty).HasColumnName("tst_allow_change_delv_qty");
            entity.Property(e => e.TstAllowChangeOrdQty).HasColumnName("tst_allow_change_ord_qty");
            entity.Property(e => e.TstAllowDiscountAmountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tst_allow_discount_amount_change");
            entity.Property(e => e.TstAllowDiscountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tst_allow_discount_change");
            entity.Property(e => e.TstAllowPriceChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tst_allow_price_change");
            entity.Property(e => e.TstApplyConstraints).HasColumnName("tst_apply_constraints");
            entity.Property(e => e.TstApplyPromotion).HasColumnName("tst_apply_promotion");
            entity.Property(e => e.TstAutoCreateFromSource).HasColumnName("tst_auto_create_from_source");
            entity.Property(e => e.TstAutoSequence).HasColumnName("tst_auto_sequence");
            entity.Property(e => e.TstCdIdTsg).HasColumnName("tst_cd_id_tsg");
            entity.Property(e => e.TstCheckCreditLimit).HasColumnName("tst_check_credit_limit");
            entity.Property(e => e.TstCheckQuantity).HasColumnName("tst_check_quantity");
            entity.Property(e => e.TstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("tst_code");
            entity.Property(e => e.TstCollect).HasColumnName("tst_collect");
            entity.Property(e => e.TstDefaultItemDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tst_default_item_discount");
            entity.Property(e => e.TstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan1");
            entity.Property(e => e.TstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan2");
            entity.Property(e => e.TstDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan3");
            entity.Property(e => e.TstDqIdWhsSelection).HasColumnName("tst_dq_id_whs_selection");
            entity.Property(e => e.TstDqItemSelection).HasColumnName("tst_dq_item_selection");
            entity.Property(e => e.TstDqUomSelection).HasColumnName("tst_dq_uom_selection");
            entity.Property(e => e.TstGenerateDueInvoice).HasColumnName("tst_generate_due_invoice");
            entity.Property(e => e.TstHoldQuantity).HasColumnName("tst_hold_quantity");
            entity.Property(e => e.TstManageExpiryDate).HasColumnName("tst_manage_expiry_date");
            entity.Property(e => e.TstManageLot).HasColumnName("tst_manage_lot");
            entity.Property(e => e.TstManageProductionDate).HasColumnName("tst_manage_production_date");
            entity.Property(e => e.TstManageSerial).HasColumnName("tst_manage_serial");
            entity.Property(e => e.TstMvtIdSource).HasColumnName("tst_mvt_id_source");
            entity.Property(e => e.TstNameLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan1");
            entity.Property(e => e.TstNameLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan2");
            entity.Property(e => e.TstNameLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan3");
            entity.Property(e => e.TstNotes)
                .HasMaxLength(50)
                .HasColumnName("tst_notes");
            entity.Property(e => e.TstPrintCopies).HasColumnName("tst_print_copies");
            entity.Property(e => e.TstPrintingCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tst_printing_code");
            entity.Property(e => e.TstQuantityMultiplier).HasColumnName("tst_quantity_multiplier");
            entity.Property(e => e.TstReturntype)
                .HasMaxLength(255)
                .HasColumnName("tst_returntype");
            entity.Property(e => e.TstShowFreecomment).HasColumnName("tst_show_freecomment");
            entity.Property(e => e.TstShowFreereason).HasColumnName("tst_show_freereason");
            entity.Property(e => e.TstShowLinkedTransactionNumber).HasColumnName("tst_show_linked_transaction_number");
            entity.Property(e => e.TstShowPrice).HasColumnName("tst_show_price");
            entity.Property(e => e.TstShowdeliveryqty).HasColumnName("tst_showdeliveryqty");
            entity.Property(e => e.TstShowreturntype).HasColumnName("tst_showreturntype");
            entity.Property(e => e.TstShowtax).HasColumnName("tst_showtax");
            entity.Property(e => e.TstStatusFcCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tst_status_fc_code");
            entity.Property(e => e.TstTstIdNew).HasColumnName("tst_tst_id_new");
            entity.Property(e => e.TstTstIdSource).HasColumnName("tst_tst_id_source");
            entity.Property(e => e.TstUpdateCost).HasColumnName("tst_update_cost");
            entity.Property(e => e.TstUpdateQuantity).HasColumnName("tst_update_quantity");

            entity.HasOne(d => d.TstCdIdTsgNavigation).WithMany(p => p.Transactiontype1s)
                .HasForeignKey(d => d.TstCdIdTsg)
                .HasConstraintName("FK_TST_REF_CD_TSG");
        });

        modelBuilder.Entity<TransactiontypeOption1>(entity =>
        {
            entity.HasKey(e => e.TstoId)
                .HasName("PK_TRANSACTION_TYPE_OPTION")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONTYPE_OPTION", "sls");

            entity.HasIndex(e => e.TstoTstId, "tsto_tst_idx").HasFillFactor(90);

            entity.Property(e => e.TstoId).HasColumnName("tsto_id");
            entity.Property(e => e.TstoAllowDiscountAmountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsto_allow_discount_amount_change");
            entity.Property(e => e.TstoAllowDiscountChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsto_allow_discount_change");
            entity.Property(e => e.TstoAllowPriceChange)
                .HasDefaultValue((short)-1)
                .HasColumnName("tsto_allow_price_change");
            entity.Property(e => e.TstoCheckQuantity).HasColumnName("tsto_check_quantity");
            entity.Property(e => e.TstoCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tsto_code");
            entity.Property(e => e.TstoDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tsto_description_lan1");
            entity.Property(e => e.TstoDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tsto_description_lan2");
            entity.Property(e => e.TstoDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("tsto_description_lan3");
            entity.Property(e => e.TstoHoldQuantity).HasColumnName("tsto_hold_quantity");
            entity.Property(e => e.TstoManageExpiryDate).HasColumnName("tsto_manage_expiry_date");
            entity.Property(e => e.TstoManageLot).HasColumnName("tsto_manage_lot");
            entity.Property(e => e.TstoManageProductionDate).HasColumnName("tsto_manage_production_date");
            entity.Property(e => e.TstoManageSerial).HasColumnName("tsto_manage_serial");
            entity.Property(e => e.TstoQuantityMultiplier).HasColumnName("tsto_quantity_multiplier");
            entity.Property(e => e.TstoShowPrice).HasColumnName("tsto_show_price");
            entity.Property(e => e.TstoTstId).HasColumnName("tsto_tst_id");
            entity.Property(e => e.TstoUpdateQuantity).HasColumnName("tsto_update_quantity");

            entity.HasOne(d => d.TstoTst).WithMany(p => p.TransactiontypeOption1s)
                .HasForeignKey(d => d.TstoTstId)
                .HasConstraintName("FK_TSTO_REF_TST");
        });

        modelBuilder.Entity<TransactiontypeSequence>(entity =>
        {
            entity.HasKey(e => e.TssId)
                .HasName("PK_TRANSACTION_SEQUENCE")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONTYPE_SEQUENCE", "sls");

            entity.HasIndex(e => new { e.TssBuId, e.TssUsId, e.TssSqId, e.TssTstId, e.TssOrder }, "mvt_bu_us_mvt_sq_ord_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TssId).HasColumnName("tss_id");
            entity.Property(e => e.TssActive)
                .HasDefaultValue(1)
                .HasColumnName("tss_active");
            entity.Property(e => e.TssBuId).HasColumnName("tss_bu_id");
            entity.Property(e => e.TssLength).HasColumnName("tss_length");
            entity.Property(e => e.TssOrder)
                .HasDefaultValue((short)1)
                .HasColumnName("tss_order");
            entity.Property(e => e.TssPrefix)
                .HasMaxLength(16)
                .HasColumnName("tss_prefix");
            entity.Property(e => e.TssSqId).HasColumnName("tss_sq_id");
            entity.Property(e => e.TssTstId).HasColumnName("tss_tst_id");
            entity.Property(e => e.TssUsId).HasColumnName("tss_us_id");

            entity.HasOne(d => d.TssSq).WithMany(p => p.TransactiontypeSequences)
                .HasForeignKey(d => d.TssSqId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_REF_SQ");

            entity.HasOne(d => d.TssTst).WithMany(p => p.TransactiontypeSequences)
                .HasForeignKey(d => d.TssTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_REF_TST");
        });

        modelBuilder.Entity<TransactiontypeTax>(entity =>
        {
            entity.HasKey(e => e.TstxId).HasFillFactor(90);

            entity.ToTable("TRANSACTIONTYPE_TAX", "sls");

            entity.HasIndex(e => new { e.TstxTstId, e.TstxTaxId, e.TstxBuId }, "tstx_bu_tst_tax_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TstxId).HasColumnName("tstx_id");
            entity.Property(e => e.TstxBuId).HasColumnName("tstx_bu_id");
            entity.Property(e => e.TstxTaxId).HasColumnName("tstx_tax_id");
            entity.Property(e => e.TstxTstId).HasColumnName("tstx_tst_id");

            entity.HasOne(d => d.TstxBu).WithMany(p => p.TransactiontypeTaxes)
                .HasForeignKey(d => d.TstxBuId)
                .HasConstraintName("FK_TSTX_REF_BU");

            entity.HasOne(d => d.TstxTax).WithMany(p => p.TransactiontypeTaxes)
                .HasForeignKey(d => d.TstxTaxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSTX_REF_TAX");

            entity.HasOne(d => d.TstxTst).WithMany(p => p.TransactiontypeTaxes)
                .HasForeignKey(d => d.TstxTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSTX_REF_TST");
        });

        modelBuilder.Entity<TransactiontypeUiGenericpage>(entity =>
        {
            entity.HasKey(e => e.TsgpId)
                .HasName("PK_TRANSACTIONTYPE_UI_GENERICP")
                .HasFillFactor(90);

            entity.ToTable("TRANSACTIONTYPE_UI_GENERICPAGE", "sls");

            entity.HasIndex(e => new { e.TsgpTstId, e.TsgpGpId }, "tsgp_tst_gp_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TsgpId).HasColumnName("tsgp_id");
            entity.Property(e => e.TsgpGpId).HasColumnName("tsgp_gp_id");
            entity.Property(e => e.TsgpTstId).HasColumnName("tsgp_tst_id");

            entity.HasOne(d => d.TsgpGp).WithMany(p => p.TransactiontypeUiGenericpages)
                .HasForeignKey(d => d.TsgpGpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSGP_REF_GP");

            entity.HasOne(d => d.TsgpTst).WithMany(p => p.TransactiontypeUiGenericpages)
                .HasForeignKey(d => d.TsgpTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSGP_REF_TST");
        });

        modelBuilder.Entity<Transactiontypestatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TRANSACTIONTYPESTATUS", "sls");

            entity.HasIndex(e => new { e.TtsTstId, e.TtsTssId }, "tts_tst_tss_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.TtsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("tts_id");
            entity.Property(e => e.TtsReserveStock).HasColumnName("tts_reserve_stock");
            entity.Property(e => e.TtsTssId).HasColumnName("tts_tss_id");
            entity.Property(e => e.TtsTstId).HasColumnName("tts_tst_id");
        });

        modelBuilder.Entity<TransferDetailSnc>(entity =>
        {
            entity.HasKey(e => new { e.STrdId, e.STrdSmId, e.STrdVersion }).HasFillFactor(90);

            entity.ToTable("TRANSFER_DETAIL_SNC", "syn");

            entity.Property(e => e.STrdId).HasColumnName("s_trd_id");
            entity.Property(e => e.STrdSmId).HasColumnName("s_trd_sm_id");
            entity.Property(e => e.STrdVersion)
                .HasMaxLength(25)
                .HasColumnName("s_trd_version");
            entity.Property(e => e.STrdExpiryDate)
                .HasMaxLength(50)
                .HasColumnName("s_trd_expiry_date");
            entity.Property(e => e.STrdIsCreated).HasColumnName("s_trd_is_created");
            entity.Property(e => e.STrdLotNo)
                .HasMaxLength(50)
                .HasColumnName("s_trd_lot_no");
            entity.Property(e => e.STrdPackQty).HasColumnName("s_trd_pack_qty");
            entity.Property(e => e.STrdPrId).HasColumnName("s_trd_pr_id");
            entity.Property(e => e.STrdSynched).HasColumnName("s_trd_synched");
            entity.Property(e => e.STrdTotalQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_trd_total_qty");
            entity.Property(e => e.STrdTrId).HasColumnName("s_trd_tr_id");
            entity.Property(e => e.STrdTrUid)
                .HasMaxLength(128)
                .HasColumnName("s_trd_tr_uid");
            entity.Property(e => e.STrdUnitPerPack).HasColumnName("s_trd_unit_per_pack");
            entity.Property(e => e.STrdUnitQty)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_trd_unit_qty");
        });

        modelBuilder.Entity<TransferOrderDetailsSnc>(entity =>
        {
            entity.HasKey(e => new { e.STodId, e.STodSmId, e.STodVersion }).HasFillFactor(90);

            entity.ToTable("TRANSFER_ORDER_DETAILS_SNC", "syn");

            entity.Property(e => e.STodId).HasColumnName("s_tod_id");
            entity.Property(e => e.STodSmId)
                .HasMaxLength(32)
                .HasColumnName("s_tod_sm_id");
            entity.Property(e => e.STodVersion)
                .HasMaxLength(32)
                .HasColumnName("s_tod_version");
            entity.Property(e => e.STodExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("s_tod_expiry_date");
            entity.Property(e => e.STodIsCreated).HasColumnName("s_tod_is_created");
            entity.Property(e => e.STodLotNo)
                .HasMaxLength(32)
                .HasColumnName("s_tod_lot_no");
            entity.Property(e => e.STodPrId).HasColumnName("s_tod_pr_id");
            entity.Property(e => e.STodProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("s_tod_production_date");
            entity.Property(e => e.STodQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("s_tod_quantity");
            entity.Property(e => e.STodSynched).HasColumnName("s_tod_synched");
            entity.Property(e => e.STodToId).HasColumnName("s_tod_to_id");
            entity.Property(e => e.STodUomId).HasColumnName("s_tod_uom_id");
        });

        modelBuilder.Entity<TransferOrderSnc>(entity =>
        {
            entity.HasKey(e => new { e.SToId, e.SToSmId, e.SToVersion }).HasFillFactor(90);

            entity.ToTable("TRANSFER_ORDER_SNC", "syn");

            entity.Property(e => e.SToId).HasColumnName("s_to_id");
            entity.Property(e => e.SToSmId)
                .HasMaxLength(32)
                .HasColumnName("s_to_sm_id");
            entity.Property(e => e.SToVersion)
                .HasMaxLength(32)
                .HasColumnName("s_to_version");
            entity.Property(e => e.SToApprovalDate)
                .HasColumnType("datetime")
                .HasColumnName("s_to_approval_date");
            entity.Property(e => e.SToBeId).HasColumnName("s_to_be_id");
            entity.Property(e => e.SToCdIdTos).HasColumnName("s_to_cd_id_tos");
            entity.Property(e => e.SToCdIdTrs).HasColumnName("s_to_cd_id_trs");
            entity.Property(e => e.SToCode)
                .HasMaxLength(32)
                .HasColumnName("s_to_code");
            entity.Property(e => e.SToComment)
                .HasMaxLength(1000)
                .HasColumnName("s_to_comment");
            entity.Property(e => e.SToDate)
                .HasColumnType("datetime")
                .HasColumnName("s_to_date");
            entity.Property(e => e.SToIsCreated).HasColumnName("s_to_is_created");
            entity.Property(e => e.SToIsExecuted).HasColumnName("s_to_is_executed");
            entity.Property(e => e.SToSignFilename)
                .HasMaxLength(255)
                .HasColumnName("s_to_sign_filename");
            entity.Property(e => e.SToStatus).HasColumnName("s_to_status");
            entity.Property(e => e.SToStatusExp)
                .HasMaxLength(32)
                .HasColumnName("s_to_status_exp");
            entity.Property(e => e.SToSynched).HasColumnName("s_to_synched");
            entity.Property(e => e.SToUsrIdApprove).HasColumnName("s_to_usr_id_approve");
            entity.Property(e => e.SToUsrIdCreated).HasColumnName("s_to_usr_id_created");
            entity.Property(e => e.SToUsrIdDriver).HasColumnName("s_to_usr_id_driver");
            entity.Property(e => e.SToWhId).HasColumnName("s_to_wh_id");
            entity.Property(e => e.SToWhIdFrom).HasColumnName("s_to_wh_id_from");
        });

        modelBuilder.Entity<TransferSnc>(entity =>
        {
            entity.HasKey(e => new { e.STrId, e.STrSmId, e.STrVersion }).HasFillFactor(90);

            entity.ToTable("TRANSFER_SNC", "syn");

            entity.Property(e => e.STrId).HasColumnName("s_tr_id");
            entity.Property(e => e.STrSmId).HasColumnName("s_tr_sm_id");
            entity.Property(e => e.STrVersion)
                .HasMaxLength(25)
                .HasColumnName("s_tr_version");
            entity.Property(e => e.STrCode)
                .HasMaxLength(16)
                .HasColumnName("s_tr_code");
            entity.Property(e => e.STrDate)
                .HasColumnType("datetime")
                .HasColumnName("s_tr_date");
            entity.Property(e => e.STrInOut)
                .HasMaxLength(16)
                .HasColumnName("s_tr_in_out");
            entity.Property(e => e.STrIsCreated).HasColumnName("s_tr_is_created");
            entity.Property(e => e.STrRemarks)
                .HasMaxLength(100)
                .HasColumnName("s_tr_remarks");
            entity.Property(e => e.STrSignFilename)
                .HasMaxLength(100)
                .HasColumnName("s_tr_sign_filename");
            entity.Property(e => e.STrSmIdFrom).HasColumnName("s_tr_sm_id_from");
            entity.Property(e => e.STrSmIdTo).HasColumnName("s_tr_sm_id_to");
            entity.Property(e => e.STrSynched).HasColumnName("s_tr_synched");
            entity.Property(e => e.STrUid)
                .HasMaxLength(128)
                .HasColumnName("s_tr_uid");
            entity.Property(e => e.STrWhIdFrom).HasColumnName("s_tr_wh_id_from");
            entity.Property(e => e.STrWhIdTo).HasColumnName("s_tr_wh_id_to");
        });

        modelBuilder.Entity<UiCodesc>(entity =>
        {
            entity.HasKey(e => e.UcdId)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("UI_CODESC", "cmn");

            entity.Property(e => e.UcdId).HasColumnName("ucd_id");
            entity.Property(e => e.UcdActive).HasColumnName("ucd_active");
            entity.Property(e => e.UcdBuId).HasColumnName("ucd_bu_id");
            entity.Property(e => e.UcdCdId).HasColumnName("ucd_cd_id");
            entity.Property(e => e.UcdCode).HasColumnName("ucd_code");
            entity.Property(e => e.UcdCreateDate).HasColumnName("ucd_create_date");
            entity.Property(e => e.UcdDate1).HasColumnName("ucd_date1");
            entity.Property(e => e.UcdDate1DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_date1_description_lan1");
            entity.Property(e => e.UcdDate1DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_date1_description_lan2");
            entity.Property(e => e.UcdDate1DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_date1_description_lan3");
            entity.Property(e => e.UcdDate2).HasColumnName("ucd_date2");
            entity.Property(e => e.UcdDate2DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_date2_description_lan1");
            entity.Property(e => e.UcdDate2DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_date2_description_lan2");
            entity.Property(e => e.UcdDate2DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_date2_description_lan3");
            entity.Property(e => e.UcdDescriptionLan1).HasColumnName("ucd_description_lan1");
            entity.Property(e => e.UcdDescriptionLan2).HasColumnName("ucd_description_lan2");
            entity.Property(e => e.UcdDescriptionLan3).HasColumnName("ucd_description_lan3");
            entity.Property(e => e.UcdFcCode).HasColumnName("ucd_fc_code");
            entity.Property(e => e.UcdFcId).HasColumnName("ucd_fc_id");
            entity.Property(e => e.UcdHasChildren).HasColumnName("ucd_has_children");
            entity.Property(e => e.UcdIsSystem).HasColumnName("ucd_is_system");
            entity.Property(e => e.UcdLevel).HasColumnName("ucd_level");
            entity.Property(e => e.UcdMdId).HasColumnName("ucd_md_id");
            entity.Property(e => e.UcdModifiedDate).HasColumnName("ucd_modified_date");
            entity.Property(e => e.UcdNum1).HasColumnName("ucd_num1");
            entity.Property(e => e.UcdNum1DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_num1_description_lan1");
            entity.Property(e => e.UcdNum1DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_num1_description_lan2");
            entity.Property(e => e.UcdNum1DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_num1_description_lan3");
            entity.Property(e => e.UcdNum2).HasColumnName("ucd_num2");
            entity.Property(e => e.UcdNum2DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_num2_description_lan1");
            entity.Property(e => e.UcdNum2DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_num2_description_lan2");
            entity.Property(e => e.UcdNum2DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_num2_description_lan3");
            entity.Property(e => e.UcdText1).HasColumnName("ucd_text1");
            entity.Property(e => e.UcdText1DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_text1_description_lan1");
            entity.Property(e => e.UcdText1DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_text1_description_lan2");
            entity.Property(e => e.UcdText1DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_text1_description_lan3");
            entity.Property(e => e.UcdText2).HasColumnName("ucd_text2");
            entity.Property(e => e.UcdText2DescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ucd_text2_description_lan1");
            entity.Property(e => e.UcdText2DescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("ucd_text2_description_lan2");
            entity.Property(e => e.UcdText2DescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("ucd_text2_description_lan3");

            entity.HasOne(d => d.UcdFc).WithMany(p => p.UiCodescs)
                .HasForeignKey(d => d.UcdFcId)
                .HasConstraintName("FK_UCD_REF_FC");
        });

        modelBuilder.Entity<UiGenericPage>(entity =>
        {
            entity.HasKey(e => e.GpId).HasFillFactor(90);

            entity.ToTable("UI_GENERIC_PAGE", "cmn");

            entity.Property(e => e.GpId).HasColumnName("gp_id");
            entity.Property(e => e.GpAction)
                .HasMaxLength(200)
                .HasColumnName("gp_action");
            entity.Property(e => e.GpActionField)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gp_action_field");
            entity.Property(e => e.GpActive).HasColumnName("gp_active");
            entity.Property(e => e.GpAutoLoad).HasColumnName("gp_auto_load");
            entity.Property(e => e.GpCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gp_code");
            entity.Property(e => e.GpMnId).HasColumnName("gp_mn_id");
            entity.Property(e => e.GpObjectid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gp_objectid");
            entity.Property(e => e.GpProcedureName)
                .HasMaxLength(50)
                .HasColumnName("gp_procedure_name");
            entity.Property(e => e.GpRowsPerPage).HasColumnName("gp_rows_per_page");
            entity.Property(e => e.GpTitle)
                .HasMaxLength(50)
                .HasColumnName("gp_title");
            entity.Property(e => e.GpType)
                .HasMaxLength(50)
                .HasColumnName("gp_type");
        });

        modelBuilder.Entity<UiGenericPageAction>(entity =>
        {
            entity.HasKey(e => e.GpaId).HasFillFactor(90);

            entity.ToTable("UI_GENERIC_PAGE_ACTION", "cmn");

            entity.Property(e => e.GpaId).HasColumnName("gpa_id");
            entity.Property(e => e.GpaAction)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("gpa_action");
            entity.Property(e => e.GpaActive).HasColumnName("gpa_active");
            entity.Property(e => e.GpaCdIdAct).HasColumnName("gpa_cd_id_act");
            entity.Property(e => e.GpaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gpa_code");
            entity.Property(e => e.GpaCommand)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("gpa_command");
            entity.Property(e => e.GpaCommandArgument)
                .HasMaxLength(200)
                .HasColumnName("gpa_command_argument");
            entity.Property(e => e.GpaConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_confirmation_code");
            entity.Property(e => e.GpaDescription)
                .HasMaxLength(50)
                .HasColumnName("gpa_description");
            entity.Property(e => e.GpaGpId).HasColumnName("gpa_gp_id");
            entity.Property(e => e.GpaGridImageUrl)
                .HasMaxLength(200)
                .HasColumnName("gpa_grid_image_url");
            entity.Property(e => e.GpaIngridImageUrl)
                .HasMaxLength(200)
                .HasColumnName("gpa_ingrid_image_url");
            entity.Property(e => e.GpaIngridStyle)
                .HasMaxLength(50)
                .HasColumnName("gpa_ingrid_style");
            entity.Property(e => e.GpaIsGridAction).HasColumnName("gpa_is_grid_action");
            entity.Property(e => e.GpaIsIngridAction).HasColumnName("gpa_is_ingrid_action");
            entity.Property(e => e.GpaOrder).HasColumnName("gpa_order");
            entity.Property(e => e.GpaProcedureName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_procedure_name");
            entity.Property(e => e.GpaRequireConfirmation)
                .HasDefaultValue((short)0)
                .HasColumnName("gpa_require_confirmation");
            entity.Property(e => e.GpaStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_style");
            entity.Property(e => e.GpaTitle)
                .HasMaxLength(20)
                .HasColumnName("gpa_title");

            entity.HasOne(d => d.GpaGp).WithMany(p => p.UiGenericPageActions)
                .HasForeignKey(d => d.GpaGpId)
                .HasConstraintName("FK_GPA_REF_GP");
        });

        modelBuilder.Entity<UiGenericPageActionArc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UI_GENERIC_PAGE_ACTION_ARC", "cmn");

            entity.Property(e => e.GpaAction)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("gpa_action");
            entity.Property(e => e.GpaActive).HasColumnName("gpa_active");
            entity.Property(e => e.GpaCdIdAct).HasColumnName("gpa_cd_id_act");
            entity.Property(e => e.GpaCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gpa_code");
            entity.Property(e => e.GpaCommand)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("gpa_command");
            entity.Property(e => e.GpaCommandArgument)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_command_argument");
            entity.Property(e => e.GpaConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_confirmation_code");
            entity.Property(e => e.GpaDescription)
                .HasMaxLength(50)
                .HasColumnName("gpa_description");
            entity.Property(e => e.GpaGpId).HasColumnName("gpa_gp_id");
            entity.Property(e => e.GpaGridImageUrl)
                .HasMaxLength(200)
                .HasColumnName("gpa_grid_image_url");
            entity.Property(e => e.GpaId)
                .ValueGeneratedOnAdd()
                .HasColumnName("gpa_id");
            entity.Property(e => e.GpaIngridImageUrl)
                .HasMaxLength(200)
                .HasColumnName("gpa_ingrid_image_url");
            entity.Property(e => e.GpaIngridStyle)
                .HasMaxLength(50)
                .HasColumnName("gpa_ingrid_style");
            entity.Property(e => e.GpaIsGridAction).HasColumnName("gpa_is_grid_action");
            entity.Property(e => e.GpaIsIngridAction).HasColumnName("gpa_is_ingrid_action");
            entity.Property(e => e.GpaOrder).HasColumnName("gpa_order");
            entity.Property(e => e.GpaProcedureName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_procedure_name");
            entity.Property(e => e.GpaRequireConfirmation).HasColumnName("gpa_require_confirmation");
            entity.Property(e => e.GpaStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gpa_style");
            entity.Property(e => e.GpaTitle)
                .HasMaxLength(20)
                .HasColumnName("gpa_title");
        });

        modelBuilder.Entity<UiGenericPageCriterion>(entity =>
        {
            entity.HasKey(e => e.GpcId).HasFillFactor(90);

            entity.ToTable("UI_GENERIC_PAGE_CRITERIA", "cmn");

            entity.Property(e => e.GpcId).HasColumnName("gpc_id");
            entity.Property(e => e.GpcActive).HasColumnName("gpc_active");
            entity.Property(e => e.GpcAutoValue)
                .HasMaxLength(100)
                .HasColumnName("gpc_auto_value");
            entity.Property(e => e.GpcCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gpc_code");
            entity.Property(e => e.GpcControlAttribute)
                .HasMaxLength(300)
                .HasColumnName("gpc_control_attribute");
            entity.Property(e => e.GpcControlType)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gpc_control_type");
            entity.Property(e => e.GpcDataMember)
                .HasMaxLength(200)
                .HasColumnName("gpc_data_member");
            entity.Property(e => e.GpcDataType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("gpc_data_type");
            entity.Property(e => e.GpcGpId).HasColumnName("gpc_gp_id");
            entity.Property(e => e.GpcOrder)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("gpc_order");
            entity.Property(e => e.GpcTitle)
                .HasMaxLength(50)
                .HasColumnName("gpc_title");

            entity.HasOne(d => d.GpcGp).WithMany(p => p.UiGenericPageCriteria)
                .HasForeignKey(d => d.GpcGpId)
                .HasConstraintName("FK_GPC_REF_GP");
        });

        modelBuilder.Entity<UiInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UI_INVENTORY", "whs");

            entity.Property(e => e.UivBtnApprove).HasColumnName("uiv_btn_approve");
            entity.Property(e => e.UivBtnConfirm).HasColumnName("uiv_btn_confirm");
            entity.Property(e => e.UivBtnVoid).HasColumnName("uiv_btn_void");
            entity.Property(e => e.UivCdIvsId).HasColumnName("uiv_cd_ivs_id");
            entity.Property(e => e.UivCdIvtId).HasColumnName("uiv_cd_ivt_id");
            entity.Property(e => e.UivCreateDate).HasColumnName("uiv_create_date");
            entity.Property(e => e.UivId)
                .ValueGeneratedOnAdd()
                .HasColumnName("uiv_id");
            entity.Property(e => e.UivIvActive).HasColumnName("uiv_iv_active");
            entity.Property(e => e.UivIvCode).HasColumnName("uiv_iv_code");
            entity.Property(e => e.UivIvDateEnd).HasColumnName("uiv_iv_date_end");
            entity.Property(e => e.UivIvDateStart).HasColumnName("uiv_iv_date_start");
            entity.Property(e => e.UivIvItemsQuantity).HasColumnName("uiv_iv_items_quantity");
            entity.Property(e => e.UivIvRemarks).HasColumnName("uiv_iv_remarks");
            entity.Property(e => e.UivModifiedDate).HasColumnName("uiv_modified_date");
            entity.Property(e => e.UtsBtnNew).HasColumnName("uts_btn_new");
            entity.Property(e => e.UtsBtnSubmit).HasColumnName("uts_btn_submit");
        });

        modelBuilder.Entity<UiMovement>(entity =>
        {
            entity.HasKey(e => e.UmvId).HasFillFactor(90);

            entity.ToTable("UI_MOVEMENT", "sls");

            entity.HasIndex(e => new { e.UmvMvtId, e.UmvMssId }, "idx_umv_mvt_mss")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UmvId).HasColumnName("umv_id");
            entity.Property(e => e.UmvBtnAddDelivery).HasColumnName("umv_btn_add_delivery");
            entity.Property(e => e.UmvBtnAddItem).HasColumnName("umv_btn_add_item");
            entity.Property(e => e.UmvBtnApprove).HasColumnName("umv_btn_approve");
            entity.Property(e => e.UmvBtnAutoAllocate).HasColumnName("umv_btn_auto_allocate");
            entity.Property(e => e.UmvBtnReject).HasColumnName("umv_btn_reject");
            entity.Property(e => e.UmvBtnVoid).HasColumnName("umv_btn_void");
            entity.Property(e => e.UmvCanEdit).HasColumnName("umv_can_edit");
            entity.Property(e => e.UmvCheckAvailability).HasColumnName("umv_check_availability");
            entity.Property(e => e.UmvMssId).HasColumnName("umv_mss_id");
            entity.Property(e => e.UmvMvBuId).HasColumnName("umv_mv_bu_id");
            entity.Property(e => e.UmvMvCdIdCms).HasColumnName("umv_mv_cd_id_cms");
            entity.Property(e => e.UmvMvCdIdSrc).HasColumnName("umv_mv_cd_id_src");
            entity.Property(e => e.UmvMvCreateDate).HasColumnName("umv_mv_create_date");
            entity.Property(e => e.UmvMvDate).HasColumnName("umv_mv_date");
            entity.Property(e => e.UmvMvDueDate).HasColumnName("umv_mv_due_date");
            entity.Property(e => e.UmvMvId).HasColumnName("umv_mv_id");
            entity.Property(e => e.UmvMvModifiedDate).HasColumnName("umv_mv_modified_date");
            entity.Property(e => e.UmvMvMssId).HasColumnName("umv_mv_mss_id");
            entity.Property(e => e.UmvMvMvtId).HasColumnName("umv_mv_mvt_id");
            entity.Property(e => e.UmvMvNumber).HasColumnName("umv_mv_number");
            entity.Property(e => e.UmvMvOrgId).HasColumnName("umv_mv_org_id");
            entity.Property(e => e.UmvMvOurReference).HasColumnName("umv_mv_our_reference");
            entity.Property(e => e.UmvMvPlIdWhsFrom).HasColumnName("umv_mv_pl_id_whs_from");
            entity.Property(e => e.UmvMvPlIdWhsTo).HasColumnName("umv_mv_pl_id_whs_to");
            entity.Property(e => e.UmvMvRemarks).HasColumnName("umv_mv_remarks");
            entity.Property(e => e.UmvMvSgdId).HasColumnName("umv_mv_sgd_id");
            entity.Property(e => e.UmvMvTheirReference).HasColumnName("umv_mv_their_reference");
            entity.Property(e => e.UmvMvUsId).HasColumnName("umv_mv_us_id");
            entity.Property(e => e.UmvMvtId).HasColumnName("umv_mvt_id");

            entity.HasOne(d => d.UmvMss).WithMany(p => p.UiMovements)
                .HasForeignKey(d => d.UmvMssId)
                .HasConstraintName("FK_UMV_REF_MSS");

            entity.HasOne(d => d.UmvMvt).WithMany(p => p.UiMovements)
                .HasForeignKey(d => d.UmvMvtId)
                .HasConstraintName("FK_UMV_REF_MVT");
        });

        modelBuilder.Entity<UiMovementFunctionNouse>(entity =>
        {
            entity.HasKey(e => e.UmfId)
                .HasName("PK_UI_MOVEMENT_FUNCTION")
                .HasFillFactor(90);

            entity.ToTable("UI_MOVEMENT_FUNCTION.NOUSE", "sls");

            entity.Property(e => e.UmfId).HasColumnName("umf_id");
            entity.Property(e => e.UmfKey)
                .HasMaxLength(32)
                .HasColumnName("umf_key");
            entity.Property(e => e.UmfMssId).HasColumnName("umf_mss_id");
            entity.Property(e => e.UmfMvtId).HasColumnName("umf_mvt_id");
            entity.Property(e => e.UmfValue).HasColumnName("umf_value");

            entity.HasOne(d => d.UmfMss).WithMany(p => p.UiMovementFunctionNouses)
                .HasForeignKey(d => d.UmfMssId)
                .HasConstraintName("FK_UMF_REF_MSS");

            entity.HasOne(d => d.UmfMvt).WithMany(p => p.UiMovementFunctionNouses)
                .HasForeignKey(d => d.UmfMvtId)
                .HasConstraintName("FK_UMF_REF_MVT");
        });

        modelBuilder.Entity<UiMovementItem>(entity =>
        {
            entity.HasKey(e => e.UmviId).HasFillFactor(90);

            entity.ToTable("UI_MOVEMENT_ITEM", "sls");

            entity.Property(e => e.UmviId).HasColumnName("umvi_id");
            entity.Property(e => e.UmviBtnAddSimilar).HasColumnName("umvi_btn_add_similar");
            entity.Property(e => e.UmviBtnDelete).HasColumnName("umvi_btn_delete");
            entity.Property(e => e.UmviBtnDetails).HasColumnName("umvi_btn_details");
            entity.Property(e => e.UmviMssId).HasColumnName("umvi_mss_id");
            entity.Property(e => e.UmviMviDiscountAmount).HasColumnName("umvi_mvi_discount_amount");
            entity.Property(e => e.UmviMviDiscountPercentage).HasColumnName("umvi_mvi_discount_percentage");
            entity.Property(e => e.UmviMviId).HasColumnName("umvi_mvi_id");
            entity.Property(e => e.UmviMviItId).HasColumnName("umvi_mvi_it_id");
            entity.Property(e => e.UmviMviLineSequence).HasColumnName("umvi_mvi_line_sequence");
            entity.Property(e => e.UmviMviMvId).HasColumnName("umvi_mvi_mv_id");
            entity.Property(e => e.UmviMviMvOrgId).HasColumnName("umvi_mvi_mv_org_id");
            entity.Property(e => e.UmviMviMviId).HasColumnName("umvi_mvi_mvi_id");
            entity.Property(e => e.UmviMviMvtoId).HasColumnName("umvi_mvi_mvto_id");
            entity.Property(e => e.UmviMviOrgId).HasColumnName("umvi_mvi_org_id");
            entity.Property(e => e.UmviMviPlIdWhs).HasColumnName("umvi_mvi_pl_id_whs");
            entity.Property(e => e.UmviMviPrice).HasColumnName("umvi_mvi_price");
            entity.Property(e => e.UmviMviQuantity).HasColumnName("umvi_mvi_quantity");
            entity.Property(e => e.UmviMviQuantity2).HasColumnName("umvi_mvi_quantity2");
            entity.Property(e => e.UmviMviRemarks).HasColumnName("umvi_mvi_remarks");
            entity.Property(e => e.UmviMviTotalAmount).HasColumnName("umvi_mvi_total_amount");
            entity.Property(e => e.UmviMviTotalAmountBc).HasColumnName("umvi_mvi_total_amount_bc");
            entity.Property(e => e.UmviMviTotalDiscount).HasColumnName("umvi_mvi_total_discount");
            entity.Property(e => e.UmviMviTotalDiscountBc).HasColumnName("umvi_mvi_total_discount_bc");
            entity.Property(e => e.UmviMviTotalTax).HasColumnName("umvi_mvi_total_tax");
            entity.Property(e => e.UmviMviTotalTaxBc).HasColumnName("umvi_mvi_total_tax_bc");
            entity.Property(e => e.UmviMviUomId).HasColumnName("umvi_mvi_uom_id");
            entity.Property(e => e.UmviMvtId).HasColumnName("umvi_mvt_id");

            entity.HasOne(d => d.UmviMss).WithMany(p => p.UiMovementItems)
                .HasForeignKey(d => d.UmviMssId)
                .HasConstraintName("FK_UMVI_REF_MSS");

            entity.HasOne(d => d.UmviMvt).WithMany(p => p.UiMovementItems)
                .HasForeignKey(d => d.UmviMvtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UMVI_REF_MVT");
        });

        modelBuilder.Entity<UiPageHelp>(entity =>
        {
            entity.HasKey(e => e.PghId).HasFillFactor(90);

            entity.ToTable("UI_PAGE_HELP", "cmn");

            entity.Property(e => e.PghId).HasColumnName("pgh_id");
            entity.Property(e => e.PghHelpLinkLan1)
                .HasMaxLength(255)
                .HasColumnName("pgh_help_link_lan1");
            entity.Property(e => e.PghHelpLinkLan2)
                .HasMaxLength(255)
                .HasColumnName("pgh_help_link_lan2");
            entity.Property(e => e.PghHelpLinkLan3)
                .HasMaxLength(255)
                .HasColumnName("pgh_help_link_lan3");
            entity.Property(e => e.PghPageLink)
                .HasMaxLength(255)
                .HasColumnName("pgh_page_link");
        });

        modelBuilder.Entity<UiTransaction>(entity =>
        {
            entity.HasKey(e => e.UtsId)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("UI_TRANSACTION", "sls");

            entity.HasIndex(e => new { e.UtsTstId, e.UtsTssId }, "idx_uts_tst_tss")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UtsId).HasColumnName("uts_id");
            entity.Property(e => e.UtsBtnAddItem).HasColumnName("uts_btn_add_item");
            entity.Property(e => e.UtsBtnAdditemDetail).HasColumnName("uts_btn_additem_detail");
            entity.Property(e => e.UtsBtnApply).HasColumnName("uts_btn_apply");
            entity.Property(e => e.UtsBtnApprove).HasColumnName("uts_btn_approve");
            entity.Property(e => e.UtsBtnAutoAllocate).HasColumnName("uts_btn_auto_allocate");
            entity.Property(e => e.UtsBtnGetpromotion).HasColumnName("uts_btn_getpromotion");
            entity.Property(e => e.UtsBtnIngridAddsimilar).HasColumnName("uts_btn_ingrid_addsimilar");
            entity.Property(e => e.UtsBtnIngridDelete).HasColumnName("uts_btn_ingrid_delete");
            entity.Property(e => e.UtsBtnIngridShowdetail).HasColumnName("uts_btn_ingrid_showdetail");
            entity.Property(e => e.UtsBtnReject).HasColumnName("uts_btn_reject");
            entity.Property(e => e.UtsBtnSubmit)
                .HasDefaultValue((short)-1)
                .HasColumnName("uts_btn_submit");
            entity.Property(e => e.UtsBtnVoid).HasColumnName("uts_btn_void");
            entity.Property(e => e.UtsTsBuId).HasColumnName("uts_ts_bu_id");
            entity.Property(e => e.UtsTsCdIdCms).HasColumnName("uts_ts_cd_id_cms");
            entity.Property(e => e.UtsTsCdIdCur).HasColumnName("uts_ts_cd_id_cur");
            entity.Property(e => e.UtsTsCdIdPam).HasColumnName("uts_ts_cd_id_pam");
            entity.Property(e => e.UtsTsCdIdSrc).HasColumnName("uts_ts_cd_id_src");
            entity.Property(e => e.UtsTsCreateDate).HasColumnName("uts_ts_create_date");
            entity.Property(e => e.UtsTsCurRate).HasColumnName("uts_ts_cur_rate");
            entity.Property(e => e.UtsTsDate).HasColumnName("uts_ts_date");
            entity.Property(e => e.UtsTsDiscount).HasColumnName("uts_ts_discount");
            entity.Property(e => e.UtsTsDueDate).HasColumnName("uts_ts_due_date");
            entity.Property(e => e.UtsTsId).HasColumnName("uts_ts_id");
            entity.Property(e => e.UtsTsInvCurRate).HasColumnName("uts_ts_inv_cur_rate");
            entity.Property(e => e.UtsTsModifiedDate).HasColumnName("uts_ts_modified_date");
            entity.Property(e => e.UtsTsNumber).HasColumnName("uts_ts_number");
            entity.Property(e => e.UtsTsOrgId).HasColumnName("uts_ts_org_id");
            entity.Property(e => e.UtsTsOurReference).HasColumnName("uts_ts_our_reference");
            entity.Property(e => e.UtsTsRemarks).HasColumnName("uts_ts_remarks");
            entity.Property(e => e.UtsTsSgdId).HasColumnName("uts_ts_sgd_id");
            entity.Property(e => e.UtsTsTheirReference).HasColumnName("uts_ts_their_reference");
            entity.Property(e => e.UtsTsThpsIdBill).HasColumnName("uts_ts_thps_id_bill");
            entity.Property(e => e.UtsTsThpsIdShip).HasColumnName("uts_ts_thps_id_ship");
            entity.Property(e => e.UtsTsTotal).HasColumnName("uts_ts_total");
            entity.Property(e => e.UtsTsTotalBc).HasColumnName("uts_ts_total_bc");
            entity.Property(e => e.UtsTsTotalDiscount).HasColumnName("uts_ts_total_discount");
            entity.Property(e => e.UtsTsTotalDiscountBc).HasColumnName("uts_ts_total_discount_bc");
            entity.Property(e => e.UtsTsTotalTax).HasColumnName("uts_ts_total_tax");
            entity.Property(e => e.UtsTsTotalTaxBc).HasColumnName("uts_ts_total_tax_bc");
            entity.Property(e => e.UtsTsTssId).HasColumnName("uts_ts_tss_id");
            entity.Property(e => e.UtsTsTstId).HasColumnName("uts_ts_tst_id");
            entity.Property(e => e.UtsTsUsId).HasColumnName("uts_ts_us_id");
            entity.Property(e => e.UtsTsVtId).HasColumnName("uts_ts_vt_id");
            entity.Property(e => e.UtsTssId).HasColumnName("uts_tss_id");
            entity.Property(e => e.UtsTstId).HasColumnName("uts_tst_id");
            entity.Property(e => e.UtsUsIdCreatedby).HasColumnName("uts_us_id_createdby");

            entity.HasOne(d => d.UtsTss).WithMany(p => p.UiTransactions)
                .HasForeignKey(d => d.UtsTssId)
                .HasConstraintName("FK_UTS_REF_TSS");

            entity.HasOne(d => d.UtsTst).WithMany(p => p.UiTransactions)
                .HasForeignKey(d => d.UtsTstId)
                .HasConstraintName("FK_UTS_REF_TST");
        });

        modelBuilder.Entity<UiTransactionItem>(entity =>
        {
            entity.HasKey(e => e.UtsiId).HasFillFactor(90);

            entity.ToTable("UI_TRANSACTION_ITEM", "sls");

            entity.HasIndex(e => e.UtsiTsiTsId, "mvi_mv_idx").HasFillFactor(90);

            entity.HasIndex(e => e.UtsiTsiItId, "tsi_it_idx").HasFillFactor(90);

            entity.Property(e => e.UtsiId)
                .ValueGeneratedNever()
                .HasColumnName("utsi_id");
            entity.Property(e => e.UtsiTsiDiscountAmount).HasColumnName("utsi_tsi_discount_amount");
            entity.Property(e => e.UtsiTsiDiscountPercentage).HasColumnName("utsi_tsi_discount_percentage");
            entity.Property(e => e.UtsiTsiId).HasColumnName("utsi_tsi_id");
            entity.Property(e => e.UtsiTsiItId).HasColumnName("utsi_tsi_it_id");
            entity.Property(e => e.UtsiTsiLineSequence).HasColumnName("utsi_tsi_line_sequence");
            entity.Property(e => e.UtsiTsiLpiId).HasColumnName("utsi_tsi_lpi_id");
            entity.Property(e => e.UtsiTsiOrgId).HasColumnName("utsi_tsi_org_id");
            entity.Property(e => e.UtsiTsiPlIdWhs).HasColumnName("utsi_tsi_pl_id_whs");
            entity.Property(e => e.UtsiTsiPrice).HasColumnName("utsi_tsi_price");
            entity.Property(e => e.UtsiTsiPriceChanged).HasColumnName("utsi_tsi_price_changed");
            entity.Property(e => e.UtsiTsiQuantity).HasColumnName("utsi_tsi_quantity");
            entity.Property(e => e.UtsiTsiQuantity2).HasColumnName("utsi_tsi_quantity2");
            entity.Property(e => e.UtsiTsiRemarks).HasColumnName("utsi_tsi_remarks");
            entity.Property(e => e.UtsiTsiTotalAmount).HasColumnName("utsi_tsi_total_amount");
            entity.Property(e => e.UtsiTsiTotalAmountBc).HasColumnName("utsi_tsi_total_amount_bc");
            entity.Property(e => e.UtsiTsiTotalDiscount).HasColumnName("utsi_tsi_total_discount");
            entity.Property(e => e.UtsiTsiTotalDiscountBc).HasColumnName("utsi_tsi_total_discount_bc");
            entity.Property(e => e.UtsiTsiTotalTax).HasColumnName("utsi_tsi_total_tax");
            entity.Property(e => e.UtsiTsiTotalTaxBc).HasColumnName("utsi_tsi_total_tax_bc");
            entity.Property(e => e.UtsiTsiTsId).HasColumnName("utsi_tsi_ts_id");
            entity.Property(e => e.UtsiTsiTsOrgId).HasColumnName("utsi_tsi_ts_org_id");
            entity.Property(e => e.UtsiTsiTsiId).HasColumnName("utsi_tsi_tsi_id");
            entity.Property(e => e.UtsiTsiTstoId).HasColumnName("utsi_tsi_tsto_id");
            entity.Property(e => e.UtsiTsiUomId).HasColumnName("utsi_tsi_uom_id");
            entity.Property(e => e.UtsiTssId).HasColumnName("utsi_tss_id");
            entity.Property(e => e.UtsiTstId).HasColumnName("utsi_tst_id");

            entity.HasOne(d => d.UtsiTss).WithMany(p => p.UiTransactionItems)
                .HasForeignKey(d => d.UtsiTssId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTSI_REF_TSS");

            entity.HasOne(d => d.UtsiTst).WithMany(p => p.UiTransactionItems)
                .HasForeignKey(d => d.UtsiTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTSI_REF_TST");
        });

        modelBuilder.Entity<UnitOfMesure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UNIT_OF_MESURE");

            entity.Property(e => e.UomActive).HasColumnName("uom_active");
            entity.Property(e => e.UomBeId).HasColumnName("uom_be_id");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
            entity.Property(e => e.UomDescription)
                .HasMaxLength(50)
                .HasColumnName("uom_description");
            entity.Property(e => e.UomId)
                .ValueGeneratedOnAdd()
                .HasColumnName("uom_id");
            entity.Property(e => e.UomLevel).HasColumnName("uom_level");
        });

        modelBuilder.Entity<Uom>(entity =>
        {
            entity.HasKey(e => e.UomId).HasFillFactor(90);

            entity.ToTable("UOM", "cmn");

            entity.HasIndex(e => e.UomCode, "uom_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uom_code");
            entity.Property(e => e.UomIsBase).HasColumnName("uom_is_base");
            entity.Property(e => e.UomIsSaleable)
                .HasDefaultValue(1)
                .HasColumnName("uom_is_saleable");
            entity.Property(e => e.UomNameLan1)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan1");
            entity.Property(e => e.UomNameLan2)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan2");
            entity.Property(e => e.UomNameLan3)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan3");
            entity.Property(e => e.UomOrder)
                .HasMaxLength(64)
                .HasColumnName("uom_order");
            entity.Property(e => e.UomRoundingPrecision).HasColumnName("uom_rounding_precision");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UsId)
                .HasName("PK_USERS")
                .HasFillFactor(90);

            entity.ToTable("USER", "cmn");

            entity.HasIndex(e => e.UsCode, "us_code_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UsLogin, "us_login_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.UsActive)
                .HasDefaultValue((short)1)
                .HasColumnName("us_active");
            entity.Property(e => e.UsCdIdGen).HasColumnName("us_cd_id_gen");
            entity.Property(e => e.UsCdIdTtl).HasColumnName("us_cd_id_ttl");
            entity.Property(e => e.UsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("us_code");
            entity.Property(e => e.UsDbUser)
                .HasMaxLength(50)
                .HasColumnName("us_db_user");
            entity.Property(e => e.UsDeleted).HasColumnName("us_deleted");
            entity.Property(e => e.UsEmail)
                .HasMaxLength(100)
                .HasColumnName("us_email");
            entity.Property(e => e.UsExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("us_expiry_date");
            entity.Property(e => e.UsFirstName)
                .HasMaxLength(50)
                .HasColumnName("us_first_name");
            entity.Property(e => e.UsImported).HasColumnName("us_imported");
            entity.Property(e => e.UsLastName)
                .HasMaxLength(50)
                .HasColumnName("us_last_name");
            entity.Property(e => e.UsLogin)
                .HasMaxLength(20)
                .HasColumnName("us_login");
            entity.Property(e => e.UsPassword)
                .HasMaxLength(12)
                .HasColumnName("us_password");
            entity.Property(e => e.UsPrefix)
                .HasMaxLength(32)
                .HasColumnName("us_prefix");
            entity.Property(e => e.UsReadonly).HasColumnName("us_readonly");
            entity.Property(e => e.UsReceiveNotification).HasColumnName("us_receive_notification");
            entity.Property(e => e.UsRoute)
                .HasMaxLength(64)
                .HasColumnName("us_route");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(50)
                .HasColumnName("us_short_name");
            entity.Property(e => e.UsThpId).HasColumnName("us_thp_id");
            entity.Property(e => e.UsToken).HasColumnName("us_token");
            entity.Property(e => e.UsType)
                .HasMaxLength(255)
                .HasColumnName("us_type");
            entity.Property(e => e.UsUsId).HasColumnName("us_us_id");

            entity.HasOne(d => d.UsCdIdGenNavigation).WithMany(p => p.UserUsCdIdGenNavigations)
                .HasForeignKey(d => d.UsCdIdGen)
                .HasConstraintName("FK_US_REF_CD_GEN");

            entity.HasOne(d => d.UsCdIdTtlNavigation).WithMany(p => p.UserUsCdIdTtlNavigations)
                .HasForeignKey(d => d.UsCdIdTtl)
                .HasConstraintName("FK_US_REF_CD_TTL");

            entity.HasOne(d => d.UsThp).WithMany(p => p.Users)
                .HasForeignKey(d => d.UsThpId)
                .HasConstraintName("FK_US_REF_THP");

            entity.HasOne(d => d.UsUs).WithMany(p => p.InverseUsUs)
                .HasForeignKey(d => d.UsUsId)
                .HasConstraintName("FK_USER_REFERENCE_USER");
        });

        modelBuilder.Entity<UserAppliSetting>(entity =>
        {
            entity.HasKey(e => e.UasId).HasFillFactor(90);

            entity.ToTable("USER_APPLI_SETTING", "cmn");

            entity.Property(e => e.UasId).HasColumnName("uas_id");
            entity.Property(e => e.UasAsId).HasColumnName("uas_as_id");
            entity.Property(e => e.UasAsValue)
                .HasMaxLength(255)
                .HasColumnName("uas_as_value");
            entity.Property(e => e.UasUsId).HasColumnName("uas_us_id");

            entity.HasOne(d => d.UasAs).WithMany(p => p.UserAppliSettings)
                .HasForeignKey(d => d.UasAsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UAS_REF_AS");

            entity.HasOne(d => d.UasUs).WithMany(p => p.UserAppliSettings)
                .HasForeignKey(d => d.UasUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_APP_REFERENCE_USER");
        });

        modelBuilder.Entity<UserBusinessUnit>(entity =>
        {
            entity.HasKey(e => e.UbuId).HasFillFactor(90);

            entity.ToTable("USER_BUSINESS_UNIT", "cmn");

            entity.HasIndex(e => new { e.UbuUsId, e.UbuBuId, e.UbuFromDate }, "ubu_us_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UbuId).HasColumnName("ubu_id");
            entity.Property(e => e.UbuBuId).HasColumnName("ubu_bu_id");
            entity.Property(e => e.UbuFromDate).HasColumnName("ubu_from_date");
            entity.Property(e => e.UbuIsOwner).HasColumnName("ubu_is_owner");
            entity.Property(e => e.UbuToDate).HasColumnName("ubu_to_date");
            entity.Property(e => e.UbuUsId).HasColumnName("ubu_us_id");

            entity.HasOne(d => d.UbuBu).WithMany(p => p.UserBusinessUnits)
                .HasForeignKey(d => d.UbuBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBU_REF_BU");

            entity.HasOne(d => d.UbuUs).WithMany(p => p.UserBusinessUnits)
                .HasForeignKey(d => d.UbuUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBU_REF_US");
        });

        modelBuilder.Entity<UserConnectionInfo>(entity =>
        {
            entity.HasKey(e => e.UciId).HasFillFactor(90);

            entity.ToTable("USER_CONNECTION_INFO", "cmn");

            entity.Property(e => e.UciId).HasColumnName("uci_id");
            entity.Property(e => e.UciCdIdLang).HasColumnName("uci_cd_id_lang");
            entity.Property(e => e.UciConcurrentUsers).HasColumnName("uci_concurrent_users");
            entity.Property(e => e.UciFailedLoginCount).HasColumnName("uci_failed_login_count");
            entity.Property(e => e.UciFirstLoginDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("uci_first_login_date");
            entity.Property(e => e.UciIsLocked).HasColumnName("uci_is_locked");
            entity.Property(e => e.UciIsOnline).HasColumnName("uci_is_online");
            entity.Property(e => e.UciLastFailedLoginDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("uci_last_failed_login_date");
            entity.Property(e => e.UciLastLoginDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("uci_last_login_date");
            entity.Property(e => e.UciLastLogoutDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("uci_last_logout_date");
            entity.Property(e => e.UciSuccessfullLoginCount).HasColumnName("uci_successfull_login_count");
            entity.Property(e => e.UciUsId).HasColumnName("uci_us_id");

            entity.HasOne(d => d.UciUs).WithMany(p => p.UserConnectionInfos)
                .HasForeignKey(d => d.UciUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_CON_REFERENCE_USER");
        });

        modelBuilder.Entity<UserCoordinate>(entity =>
        {
            entity.HasKey(e => e.UcId).HasFillFactor(90);

            entity.ToTable("USER_COORDINATES", "cmn");

            entity.Property(e => e.UcId).HasColumnName("uc_id");
            entity.Property(e => e.UbuDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ubu_datetime");
            entity.Property(e => e.UcLatitude)
                .HasMaxLength(255)
                .HasColumnName("uc_latitude");
            entity.Property(e => e.UcLongitude)
                .HasMaxLength(255)
                .HasColumnName("uc_longitude");
            entity.Property(e => e.UcUsId).HasColumnName("uc_us_id");
        });

        modelBuilder.Entity<UserDelegation>(entity =>
        {
            entity.HasKey(e => e.UsdId).HasFillFactor(90);

            entity.ToTable("USER_DELEGATION", "cmn");

            entity.Property(e => e.UsdId).HasColumnName("usd_id");
            entity.Property(e => e.UsdActive).HasColumnName("usd_active");
            entity.Property(e => e.UsdBuId).HasColumnName("usd_bu_id");
            entity.Property(e => e.UsdComments)
                .HasMaxLength(100)
                .HasColumnName("usd_comments");
            entity.Property(e => e.UsdFromDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("usd_from_date");
            entity.Property(e => e.UsdToDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("usd_to_date");
            entity.Property(e => e.UsdUsId).HasColumnName("usd_us_id");
            entity.Property(e => e.UsdUsIdTo).HasColumnName("usd_us_id_to");
        });

        modelBuilder.Entity<UserDeviceInfo>(entity =>
        {
            entity.HasKey(e => e.UdiId).HasFillFactor(90);

            entity.ToTable("USER_DEVICE_INFO", "sec");

            entity.Property(e => e.UdiId).HasColumnName("udi_id");
            entity.Property(e => e.UdiCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("udi_creation_date");
            entity.Property(e => e.UdiDeviceImei)
                .HasMaxLength(512)
                .HasColumnName("udi_device_imei");
            entity.Property(e => e.UdiDeviceIp)
                .HasMaxLength(512)
                .HasColumnName("udi_device_ip");
            entity.Property(e => e.UdiDeviceSerial)
                .HasMaxLength(512)
                .HasColumnName("udi_device_serial");
            entity.Property(e => e.UdiUsId).HasColumnName("udi_us_id");
            entity.Property(e => e.UdiVersion)
                .HasMaxLength(32)
                .HasColumnName("udi_version");

            entity.HasOne(d => d.UdiUs).WithMany(p => p.UserDeviceInfos)
                .HasForeignKey(d => d.UdiUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UDI_REF_US");
        });

        modelBuilder.Entity<UserDeviceInfoSnc>(entity =>
        {
            entity.HasKey(e => new { e.SUdiSmId, e.SUdiVersion }).HasFillFactor(90);

            entity.ToTable("USER_DEVICE_INFO_SNC", "syn");

            entity.Property(e => e.SUdiSmId).HasColumnName("s_udi_sm_id");
            entity.Property(e => e.SUdiVersion)
                .HasMaxLength(32)
                .HasColumnName("s_udi_version");
            entity.Property(e => e.SUdiCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("s_udi_creation_date");
            entity.Property(e => e.SUdiDeviceImei)
                .HasMaxLength(512)
                .HasColumnName("s_udi_device_imei");
            entity.Property(e => e.SUdiDeviceIp)
                .HasMaxLength(512)
                .HasColumnName("s_udi_device_ip");
            entity.Property(e => e.SUdiDeviceSerial)
                .HasMaxLength(512)
                .HasColumnName("s_udi_device_serial");
        });

        modelBuilder.Entity<UserDeviceLock>(entity =>
        {
            entity.HasKey(e => e.UdlId).HasFillFactor(90);

            entity.ToTable("USER_DEVICE_LOCK", "sec");

            entity.Property(e => e.UdlId).HasColumnName("udl_id");
            entity.Property(e => e.UdlCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("udl_creation_date");
            entity.Property(e => e.UdlDeviceImei)
                .HasMaxLength(512)
                .HasColumnName("udl_device_imei");
            entity.Property(e => e.UdlDeviceIp)
                .HasMaxLength(512)
                .HasColumnName("udl_device_ip");
            entity.Property(e => e.UdlDeviceSerial)
                .HasMaxLength(512)
                .HasColumnName("udl_device_serial");
            entity.Property(e => e.UdlState).HasColumnName("udl_state");
            entity.Property(e => e.UdlUpVersion)
                .HasMaxLength(32)
                .HasColumnName("udl_up_version");
            entity.Property(e => e.UdlUsId).HasColumnName("udl_us_id");
            entity.Property(e => e.UdlVersion)
                .HasMaxLength(32)
                .HasColumnName("udl_version");

            entity.HasOne(d => d.UdlUs).WithMany(p => p.UserDeviceLocks)
                .HasForeignKey(d => d.UdlUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UDL_REF_US");
        });

        modelBuilder.Entity<UserFinance>(entity =>
        {
            entity.HasKey(e => e.UsfId)
                .HasName("PK_SALESMAN_COMPANY")
                .HasFillFactor(90);

            entity.ToTable("USER_FINANCE", "sls");

            entity.HasIndex(e => new { e.UsfUsId, e.UsfUbuId }, "usf_us_ubu_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UsfId).HasColumnName("usf_id");
            entity.Property(e => e.UsfBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("usf_balance");
            entity.Property(e => e.UsfCdIdCur).HasColumnName("usf_cd_id_cur");
            entity.Property(e => e.UsfCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("usf_credit_limit");
            entity.Property(e => e.UsfIsRecursive).HasColumnName("usf_is_recursive");
            entity.Property(e => e.UsfUbuId).HasColumnName("usf_ubu_id");
            entity.Property(e => e.UsfUsId).HasColumnName("usf_us_id");

            entity.HasOne(d => d.UsfCdIdCurNavigation).WithMany(p => p.UserFinances)
                .HasForeignKey(d => d.UsfCdIdCur)
                .HasConstraintName("FK_USF_REF_CD_CUR");

            entity.HasOne(d => d.UsfUbu).WithMany(p => p.UserFinances)
                .HasForeignKey(d => d.UsfUbuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USF_REF_UBU");

            entity.HasOne(d => d.UsfUs).WithMany(p => p.UserFinances)
                .HasForeignKey(d => d.UsfUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USF_REF_US");
        });

        modelBuilder.Entity<UserItemQuotaAllV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("USER_ITEM_QUOTA_ALL_V", "sls");

            entity.Property(e => e.UiqDescription)
                .HasMaxLength(1000)
                .HasColumnName("uiq_description");
            entity.Property(e => e.UiqFromDate)
                .HasColumnType("datetime")
                .HasColumnName("uiq_from_date");
            entity.Property(e => e.UiqId).HasColumnName("uiq_id");
            entity.Property(e => e.UiqPrId).HasColumnName("uiq_pr_id");
            entity.Property(e => e.UiqQuotaQtySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("uiq_quota_qty_sku");
            entity.Property(e => e.UiqRemQtySku)
                .HasColumnType("numeric(17, 5)")
                .HasColumnName("uiq_rem_qty_sku");
            entity.Property(e => e.UiqToDate)
                .HasColumnType("datetime")
                .HasColumnName("uiq_to_date");
            entity.Property(e => e.UiqUiqId).HasColumnName("uiq_uiq_id");
            entity.Property(e => e.UiqUsId).HasColumnName("uiq_us_id");
            entity.Property(e => e.UiqUsedQtySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("uiq_used_qty_sku");
        });

        modelBuilder.Entity<UserItemQuotaDetail>(entity =>
        {
            entity.HasKey(e => e.UiqdId).HasFillFactor(90);

            entity.ToTable("USER_ITEM_QUOTA_DETAILS", "sls");

            entity.HasIndex(e => new { e.UiqdUiqId, e.UiqdItId }, "uiqd_uiq_it_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UiqdId).HasColumnName("uiqd_id");
            entity.Property(e => e.UiqdItId).HasColumnName("uiqd_it_id");
            entity.Property(e => e.UiqdQuotaQtySku)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("uiqd_quota_qty_sku");
            entity.Property(e => e.UiqdRemQtySku)
                .HasComputedColumnSql("([USER_ITEM_QUOTA_DETAILS].[uiqd_quota_qty_sku]-[USER_ITEM_QUOTA_DETAILS].[uiqd_used_qty_sku])", false)
                .HasColumnType("numeric(17, 5)")
                .HasColumnName("uiqd_rem_qty_sku");
            entity.Property(e => e.UiqdUiqId).HasColumnName("uiqd_uiq_id");
            entity.Property(e => e.UiqdUsedQtySku)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("uiqd_used_qty_sku");

            entity.HasOne(d => d.UiqdIt).WithMany(p => p.UserItemQuotaDetails)
                .HasForeignKey(d => d.UiqdItId)
                .HasConstraintName("FK_UIQD_REF_PR");

            entity.HasOne(d => d.UiqdUiq).WithMany(p => p.UserItemQuotaDetails)
                .HasForeignKey(d => d.UiqdUiqId)
                .HasConstraintName("FK_UIQD_REF_UPQ");
        });

        modelBuilder.Entity<UserItemQuotaGroup>(entity =>
        {
            entity.HasKey(e => e.UiqgId).HasFillFactor(90);

            entity.ToTable("USER_ITEM_QUOTA_GROUP", "cmn");

            entity.Property(e => e.UiqgId).HasColumnName("uiqg_id");
            entity.Property(e => e.UiqgIqgId).HasColumnName("uiqg_iqg_id");
            entity.Property(e => e.UiqgUsId).HasColumnName("uiqg_us_id");

            entity.HasOne(d => d.UiqgIqg).WithMany(p => p.UserItemQuotaGroups)
                .HasForeignKey(d => d.UiqgIqgId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UIQG_REF_IQG");

            entity.HasOne(d => d.UiqgUs).WithMany(p => p.UserItemQuotaGroups)
                .HasForeignKey(d => d.UiqgUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IQG_REF_US");
        });

        modelBuilder.Entity<UserItemQuotum>(entity =>
        {
            entity.HasKey(e => e.UiqId).HasFillFactor(90);

            entity.ToTable("USER_ITEM_QUOTA", "sls");

            entity.HasIndex(e => new { e.UiqUsId, e.UiqFromDate, e.UiqToDate }, "uiq_us_date_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UiqId).HasColumnName("uiq_id");
            entity.Property(e => e.UiqActive).HasColumnName("uiq_active");
            entity.Property(e => e.UiqDescription)
                .HasMaxLength(1000)
                .HasColumnName("uiq_description");
            entity.Property(e => e.UiqFromDate)
                .HasColumnType("datetime")
                .HasColumnName("uiq_from_date");
            entity.Property(e => e.UiqToDate)
                .HasColumnType("datetime")
                .HasColumnName("uiq_to_date");
            entity.Property(e => e.UiqUsId).HasColumnName("uiq_us_id");

            entity.HasOne(d => d.UiqUs).WithMany(p => p.UserItemQuota)
                .HasForeignKey(d => d.UiqUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UIQ_REF_USR");
        });

        modelBuilder.Entity<UserItemcategory>(entity =>
        {
            entity.HasKey(e => e.UigId).HasFillFactor(90);

            entity.ToTable("USER_ITEMCATEGORY", "cmn");

            entity.Property(e => e.UigId).HasColumnName("uig_id");
            entity.Property(e => e.UigIcfvId).HasColumnName("uig_icfv_id");
            entity.Property(e => e.UigUsId).HasColumnName("uig_us_id");

            entity.HasOne(d => d.UigUs).WithMany(p => p.UserItemcategories)
                .HasForeignKey(d => d.UigUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UIG_REF_US");
        });

        modelBuilder.Entity<UserMobileProfile>(entity =>
        {
            entity.HasKey(e => e.UsmpId).HasFillFactor(90);

            entity.ToTable("USER_MOBILE_PROFILE", "cmn");

            entity.Property(e => e.UsmpId).HasColumnName("usmp_id");
            entity.Property(e => e.UsmpMprId).HasColumnName("usmp_mpr_id");
            entity.Property(e => e.UsmpUsId).HasColumnName("usmp_us_id");

            entity.HasOne(d => d.UsmpMpr).WithMany(p => p.UserMobileProfiles)
                .HasForeignKey(d => d.UsmpMprId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USMP_REF_MPR");

            entity.HasOne(d => d.UsmpUs).WithMany(p => p.UserMobileProfiles)
                .HasForeignKey(d => d.UsmpUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USMP_REF_US");
        });

        modelBuilder.Entity<UserPayment>(entity =>
        {
            entity.HasKey(e => e.UpId).HasFillFactor(90);

            entity.ToTable("USER_PAYMENT", "sls");

            entity.Property(e => e.UpId).HasColumnName("up_id");
            entity.Property(e => e.UpBuId).HasColumnName("up_bu_id");
            entity.Property(e => e.UpCdIdSrc).HasColumnName("up_cd_id_src");
            entity.Property(e => e.UpCreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("up_create_date");
            entity.Property(e => e.UpDate)
                .HasColumnType("datetime")
                .HasColumnName("up_date");
            entity.Property(e => e.UpDateFrom)
                .HasColumnType("datetime")
                .HasColumnName("up_date_from");
            entity.Property(e => e.UpDateTo)
                .HasColumnType("datetime")
                .HasColumnName("up_date_to");
            entity.Property(e => e.UpModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("up_modified_date");
            entity.Property(e => e.UpNumber)
                .HasMaxLength(32)
                .HasColumnName("up_number");
            entity.Property(e => e.UpOrgId).HasColumnName("up_org_id");
            entity.Property(e => e.UpRemarks)
                .HasMaxLength(512)
                .HasColumnName("up_remarks");
            entity.Property(e => e.UpUpsId).HasColumnName("up_ups_id");
            entity.Property(e => e.UpUptId).HasColumnName("up_upt_id");
            entity.Property(e => e.UpUsId).HasColumnName("up_us_id");
            entity.Property(e => e.UpUsIdCashier).HasColumnName("up_us_id_cashier");

            entity.HasOne(d => d.UpBu).WithMany(p => p.UserPayments)
                .HasForeignKey(d => d.UpBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_BU");

            entity.HasOne(d => d.UpCdIdSrcNavigation).WithMany(p => p.UserPayments)
                .HasForeignKey(d => d.UpCdIdSrc)
                .HasConstraintName("FK_UP_REF_CD_SRC");

            entity.HasOne(d => d.UpUps).WithMany(p => p.UserPayments)
                .HasForeignKey(d => d.UpUpsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_UPS");

            entity.HasOne(d => d.UpUpt).WithMany(p => p.UserPayments)
                .HasForeignKey(d => d.UpUptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_UPT");

            entity.HasOne(d => d.UpUs).WithMany(p => p.UserPaymentUpUs)
                .HasForeignKey(d => d.UpUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_US_SALESMAN");

            entity.HasOne(d => d.UpUsIdCashierNavigation).WithMany(p => p.UserPaymentUpUsIdCashierNavigations)
                .HasForeignKey(d => d.UpUsIdCashier)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_US_CASHIER");
        });

        modelBuilder.Entity<UserPaymentDetail>(entity =>
        {
            entity.HasKey(e => e.UpdId).HasFillFactor(90);

            entity.ToTable("USER_PAYMENT_DETAIL", "sls");

            entity.Property(e => e.UpdId).HasColumnName("upd_id");
            entity.Property(e => e.UpdPaId).HasColumnName("upd_pa_id");
            entity.Property(e => e.UpdUpId).HasColumnName("upd_up_id");

            entity.HasOne(d => d.UpdPa).WithMany(p => p.UserPaymentDetails)
                .HasForeignKey(d => d.UpdPaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UP_REF_PA");

            entity.HasOne(d => d.UpdUp).WithMany(p => p.UserPaymentDetails)
                .HasForeignKey(d => d.UpdUpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPD_REF_UP");
        });

        modelBuilder.Entity<UserPaymentLine>(entity =>
        {
            entity.HasKey(e => e.UplId).HasFillFactor(90);

            entity.ToTable("USER_PAYMENT_LINE", "sls");

            entity.Property(e => e.UplId).HasColumnName("upl_id");
            entity.Property(e => e.UplAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("upl_amount");
            entity.Property(e => e.UplCdIdBank).HasColumnName("upl_cd_id_bank");
            entity.Property(e => e.UplCdIdCur).HasColumnName("upl_cd_id_cur");
            entity.Property(e => e.UplCdIdPam).HasColumnName("upl_cd_id_pam");
            entity.Property(e => e.UplCurrencyRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("upl_currency_rate");
            entity.Property(e => e.UplDate)
                .HasColumnType("datetime")
                .HasColumnName("upl_date");
            entity.Property(e => e.UplDocDate)
                .HasColumnType("datetime")
                .HasColumnName("upl_doc_date");
            entity.Property(e => e.UplNumber)
                .HasMaxLength(32)
                .HasColumnName("upl_number");
            entity.Property(e => e.UplRemarks)
                .HasMaxLength(512)
                .HasColumnName("upl_remarks");
            entity.Property(e => e.UplUpId).HasColumnName("upl_up_id");

            entity.HasOne(d => d.UplCdIdBankNavigation).WithMany(p => p.UserPaymentLineUplCdIdBankNavigations)
                .HasForeignKey(d => d.UplCdIdBank)
                .HasConstraintName("FK_UPL_REF_CD_BANK");

            entity.HasOne(d => d.UplCdIdCurNavigation).WithMany(p => p.UserPaymentLineUplCdIdCurNavigations)
                .HasForeignKey(d => d.UplCdIdCur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPL_REF_CD_CUR");

            entity.HasOne(d => d.UplCdIdPamNavigation).WithMany(p => p.UserPaymentLineUplCdIdPamNavigations)
                .HasForeignKey(d => d.UplCdIdPam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPL_REF_CD_PAM");

            entity.HasOne(d => d.UplUp).WithMany(p => p.UserPaymentLines)
                .HasForeignKey(d => d.UplUpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPL_REF_UP");
        });

        modelBuilder.Entity<UserProfile>(entity =>
        {
            entity.HasKey(e => e.UspId).HasFillFactor(90);

            entity.ToTable("USER_PROFILE", "cmn");

            entity.HasIndex(e => new { e.UspUsId, e.UspPrId }, "usp_us_pr_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UspId).HasColumnName("usp_id");
            entity.Property(e => e.UspPrId).HasColumnName("usp_pr_id");
            entity.Property(e => e.UspUsId).HasColumnName("usp_us_id");

            entity.HasOne(d => d.UspPr).WithMany(p => p.UserProfiles)
                .HasForeignKey(d => d.UspPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USP_REF_PR");

            entity.HasOne(d => d.UspUs).WithMany(p => p.UserProfiles)
                .HasForeignKey(d => d.UspUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USP_REF_US");
        });

        modelBuilder.Entity<UserProfileV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("USER_PROFILE_V", "dex");

            entity.Property(e => e.IUspPrId).HasColumnName("i_usp_pr_id");
            entity.Property(e => e.IUspUsId).HasColumnName("i_usp_us_id");
            entity.Property(e => e.IxUspId).HasColumnName("ix_usp_id");
        });

        modelBuilder.Entity<UserQlikInfo>(entity =>
        {
            entity.HasKey(e => e.UqiId).HasFillFactor(90);

            entity.ToTable("USER_QLIK_INFO", "cmn");

            entity.Property(e => e.UqiId).HasColumnName("uqi_id");
            entity.Property(e => e.UqiQlikAccess)
                .HasMaxLength(50)
                .HasColumnName("uqi_qlik_access");
            entity.Property(e => e.UqiQlikGroup)
                .HasMaxLength(50)
                .HasColumnName("uqi_qlik_group");
            entity.Property(e => e.UqiQlikOmit)
                .HasMaxLength(50)
                .HasColumnName("uqi_qlik_omit");
            entity.Property(e => e.UqiQlikReduction)
                .HasMaxLength(50)
                .HasColumnName("uqi_qlik_reduction");
            entity.Property(e => e.UqiQlikUsername)
                .HasMaxLength(50)
                .HasColumnName("uqi_qlik_username");
            entity.Property(e => e.UqiUsId).HasColumnName("uqi_us_id");

            entity.HasOne(d => d.UqiUs).WithMany(p => p.UserQlikInfos)
                .HasForeignKey(d => d.UqiUsId)
                .HasConstraintName("FK_USER_QLIK_INFO_USERS");
        });

        modelBuilder.Entity<UserSequenceWmsSnc>(entity =>
        {
            entity.HasKey(e => new { e.SUqId, e.SUqUsIdSync, e.SUqVersion }).HasFillFactor(90);

            entity.ToTable("USER_SEQUENCE_WMS_SNC", "syn");

            entity.Property(e => e.SUqId).HasColumnName("s_uq_id");
            entity.Property(e => e.SUqUsIdSync).HasColumnName("s_uq_us_id_sync");
            entity.Property(e => e.SUqVersion)
                .HasMaxLength(32)
                .HasColumnName("s_uq_version");
            entity.Property(e => e.SUqFromCode)
                .HasMaxLength(50)
                .HasColumnName("s_uq_from_code");
            entity.Property(e => e.SUqIsModified).HasColumnName("s_uq_is_modified");
            entity.Property(e => e.SUqPrefix)
                .HasMaxLength(16)
                .HasColumnName("s_uq_prefix");
            entity.Property(e => e.SUqToCode)
                .HasMaxLength(50)
                .HasColumnName("s_uq_to_code");
            entity.Property(e => e.SUqTotalLength)
                .HasDefaultValue((short)8)
                .HasColumnName("s_uq_total_length");
            entity.Property(e => e.SUqType)
                .HasMaxLength(50)
                .HasColumnName("s_uq_type");
            entity.Property(e => e.SUqUsId).HasColumnName("s_uq_us_id");
        });

        modelBuilder.Entity<UserThirdparty>(entity =>
        {
            entity.HasKey(e => e.UthpId).HasFillFactor(90);

            entity.ToTable("USER_THIRDPARTY", "cmn");

            entity.Property(e => e.UthpId).HasColumnName("uthp_id");
            entity.Property(e => e.UthpBuId).HasColumnName("uthp_bu_id");
            entity.Property(e => e.UthpCcFrequency)
                .HasDefaultValue(1)
                .HasColumnName("uthp_cc_frequency");
            entity.Property(e => e.UthpThpId).HasColumnName("uthp_thp_id");
            entity.Property(e => e.UthpUsId).HasColumnName("uthp_us_id");

            entity.HasOne(d => d.UthpBu).WithMany(p => p.UserThirdparties)
                .HasForeignKey(d => d.UthpBuId)
                .HasConstraintName("FK_UTH_REF_BU");

            entity.HasOne(d => d.UthpThp).WithMany(p => p.UserThirdparties)
                .HasForeignKey(d => d.UthpThpId)
                .HasConstraintName("FK_UTH_REF_THP");

            entity.HasOne(d => d.UthpUs).WithMany(p => p.UserThirdparties)
                .HasForeignKey(d => d.UthpUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTH_REF_US");
        });

        modelBuilder.Entity<UserThirdpartySite>(entity =>
        {
            entity.HasKey(e => e.UthpsId).HasFillFactor(90);

            entity.ToTable("USER_THIRDPARTY_SITE", "cmn");

            entity.HasIndex(e => new { e.UthpsUsId, e.UthpsThpsId }, "uthps_us_thps_idx").HasFillFactor(90);

            entity.Property(e => e.UthpsId).HasColumnName("uthps_id");
            entity.Property(e => e.UthpsAttribute1)
                .HasMaxLength(50)
                .HasColumnName("uthps_attribute1");
            entity.Property(e => e.UthpsCcFrequency)
                .HasDefaultValue(1)
                .HasColumnName("uthps_cc_frequency");
            entity.Property(e => e.UthpsThpsId).HasColumnName("uthps_thps_id");
            entity.Property(e => e.UthpsUsId).HasColumnName("uthps_us_id");

            entity.HasOne(d => d.UthpsThps).WithMany(p => p.UserThirdpartySites)
                .HasForeignKey(d => d.UthpsThpsId)
                .HasConstraintName("FK_UTHPS_REF_THPS");

            entity.HasOne(d => d.UthpsUs).WithMany(p => p.UserThirdpartySites)
                .HasForeignKey(d => d.UthpsUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTHP_REF_US");
        });

        modelBuilder.Entity<UserThpsTransactiontype>(entity =>
        {
            entity.HasKey(e => e.UtttId).HasFillFactor(90);

            entity.ToTable("USER_THPS_TRANSACTIONTYPE", "sls");

            entity.Property(e => e.UtttId).HasColumnName("uttt_id");
            entity.Property(e => e.UtttBuId).HasColumnName("uttt_bu_id");
            entity.Property(e => e.UtttThpsId).HasColumnName("uttt_thps_id");
            entity.Property(e => e.UtttTstId).HasColumnName("uttt_tst_id");
            entity.Property(e => e.UtttUsId).HasColumnName("uttt_us_id");

            entity.HasOne(d => d.UtttBu).WithMany(p => p.UserThpsTransactiontypes)
                .HasForeignKey(d => d.UtttBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uttt_REF_BU");

            entity.HasOne(d => d.UtttTst).WithMany(p => p.UserThpsTransactiontypes)
                .HasForeignKey(d => d.UtttTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uttt_REF_TST");

            entity.HasOne(d => d.UtttUs).WithMany(p => p.UserThpsTransactiontypes)
                .HasForeignKey(d => d.UtttUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_uttt_REF_US");
        });

        modelBuilder.Entity<UserTransactiontype>(entity =>
        {
            entity.HasKey(e => e.UttId).HasFillFactor(90);

            entity.ToTable("USER_TRANSACTIONTYPE", "sls");

            entity.Property(e => e.UttId).HasColumnName("utt_id");
            entity.Property(e => e.UttBuId).HasColumnName("utt_bu_id");
            entity.Property(e => e.UttPlId).HasColumnName("utt_pl_id");
            entity.Property(e => e.UttTstId).HasColumnName("utt_tst_id");
            entity.Property(e => e.UttUsId).HasColumnName("utt_us_id");

            entity.HasOne(d => d.UttBu).WithMany(p => p.UserTransactiontypes)
                .HasForeignKey(d => d.UttBuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTT_REF_BU");

            entity.HasOne(d => d.UttTst).WithMany(p => p.UserTransactiontypes)
                .HasForeignKey(d => d.UttTstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTT_REF_TST");

            entity.HasOne(d => d.UttUs).WithMany(p => p.UserTransactiontypes)
                .HasForeignKey(d => d.UttUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UTT_REF_US");
        });

        modelBuilder.Entity<UserWarehouse>(entity =>
        {
            entity.HasKey(e => e.UswId).HasFillFactor(90);

            entity.ToTable("USER_WAREHOUSE", "sls");

            entity.HasIndex(e => new { e.UswUsId, e.UswPlIdWhs, e.UswIsDefault }, "usw_us_pl_def_idx")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.UswUsId, e.UswPlIdWhs }, "usw_us_pl_idx").HasFillFactor(90);

            entity.Property(e => e.UswId).HasColumnName("usw_id");
            entity.Property(e => e.UswIsDefault)
                .HasDefaultValue((short)1)
                .HasColumnName("usw_is_default");
            entity.Property(e => e.UswIsOwner).HasColumnName("usw_is_owner");
            entity.Property(e => e.UswPlIdWhs).HasColumnName("usw_pl_id_whs");
            entity.Property(e => e.UswUsId).HasColumnName("usw_us_id");

            entity.HasOne(d => d.UswPlIdWhsNavigation).WithMany(p => p.UserWarehouses)
                .HasForeignKey(d => d.UswPlIdWhs)
                .HasConstraintName("FK_USW_REF_PL");

            entity.HasOne(d => d.UswUs).WithMany(p => p.UserWarehouses)
                .HasForeignKey(d => d.UswUsId)
                .HasConstraintName("FK_USW_REF_US");
        });

        modelBuilder.Entity<UserWebSetting>(entity =>
        {
            entity.HasKey(e => e.UswsId).HasFillFactor(90);

            entity.ToTable("USER_WEB_SETTING", "cmn");

            entity.Property(e => e.UswsId).HasColumnName("usws_id");
            entity.Property(e => e.UswsDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("usws_date");
            entity.Property(e => e.UswsGroup)
                .HasMaxLength(30)
                .HasDefaultValue("")
                .HasColumnName("usws_group");
            entity.Property(e => e.UswsKey)
                .HasMaxLength(30)
                .HasColumnName("usws_key");
            entity.Property(e => e.UswsPage)
                .HasMaxLength(255)
                .HasColumnName("usws_page");
            entity.Property(e => e.UswsUsId).HasColumnName("usws_us_id");
            entity.Property(e => e.UswsValue)
                .HasMaxLength(255)
                .HasColumnName("usws_value");

            entity.HasOne(d => d.UswsUs).WithMany(p => p.UserWebSettings)
                .HasForeignKey(d => d.UswsUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USWS_REF_US");
        });

        modelBuilder.Entity<Userpaymentstatus>(entity =>
        {
            entity.HasKey(e => e.UpsId).HasFillFactor(90);

            entity.ToTable("USERPAYMENTSTATUS", "sls");

            entity.Property(e => e.UpsId).HasColumnName("ups_id");
            entity.Property(e => e.UpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ups_code");
            entity.Property(e => e.UpsConfirmationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ups_confirmation_code");
            entity.Property(e => e.UpsDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("ups_description_lan1");
            entity.Property(e => e.UpsDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("ups_description_lan2");
            entity.Property(e => e.UpsDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("ups_description_lan3");
            entity.Property(e => e.UpsLabelCode)
                .HasMaxLength(64)
                .HasColumnName("ups_label_code");
            entity.Property(e => e.UpsOrder)
                .HasDefaultValue(1)
                .HasColumnName("ups_order");
            entity.Property(e => e.UpsStyle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ups_style");
        });

        modelBuilder.Entity<UserpaymentstatusHistory>(entity =>
        {
            entity.HasKey(e => e.UpshId).HasFillFactor(90);

            entity.ToTable("USERPAYMENTSTATUS_HISTORY", "sls");

            entity.Property(e => e.UpshId).HasColumnName("upsh_id");
        });

        modelBuilder.Entity<UserpaymentstatusTransition>(entity =>
        {
            entity.HasKey(e => e.UpstId)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("USERPAYMENTSTATUS_TRANSITION", "sls");

            entity.Property(e => e.UpstId).HasColumnName("upst_id");
            entity.Property(e => e.UpstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("upst_extra_code");
            entity.Property(e => e.UpstUplVsUpdAmount).HasColumnName("upst_upl_vs_upd_amount");
            entity.Property(e => e.UpstUpsIdFrom).HasColumnName("upst_ups_id_from");
            entity.Property(e => e.UpstUpsIdTo).HasColumnName("upst_ups_id_to");
            entity.Property(e => e.UpstUptId).HasColumnName("upst_upt_id");

            entity.HasOne(d => d.UpstUpsIdFromNavigation).WithMany(p => p.UserpaymentstatusTransitionUpstUpsIdFromNavigations)
                .HasForeignKey(d => d.UpstUpsIdFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPST_REF_UPS_FROM");

            entity.HasOne(d => d.UpstUpsIdToNavigation).WithMany(p => p.UserpaymentstatusTransitionUpstUpsIdToNavigations)
                .HasForeignKey(d => d.UpstUpsIdTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPT_REF_UPS_TO");

            entity.HasOne(d => d.UpstUpt).WithMany(p => p.UserpaymentstatusTransitions)
                .HasForeignKey(d => d.UpstUptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPST_REF_UPT");
        });

        modelBuilder.Entity<UserpaymentstatusTransitionProfile>(entity =>
        {
            entity.HasKey(e => e.UptpId)
                .HasName("PK_USERPAYMENTSTATUS_TRANSITIO")
                .HasFillFactor(90);

            entity.ToTable("USERPAYMENTSTATUS_TRANSITION_PROFILE", "sls");

            entity.Property(e => e.UptpId).HasColumnName("uptp_id");
            entity.Property(e => e.UptpPrId).HasColumnName("uptp_pr_id");
            entity.Property(e => e.UptpUpstId).HasColumnName("uptp_upst_id");

            entity.HasOne(d => d.UptpPr).WithMany(p => p.UserpaymentstatusTransitionProfiles)
                .HasForeignKey(d => d.UptpPrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPTP_REF_PR");

            entity.HasOne(d => d.UptpUpst).WithMany(p => p.UserpaymentstatusTransitionProfiles)
                .HasForeignKey(d => d.UptpUpstId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UPTP_REF_UPT");
        });

        modelBuilder.Entity<Userpaymenttype>(entity =>
        {
            entity.HasKey(e => e.UptId).HasFillFactor(90);

            entity.ToTable("USERPAYMENTTYPE", "sls");

            entity.Property(e => e.UptId).HasColumnName("upt_id");
            entity.Property(e => e.UptCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("upt_code");
            entity.Property(e => e.UptDebitCredit).HasColumnName("upt_debit_credit");
            entity.Property(e => e.UptDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("upt_description_lan1");
            entity.Property(e => e.UptDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("upt_description_lan2");
            entity.Property(e => e.UptDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("upt_description_lan3");
        });

        modelBuilder.Entity<UsersCalendar>(entity =>
        {
            entity.HasKey(e => e.UcId).HasFillFactor(90);

            entity.ToTable("USERS_CALENDAR", "cmn");

            entity.Property(e => e.UcId).HasColumnName("uc_id");
            entity.Property(e => e.UcCdIdCt).HasColumnName("uc_cd_id_ct");
            entity.Property(e => e.UcComments)
                .HasMaxLength(255)
                .HasColumnName("uc_comments");
            entity.Property(e => e.UcDate)
                .HasColumnType("datetime")
                .HasColumnName("uc_date");
            entity.Property(e => e.UcUsrId).HasColumnName("uc_usr_id");
            entity.Property(e => e.UcWp1).HasColumnName("uc_wp1");
            entity.Property(e => e.UcWp2).HasColumnName("uc_wp2");
            entity.Property(e => e.UcWp3).HasColumnName("uc_wp3");
            entity.Property(e => e.UcWp4).HasColumnName("uc_wp4");

            entity.HasOne(d => d.UcCdIdCtNavigation).WithMany(p => p.UsersCalendars)
                .HasForeignKey(d => d.UcCdIdCt)
                .HasConstraintName("FK_USERS_CA_REF_CODESC");

            entity.HasOne(d => d.UcUsr).WithMany(p => p.UsersCalendars)
                .HasForeignKey(d => d.UcUsrId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_CA_REF_US");
        });

        modelBuilder.Entity<UsersCalendarSnc>(entity =>
        {
            entity.HasKey(e => new { e.SUcId, e.SUcSmId, e.SUcVersion }).HasFillFactor(90);

            entity.ToTable("USERS_CALENDAR_SNC", "syn");

            entity.Property(e => e.SUcId).HasColumnName("s_uc_id");
            entity.Property(e => e.SUcSmId).HasColumnName("s_uc_sm_id");
            entity.Property(e => e.SUcVersion)
                .HasMaxLength(25)
                .HasColumnName("s_uc_version");
            entity.Property(e => e.SUcCdIdCt).HasColumnName("s_uc_cd_id_ct");
            entity.Property(e => e.SUcComments)
                .HasMaxLength(255)
                .HasColumnName("s_uc_comments");
            entity.Property(e => e.SUcDate)
                .HasColumnType("datetime")
                .HasColumnName("s_uc_date");
            entity.Property(e => e.SUcUsrId).HasColumnName("s_uc_usr_id");
            entity.Property(e => e.SUcWp1).HasColumnName("s_uc_wp1");
            entity.Property(e => e.SUcWp2).HasColumnName("s_uc_wp2");
            entity.Property(e => e.SUcWp3).HasColumnName("s_uc_wp3");
            entity.Property(e => e.SUcWp4).HasColumnName("s_uc_wp4");
        });

        modelBuilder.Entity<VApiSession>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_API_SESSION", "sec");

            entity.Property(e => e.ApsDateCreate)
                .HasColumnType("datetime")
                .HasColumnName("aps_date_create");
            entity.Property(e => e.ApsExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("aps_expiry_date");
            entity.Property(e => e.ApsId).HasColumnName("aps_id");
            entity.Property(e => e.ApsKey)
                .HasMaxLength(128)
                .HasColumnName("aps_key");
            entity.Property(e => e.ApsLastActionDate)
                .HasColumnType("datetime")
                .HasColumnName("aps_last_action_date");
            entity.Property(e => e.ApsStatus).HasColumnName("aps_status");
            entity.Property(e => e.ApsStatusDescription)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("aps_status_description");
            entity.Property(e => e.ApsToken)
                .HasMaxLength(255)
                .HasColumnName("aps_token");
            entity.Property(e => e.ApsUsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("aps_us_code");
            entity.Property(e => e.ApsUsId).HasColumnName("aps_us_id");
            entity.Property(e => e.ApsUsShortName)
                .HasMaxLength(25)
                .HasColumnName("aps_us_short_name");
            entity.Property(e => e.ApsValidityMinutes).HasColumnName("aps_validity_minutes");
        });

        modelBuilder.Entity<VCallCycle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CALL_CYCLE", "cmn");

            entity.Property(e => e.CcActive).HasColumnName("cc_active");
            entity.Property(e => e.CcCdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cc_cd_code");
            entity.Property(e => e.CcCdIdCyt).HasColumnName("cc_cd_id_cyt");
            entity.Property(e => e.CcCycleLength).HasColumnName("cc_cycle_length");
            entity.Property(e => e.CcDescription)
                .HasMaxLength(200)
                .HasColumnName("cc_description");
            entity.Property(e => e.CcFromDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_from_date");
            entity.Property(e => e.CcId).HasColumnName("cc_id");
            entity.Property(e => e.CcToDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_to_date");
            entity.Property(e => e.CcUsId).HasColumnName("cc_us_id");
            entity.Property(e => e.CcWorkdays)
                .HasMaxLength(20)
                .HasColumnName("cc_workdays");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
            entity.Property(e => e.UsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("us_code");
            entity.Property(e => e.UsFirstName)
                .HasMaxLength(50)
                .HasColumnName("us_first_name");
            entity.Property(e => e.UsLastName)
                .HasMaxLength(50)
                .HasColumnName("us_last_name");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<VCallCycleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CALL_CYCLE_DETAIL", "cmn");

            entity.Property(e => e.CcdActualVisitDate)
                .HasColumnType("datetime")
                .HasColumnName("ccd_actual_visit_date");
            entity.Property(e => e.CcdPlannedVisitDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("ccd_planned_visit_date");
            entity.Property(e => e.CcdThpsId).HasColumnName("ccd_thps_id");
            entity.Property(e => e.CcdUsId).HasColumnName("ccd_us_id");
        });

        modelBuilder.Entity<VCodescBank>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_BANK", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescCur>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_CUR", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescIbd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_IBD", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescIgp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_IGP", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescPaqp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_PAQP", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescPlt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_PLT", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescPrtype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_PRTYPE", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescPtp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_PTP", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescRit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_RIT", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCodescSrdpt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_CODESC_SRDPT", "cmn");

            entity.Property(e => e.CdActive).HasColumnName("cd_active");
            entity.Property(e => e.CdBuId).HasColumnName("cd_bu_id");
            entity.Property(e => e.CdCdId).HasColumnName("cd_cd_id");
            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.CdCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_create_date");
            entity.Property(e => e.CdDate1)
                .HasColumnType("datetime")
                .HasColumnName("cd_date1");
            entity.Property(e => e.CdDate2)
                .HasColumnType("datetime")
                .HasColumnName("cd_date2");
            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CdFcCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cd_fc_code");
            entity.Property(e => e.CdFcId).HasColumnName("cd_fc_id");
            entity.Property(e => e.CdHasChildren).HasColumnName("cd_has_children");
            entity.Property(e => e.CdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_id");
            entity.Property(e => e.CdIsSystem).HasColumnName("cd_is_system");
            entity.Property(e => e.CdLevel).HasColumnName("cd_level");
            entity.Property(e => e.CdMdId).HasColumnName("cd_md_id");
            entity.Property(e => e.CdModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("cd_modified_date");
            entity.Property(e => e.CdNum1).HasColumnName("cd_num1");
            entity.Property(e => e.CdNum2).HasColumnName("cd_num2");
            entity.Property(e => e.CdText1)
                .HasMaxLength(100)
                .HasColumnName("cd_text1");
            entity.Property(e => e.CdText2)
                .HasMaxLength(100)
                .HasColumnName("cd_text2");
        });

        modelBuilder.Entity<VCollectionview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_COLLECTIONVIEW", "sls");

            entity.Property(e => e.CvCdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan1");
            entity.Property(e => e.CvCdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan2");
            entity.Property(e => e.CvCdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan3");
            entity.Property(e => e.CvDiDate)
                .HasColumnType("datetime")
                .HasColumnName("cv_di_date");
            entity.Property(e => e.CvDusShortName)
                .HasMaxLength(25)
                .HasColumnName("cv_dus_short_name");
            entity.Property(e => e.CvId).HasColumnName("cv_id");
            entity.Property(e => e.CvNumber)
                .HasMaxLength(16)
                .HasColumnName("cv_number");
            entity.Property(e => e.CvPaAppSmall).HasColumnName("cv_pa_app_small");
            entity.Property(e => e.CvPaApproved)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_approved");
            entity.Property(e => e.CvPaId).HasColumnName("cv_pa_id");
            entity.Property(e => e.CvPaTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("cv_pa_total_amount");
            entity.Property(e => e.CvPaVoid)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_void");
            entity.Property(e => e.CvPaVoidSmall).HasColumnName("cv_pa_void_small");
            entity.Property(e => e.CvThpId).HasColumnName("cv_thp_id");
            entity.Property(e => e.CvThpNameLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan1");
            entity.Property(e => e.CvThpNameLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan2");
            entity.Property(e => e.CvThpNameLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan3");
            entity.Property(e => e.CvUsId).HasColumnName("cv_us_id");
            entity.Property(e => e.RttRtId).HasColumnName("rtt_rt_id");
        });

        modelBuilder.Entity<VCollectionviewForSearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_COLLECTIONVIEW_ForSearch", "sls");

            entity.Property(e => e.CvCdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan1");
            entity.Property(e => e.CvCdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan2");
            entity.Property(e => e.CvCdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan3");
            entity.Property(e => e.CvDiDate)
                .HasColumnType("datetime")
                .HasColumnName("cv_di_date");
            entity.Property(e => e.CvDusShortName)
                .HasMaxLength(25)
                .HasColumnName("cv_dus_short_name");
            entity.Property(e => e.CvId).HasColumnName("cv_id");
            entity.Property(e => e.CvNumber)
                .HasMaxLength(16)
                .HasColumnName("cv_number");
            entity.Property(e => e.CvPaAppSmall).HasColumnName("cv_pa_app_small");
            entity.Property(e => e.CvPaApproved)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_approved");
            entity.Property(e => e.CvPaId).HasColumnName("cv_pa_id");
            entity.Property(e => e.CvPaTotalAmount)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("cv_pa_total_amount");
            entity.Property(e => e.CvPaVoid)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_void");
            entity.Property(e => e.CvPaVoidSmall).HasColumnName("cv_pa_void_small");
            entity.Property(e => e.CvThpId).HasColumnName("cv_thp_id");
            entity.Property(e => e.CvThpNameLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan1");
            entity.Property(e => e.CvThpNameLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan2");
            entity.Property(e => e.CvThpNameLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan3");
            entity.Property(e => e.CvUsId).HasColumnName("cv_us_id");
        });

        modelBuilder.Entity<VCollectionviewReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_COLLECTIONVIEW_Report", "sls");

            entity.Property(e => e.CdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan1");
            entity.Property(e => e.CdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan2");
            entity.Property(e => e.CdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cd_description_lan3");
            entity.Property(e => e.CvCdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cv_cd_code");
            entity.Property(e => e.CvCdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan1");
            entity.Property(e => e.CvCdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan2");
            entity.Property(e => e.CvCdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_cd_description_lan3");
            entity.Property(e => e.CvCdId).HasColumnName("cv_cd_id");
            entity.Property(e => e.CvDepartment1)
                .HasMaxLength(100)
                .HasColumnName("cv_department1");
            entity.Property(e => e.CvDepartment2)
                .HasMaxLength(100)
                .HasColumnName("cv_department2");
            entity.Property(e => e.CvDepartment3)
                .HasMaxLength(100)
                .HasColumnName("cv_department3");
            entity.Property(e => e.CvDepartmentId).HasColumnName("cv_department_id");
            entity.Property(e => e.CvDiDate)
                .HasColumnType("datetime")
                .HasColumnName("cv_di_date");
            entity.Property(e => e.CvDusShortName)
                .HasMaxLength(25)
                .HasColumnName("cv_dus_short_name");
            entity.Property(e => e.CvNumber)
                .HasMaxLength(16)
                .HasColumnName("cv_number");
            entity.Property(e => e.CvPaAppSmall).HasColumnName("cv_pa_app_small");
            entity.Property(e => e.CvPaApproved)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_approved");
            entity.Property(e => e.CvPaId).HasColumnName("cv_pa_id");
            entity.Property(e => e.CvPaTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("cv_pa_total_amount");
            entity.Property(e => e.CvPaType).HasColumnName("cv_pa_type");
            entity.Property(e => e.CvPaTypeDesc1)
                .HasMaxLength(255)
                .HasColumnName("cv_pa_type_desc1");
            entity.Property(e => e.CvPaTypeDesc2)
                .HasMaxLength(255)
                .HasColumnName("cv_pa_type_desc2");
            entity.Property(e => e.CvPaTypeDesc3)
                .HasMaxLength(255)
                .HasColumnName("cv_pa_type_desc3");
            entity.Property(e => e.CvPaVoid)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cv_pa_void");
            entity.Property(e => e.CvPaVoidSmall).HasColumnName("cv_pa_void_small");
            entity.Property(e => e.CvPsId).HasColumnName("cv_ps_id");
            entity.Property(e => e.CvStatus1)
                .HasMaxLength(200)
                .HasColumnName("cv_status1");
            entity.Property(e => e.CvStatus2)
                .HasMaxLength(200)
                .HasColumnName("cv_status2");
            entity.Property(e => e.CvStatus3)
                .HasMaxLength(200)
                .HasColumnName("cv_status3");
            entity.Property(e => e.CvThpCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cv_thp_code");
            entity.Property(e => e.CvThpId).HasColumnName("cv_thp_id");
            entity.Property(e => e.CvThpNameLan1)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan1");
            entity.Property(e => e.CvThpNameLan2)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan2");
            entity.Property(e => e.CvThpNameLan3)
                .HasMaxLength(255)
                .HasColumnName("cv_thp_name_lan3");
            entity.Property(e => e.CvUsId).HasColumnName("cv_us_id");
            entity.Property(e => e.PadCcDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("pad_cc_date");
            entity.Property(e => e.PadCcNumber)
                .HasMaxLength(16)
                .HasColumnName("pad_cc_number");
            entity.Property(e => e.ThpmCdDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thpm_cd_description_lan1");
            entity.Property(e => e.ThpmCdDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thpm_cd_description_lan2");
            entity.Property(e => e.ThpmCdDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thpm_cd_description_lan3");
        });

        modelBuilder.Entity<VGenerateSyncDownload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERATE_SYNC_DOWNLOAD", "cmn");

            entity.Property(e => e.C)
                .HasMaxLength(177)
                .HasColumnName("c");
            entity.Property(e => e.OrdinalPosition).HasColumnName("ordinal_position");
            entity.Property(e => e.TableName)
                .HasMaxLength(128)
                .HasColumnName("table_name");
        });

        modelBuilder.Entity<VGenericSearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GenericSearch", "cmn");

            entity.Property(e => e.ViewgsId).HasColumnName("viewgs_id");
            entity.Property(e => e.ViewgsLink)
                .HasMaxLength(86)
                .IsUnicode(false)
                .HasColumnName("viewgs_link");
            entity.Property(e => e.ViewgsMaintableid).HasColumnName("viewgs_maintableid");
            entity.Property(e => e.ViewgsMaintablelink)
                .HasMaxLength(52)
                .IsUnicode(false)
                .HasColumnName("viewgs_maintablelink");
            entity.Property(e => e.ViewgsName)
                .HasMaxLength(4000)
                .HasColumnName("viewgs_name");
            entity.Property(e => e.ViewgsThetable)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("viewgs_thetable");
        });

        modelBuilder.Entity<VGenericTarget>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET", "sls");

            entity.Property(e => e.VgtCodCdId3).HasColumnName("vgt_cod_cd_id3");
            entity.Property(e => e.VgtCustomer)
                .HasMaxLength(255)
                .HasColumnName("vgt_customer");
            entity.Property(e => e.VgtGeoLocation)
                .HasMaxLength(255)
                .HasColumnName("vgt_geo_location");
            entity.Property(e => e.VgtId).HasColumnName("vgt_id");
            entity.Property(e => e.VgtItem)
                .HasMaxLength(255)
                .HasColumnName("vgt_item");
            entity.Property(e => e.VgtItemBrand)
                .HasMaxLength(255)
                .HasColumnName("vgt_item_brand");
            entity.Property(e => e.VgtItemGroup)
                .HasMaxLength(255)
                .HasColumnName("vgt_item_group");
            entity.Property(e => e.VgtLevel1Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgt_level1_code");
            entity.Property(e => e.VgtLevel1Description)
                .HasMaxLength(255)
                .HasColumnName("vgt_level1_description");
            entity.Property(e => e.VgtLevel1Id).HasColumnName("vgt_level1_id");
            entity.Property(e => e.VgtLevel1TitleDescription)
                .HasMaxLength(255)
                .HasColumnName("vgt_level1_title_description");
            entity.Property(e => e.VgtLevel2Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgt_level2_code");
            entity.Property(e => e.VgtLevel2Description)
                .HasMaxLength(255)
                .HasColumnName("vgt_level2_description");
            entity.Property(e => e.VgtLevel2Id).HasColumnName("vgt_level2_id");
            entity.Property(e => e.VgtLevel2TitleDescription)
                .HasMaxLength(255)
                .HasColumnName("vgt_level2_title_description");
            entity.Property(e => e.VgtLevel3Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgt_level3_code");
            entity.Property(e => e.VgtLevel3Description)
                .HasMaxLength(255)
                .HasColumnName("vgt_level3_description");
            entity.Property(e => e.VgtLevel3Id).HasColumnName("vgt_level3_id");
            entity.Property(e => e.VgtLevel3TitleDescription)
                .HasMaxLength(255)
                .HasColumnName("vgt_level3_title_description");
            entity.Property(e => e.VgtSalesrep)
                .HasMaxLength(50)
                .HasColumnName("vgt_salesrep");
            entity.Property(e => e.VgtTaActive).HasColumnName("vgt_ta_active");
            entity.Property(e => e.VgtTaBuId).HasColumnName("vgt_ta_bu_id");
            entity.Property(e => e.VgtTaCdIdCur).HasColumnName("vgt_ta_cd_id_cur");
            entity.Property(e => e.VgtTaCdIdTrc).HasColumnName("vgt_ta_cd_id_trc");
            entity.Property(e => e.VgtTaCdIdTrs1).HasColumnName("vgt_ta_cd_id_trs_1");
            entity.Property(e => e.VgtTaCdIdTrs2).HasColumnName("vgt_ta_cd_id_trs_2");
            entity.Property(e => e.VgtTaCdIdTrs3).HasColumnName("vgt_ta_cd_id_trs_3");
            entity.Property(e => e.VgtTaCdIdTrs4).HasColumnName("vgt_ta_cd_id_trs_4");
            entity.Property(e => e.VgtTaCdIdTrs5).HasColumnName("vgt_ta_cd_id_trs_5");
            entity.Property(e => e.VgtTaCdIdTrs6).HasColumnName("vgt_ta_cd_id_trs_6");
            entity.Property(e => e.VgtTaCdIdTrt).HasColumnName("vgt_ta_cd_id_trt");
            entity.Property(e => e.VgtTaCode)
                .HasMaxLength(50)
                .HasColumnName("vgt_ta_code");
            entity.Property(e => e.VgtTaCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("vgt_ta_create_date");
            entity.Property(e => e.VgtTaDescription)
                .HasMaxLength(250)
                .HasColumnName("vgt_ta_description");
            entity.Property(e => e.VgtTaUsId).HasColumnName("vgt_ta_us_id");
            entity.Property(e => e.VgtTaYear).HasColumnName("vgt_ta_year");
            entity.Property(e => e.VgtTdApr)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_apr");
            entity.Property(e => e.VgtTdAprAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_apr_achieved");
            entity.Property(e => e.VgtTdAug)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_aug");
            entity.Property(e => e.VgtTdAugAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_aug_achieved");
            entity.Property(e => e.VgtTdCdIdIbd).HasColumnName("vgt_td_cd_id_ibd");
            entity.Property(e => e.VgtTdCdIdIgp).HasColumnName("vgt_td_cd_id_igp");
            entity.Property(e => e.VgtTdDec)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_dec");
            entity.Property(e => e.VgtTdDecAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_dec_achieved");
            entity.Property(e => e.VgtTdFeb)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_feb");
            entity.Property(e => e.VgtTdFebAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_feb_achieved");
            entity.Property(e => e.VgtTdGlId).HasColumnName("vgt_td_gl_id");
            entity.Property(e => e.VgtTdId).HasColumnName("vgt_td_id");
            entity.Property(e => e.VgtTdItId).HasColumnName("vgt_td_it_id");
            entity.Property(e => e.VgtTdJan)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_jan");
            entity.Property(e => e.VgtTdJanAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_jan_achieved");
            entity.Property(e => e.VgtTdJul)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_jul");
            entity.Property(e => e.VgtTdJulAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_jul_achieved");
            entity.Property(e => e.VgtTdJun)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_jun");
            entity.Property(e => e.VgtTdJunAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_jun_achieved");
            entity.Property(e => e.VgtTdMai)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_mai");
            entity.Property(e => e.VgtTdMar)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_mar");
            entity.Property(e => e.VgtTdMarAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_mar_achieved");
            entity.Property(e => e.VgtTdMayAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_may_achieved");
            entity.Property(e => e.VgtTdNov)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_nov");
            entity.Property(e => e.VgtTdNovAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_nov_achieved");
            entity.Property(e => e.VgtTdOct)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_oct");
            entity.Property(e => e.VgtTdOctAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_oct_achieved");
            entity.Property(e => e.VgtTdSep)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("vgt_td_sep");
            entity.Property(e => e.VgtTdSepAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_sep_achieved");
            entity.Property(e => e.VgtTdTaId).HasColumnName("vgt_td_ta_id");
            entity.Property(e => e.VgtTdThpsId).HasColumnName("vgt_td_thps_id");
            entity.Property(e => e.VgtTdTotal)
                .HasColumnType("numeric(27, 5)")
                .HasColumnName("vgt_td_total");
            entity.Property(e => e.VgtTdTotalAchieved)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("vgt_td_total_achieved");
            entity.Property(e => e.VgtTdUsId).HasColumnName("vgt_td_us_id");
            entity.Property(e => e.VgtTrcCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgt_trc_code");
            entity.Property(e => e.VgtTrcDescription)
                .HasMaxLength(255)
                .HasColumnName("vgt_trc_description");
            entity.Property(e => e.VgtTypeCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgt_type_code");
            entity.Property(e => e.VgtTypeDescription)
                .HasMaxLength(255)
                .HasColumnName("vgt_type_description");
        });

        modelBuilder.Entity<VGenericTargetAchieved>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedGeo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_geo", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_geo");
            entity.Property(e => e.VgtaAugGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_geo");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_geo");
            entity.Property(e => e.VgtaFebGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_geo");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_geo");
            entity.Property(e => e.VgtaJulGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_geo");
            entity.Property(e => e.VgtaJunGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_geo");
            entity.Property(e => e.VgtaMarGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_geo");
            entity.Property(e => e.VgtaMayGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_geo");
            entity.Property(e => e.VgtaNovGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_geo");
            entity.Property(e => e.VgtaOctGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_geo");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepGeo)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_geo");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedGeoRtn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_geo_rtn", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_geo_rtn");
            entity.Property(e => e.VgtaAugGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_geo_rtn");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_geo_rtn");
            entity.Property(e => e.VgtaFebGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_geo_rtn");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_geo_rtn");
            entity.Property(e => e.VgtaJulGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_geo_rtn");
            entity.Property(e => e.VgtaJunGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_geo_rtn");
            entity.Property(e => e.VgtaMarGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_geo_rtn");
            entity.Property(e => e.VgtaMayGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_geo_rtn");
            entity.Property(e => e.VgtaNovGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_geo_rtn");
            entity.Property(e => e.VgtaOctGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_geo_rtn");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepGeoRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_geo_rtn");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedItm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_itm", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedItmGrp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_itm_grp", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedItmIbd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_itm_ibd", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedItmIbdRtn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_itm_ibd_rtn", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedItmRtn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_itm_rtn", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedSlr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_slr", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_slr");
            entity.Property(e => e.VgtaAugSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_slr");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_slr");
            entity.Property(e => e.VgtaFebSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_slr");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_slr");
            entity.Property(e => e.VgtaJulSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_slr");
            entity.Property(e => e.VgtaJunSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_slr");
            entity.Property(e => e.VgtaMarSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_slr");
            entity.Property(e => e.VgtaMaySlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_slr");
            entity.Property(e => e.VgtaNovSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_slr");
            entity.Property(e => e.VgtaOctSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_slr");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepSlr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_slr");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedSlrCol>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_slr_col", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedSlrRtn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_slr_RTN", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_slr_rtn");
            entity.Property(e => e.VgtaAugSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_slr_rtn");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_slr_rtn");
            entity.Property(e => e.VgtaFebSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_slr_rtn");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_slr_rtn");
            entity.Property(e => e.VgtaJulSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_slr_rtn");
            entity.Property(e => e.VgtaJunSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_slr_rtn");
            entity.Property(e => e.VgtaMarSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_slr_rtn");
            entity.Property(e => e.VgtaMaySlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_slr_rtn");
            entity.Property(e => e.VgtaNovSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_slr_rtn");
            entity.Property(e => e.VgtaOctSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_slr_rtn");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepSlrRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_slr_rtn");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedThp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_thps", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_thps");
            entity.Property(e => e.VgtaAugThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_thps");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_thps");
            entity.Property(e => e.VgtaFebThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_thps");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_thps");
            entity.Property(e => e.VgtaJulThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_thps");
            entity.Property(e => e.VgtaJunThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_thps");
            entity.Property(e => e.VgtaMarThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_thps");
            entity.Property(e => e.VgtaMayThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_thps");
            entity.Property(e => e.VgtaNovThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_thps");
            entity.Property(e => e.VgtaOctThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_thps");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepThps)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_thps");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedThpsCol>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_thps_col", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedThpsRtn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_thps_rtn", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaAprThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr_thps_rtn");
            entity.Property(e => e.VgtaAugThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug_thps_rtn");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDecThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec_thps_rtn");
            entity.Property(e => e.VgtaFebThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb_thps_rtn");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJanThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan_thps_rtn");
            entity.Property(e => e.VgtaJulThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul_thps_rtn");
            entity.Property(e => e.VgtaJunThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun_thps_rtn");
            entity.Property(e => e.VgtaMarThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar_thps_rtn");
            entity.Property(e => e.VgtaMayThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may_thps_rtn");
            entity.Property(e => e.VgtaNovThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov_thps_rtn");
            entity.Property(e => e.VgtaOctThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct_thps_rtn");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSepThpsRtn)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep_thps_rtn");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGenericTargetAchievedTryingToImprovePerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GENERIC_TARGET_Achieved_TryingToImprovePerformance", "sls");

            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VgtaApr)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_apr");
            entity.Property(e => e.VgtaAug)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_aug");
            entity.Property(e => e.VgtaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vgta_code");
            entity.Property(e => e.VgtaDec)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_dec");
            entity.Property(e => e.VgtaFeb)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_feb");
            entity.Property(e => e.VgtaId).HasColumnName("vgta_id");
            entity.Property(e => e.VgtaJan)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jan");
            entity.Property(e => e.VgtaJul)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jul");
            entity.Property(e => e.VgtaJun)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_jun");
            entity.Property(e => e.VgtaMar)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_mar");
            entity.Property(e => e.VgtaMay)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_may");
            entity.Property(e => e.VgtaNov)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_nov");
            entity.Property(e => e.VgtaOct)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_oct");
            entity.Property(e => e.VgtaSection)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_section");
            entity.Property(e => e.VgtaSep)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_sep");
            entity.Property(e => e.VgtaTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("vgta_total");
            entity.Property(e => e.VgtaType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_type");
            entity.Property(e => e.VgtaValuetype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vgta_valuetype");
        });

        modelBuilder.Entity<VGeofenceGeography>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_GEOFENCE_GEOGRAPHY", "rwt");

            entity.Property(e => e.CGfId).HasColumnName("c_gf_id");
            entity.Property(e => e.Invsqkm2).HasColumnName("invsqkm2");
            entity.Property(e => e.Sqkm2).HasColumnName("sqkm2");
        });

        modelBuilder.Entity<VGeolocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_Geolocation", "cmn");

            entity.Property(e => e.Fullpath)
                .HasMaxLength(1002)
                .HasColumnName("fullpath");
            entity.Property(e => e.GlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan1");
            entity.Property(e => e.GlGlId).HasColumnName("gl_gl_id");
            entity.Property(e => e.GlId).HasColumnName("gl_id");
        });

        modelBuilder.Entity<VIcfvItembrand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ICFV_itembrand", "cmn");

            entity.Property(e => e.IcfvBuId).HasColumnName("icfv_bu_id");
            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan1");
            entity.Property(e => e.IcfvIcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan2");
            entity.Property(e => e.IcfvIcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
        });

        modelBuilder.Entity<VIcfvItemgroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ICFV_itemgroup", "cmn");

            entity.Property(e => e.IcfvBuId).HasColumnName("icfv_bu_id");
            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan1");
            entity.Property(e => e.IcfvIcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan2");
            entity.Property(e => e.IcfvIcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
        });

        modelBuilder.Entity<VItemMovement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_MOVEMENTS", "sls");

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.CurrentStock)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("current_stock");
            entity.Property(e => e.GrossSoldQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("gross_sold_quantity");
            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("item_code");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(255)
                .HasColumnName("item_description");
            entity.Property(e => e.LoadedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("loaded_quantity");
            entity.Property(e => e.PlId).HasColumnName("pl_id");
            entity.Property(e => e.ReturnVoidedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("return_voided_quantity");
            entity.Property(e => e.ReturnedBadQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("returned_bad_quantity");
            entity.Property(e => e.ReturnedGoodQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("returned_good_quantity");
            entity.Property(e => e.SoldQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("sold_quantity");
            entity.Property(e => e.StockCalculated)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("stock_calculated");
            entity.Property(e => e.UnloadedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("unloaded_quantity");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomName)
                .HasMaxLength(50)
                .HasColumnName("uom_name");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.UserCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("user_code");
            entity.Property(e => e.UserName)
                .HasMaxLength(101)
                .HasColumnName("user_name");
            entity.Property(e => e.VoidedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("voided_quantity");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse_code");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("warehouse_name");
        });

        modelBuilder.Entity<VItemMovementsByPack>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_MOVEMENTS_BY_PACK", "sls");

            entity.Property(e => e.CurrentStock)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("current_stock");
            entity.Property(e => e.GrossSoldQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("gross_sold_quantity");
            entity.Property(e => e.ItBuId).HasColumnName("it_bu_id");
            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("item_code");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(255)
                .HasColumnName("item_description");
            entity.Property(e => e.LoadedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("loaded_quantity");
            entity.Property(e => e.PlId).HasColumnName("pl_id");
            entity.Property(e => e.ReturnVoidedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("return_voided_quantity");
            entity.Property(e => e.ReturnedBadQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("returned_bad_quantity");
            entity.Property(e => e.ReturnedGoodQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("returned_good_quantity");
            entity.Property(e => e.SoldQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("sold_quantity");
            entity.Property(e => e.StockCalculated)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("stock_calculated");
            entity.Property(e => e.UnloadedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("unloaded_quantity");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomName)
                .HasMaxLength(50)
                .HasColumnName("uom_name");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.UserCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("user_code");
            entity.Property(e => e.UserName)
                .HasMaxLength(101)
                .HasColumnName("user_name");
            entity.Property(e => e.VoidedQuantity)
                .HasColumnType("numeric(16, 3)")
                .HasColumnName("voided_quantity");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse_code");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("warehouse_name");
        });

        modelBuilder.Entity<VItemMovementsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_MOVEMENTS_DETAILS", "sls");

            entity.Property(e => e.ImdBuId).HasColumnName("imd_bu_id");
            entity.Property(e => e.ImdCustomerCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_customer_code");
            entity.Property(e => e.ImdCustomerName)
                .HasMaxLength(255)
                .HasColumnName("imd_customer_name");
            entity.Property(e => e.ImdDate)
                .HasColumnType("datetime")
                .HasColumnName("imd_date");
            entity.Property(e => e.ImdItId).HasColumnName("imd_it_id");
            entity.Property(e => e.ImdItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_item_code");
            entity.Property(e => e.ImdItemDescription)
                .HasMaxLength(255)
                .HasColumnName("imd_item_description");
            entity.Property(e => e.ImdItemDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("imd_item_description_ar");
            entity.Property(e => e.ImdMvStatusCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_mv_status_code");
            entity.Property(e => e.ImdMvStatusDescription)
                .HasMaxLength(255)
                .HasColumnName("imd_mv_status_description");
            entity.Property(e => e.ImdMvTypeCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("imd_mv_type_code");
            entity.Property(e => e.ImdMvTypeDescription)
                .HasMaxLength(50)
                .HasColumnName("imd_mv_type_description");
            entity.Property(e => e.ImdNumber)
                .HasMaxLength(40)
                .HasColumnName("imd_number");
            entity.Property(e => e.ImdPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("imd_price");
            entity.Property(e => e.ImdQuantity)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("imd_quantity");
            entity.Property(e => e.ImdUsId).HasColumnName("imd_us_id");
            entity.Property(e => e.ImdUserCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("imd_user_code");
            entity.Property(e => e.ImdUserName)
                .HasMaxLength(25)
                .HasColumnName("imd_user_name");
            entity.Property(e => e.ImdWarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("imd_warehouse_code");
            entity.Property(e => e.ImdWarehouseName)
                .HasMaxLength(100)
                .HasColumnName("imd_warehouse_name");
        });

        modelBuilder.Entity<VItemMovementsDetailsByPack>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_MOVEMENTS_DETAILS_BY_PACK", "sls");

            entity.Property(e => e.ImdBuId).HasColumnName("imd_bu_id");
            entity.Property(e => e.ImdConvValue).HasColumnName("imd_conv_value");
            entity.Property(e => e.ImdCustomerCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_customer_code");
            entity.Property(e => e.ImdCustomerName)
                .HasMaxLength(255)
                .HasColumnName("imd_customer_name");
            entity.Property(e => e.ImdDate)
                .HasColumnType("datetime")
                .HasColumnName("imd_date");
            entity.Property(e => e.ImdItId).HasColumnName("imd_it_id");
            entity.Property(e => e.ImdItemCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_item_code");
            entity.Property(e => e.ImdItemDescription)
                .HasMaxLength(255)
                .HasColumnName("imd_item_description");
            entity.Property(e => e.ImdItemDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("imd_item_description_ar");
            entity.Property(e => e.ImdMvStatusCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("imd_mv_status_code");
            entity.Property(e => e.ImdMvStatusDescription)
                .HasMaxLength(255)
                .HasColumnName("imd_mv_status_description");
            entity.Property(e => e.ImdMvTypeCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("imd_mv_type_code");
            entity.Property(e => e.ImdMvTypeDescription)
                .HasMaxLength(50)
                .HasColumnName("imd_mv_type_description");
            entity.Property(e => e.ImdNumber)
                .HasMaxLength(40)
                .HasColumnName("imd_number");
            entity.Property(e => e.ImdPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("imd_price");
            entity.Property(e => e.ImdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("imd_quantity");
            entity.Property(e => e.ImdUsId).HasColumnName("imd_us_id");
            entity.Property(e => e.ImdUserCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("imd_user_code");
            entity.Property(e => e.ImdUserName)
                .HasMaxLength(25)
                .HasColumnName("imd_user_name");
            entity.Property(e => e.ImdWarehouseCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("imd_warehouse_code");
            entity.Property(e => e.ImdWarehouseName)
                .HasMaxLength(100)
                .HasColumnName("imd_warehouse_name");
        });

        modelBuilder.Entity<VItemPrice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_PRICE");

            entity.Property(e => e.LpiDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_discount");
            entity.Property(e => e.LpiId).HasColumnName("lpi_id");
            entity.Property(e => e.LpiItId).HasColumnName("lpi_it_id");
            entity.Property(e => e.LpiLpId).HasColumnName("lpi_lp_id");
            entity.Property(e => e.LpiMaxDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_max_discount");
            entity.Property(e => e.LpiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_price");
            entity.Property(e => e.LpiUomId).HasColumnName("lpi_uom_id");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomNameLan1)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan1");
            entity.Property(e => e.UomNameLan2)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan2");
            entity.Property(e => e.UomNameLan3)
                .HasMaxLength(50)
                .HasColumnName("uom_name_lan3");
            entity.Property(e => e.UomRoundingPrecision).HasColumnName("uom_rounding_precision");
        });

        modelBuilder.Entity<VItemUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_UOM", "cmn");

            entity.Property(e => e.ItuConvValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itu_conv_value");
            entity.Property(e => e.ItuFullName)
                .HasMaxLength(308)
                .HasColumnName("itu_full_name");
            entity.Property(e => e.ItuId).HasColumnName("itu_id");
            entity.Property(e => e.ItuItId).HasColumnName("itu_it_id");
            entity.Property(e => e.ItuShortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("itu_shortname");
            entity.Property(e => e.ItuUomId).HasColumnName("itu_uom_id");
            entity.Property(e => e.ItuUomNameLan1)
                .HasMaxLength(50)
                .HasColumnName("itu_uom_name_lan1");
            entity.Property(e => e.ItuUomNameLan2)
                .HasMaxLength(50)
                .HasColumnName("itu_uom_name_lan2");
            entity.Property(e => e.ItuUomNameLan3)
                .HasMaxLength(50)
                .HasColumnName("itu_uom_name_lan3");
        });

        modelBuilder.Entity<VItemUomMatrixConv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_UOM_MATRIX_CONV", "cmn");

            entity.Property(e => e.IuxConv).HasColumnName("iux_conv");
            entity.Property(e => e.IuxConvInv).HasColumnName("iux_conv_inv");
            entity.Property(e => e.IuxItId).HasColumnName("iux_it_id");
            entity.Property(e => e.IuxShortnameF)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("iux_shortname_f");
            entity.Property(e => e.IuxShortnameT)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("iux_shortname_t");
            entity.Property(e => e.IuxUomIdF).HasColumnName("iux_uom_id_f");
            entity.Property(e => e.IuxUomIdT).HasColumnName("iux_uom_id_t");
        });

        modelBuilder.Entity<VItemWarehouseAvailable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_WAREHOUSE_AVAILABLE", "sls");

            entity.Property(e => e.IwaAvailableQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_available_quantity");
            entity.Property(e => e.IwaItId).HasColumnName("iwa_it_id");
            entity.Property(e => e.IwaMvQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_mv_quantity");
            entity.Property(e => e.IwaPlId).HasColumnName("iwa_pl_id");
            entity.Property(e => e.IwaReservedQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_reserved_quantity");
            entity.Property(e => e.IwaStockQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_stock_quantity");
            entity.Property(e => e.IwaTsQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_ts_quantity");
            entity.Property(e => e.IwaUomId).HasColumnName("iwa_uom_id");
        });

        modelBuilder.Entity<VItemWarehouseAvailable20210313>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEM_WAREHOUSE_AVAILABLE_20210313", "sls");

            entity.Property(e => e.IwaAvailableQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_available_quantity");
            entity.Property(e => e.IwaItId).HasColumnName("iwa_it_id");
            entity.Property(e => e.IwaMvQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_mv_quantity");
            entity.Property(e => e.IwaPlId).HasColumnName("iwa_pl_id");
            entity.Property(e => e.IwaReservedQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_reserved_quantity");
            entity.Property(e => e.IwaStockQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_stock_quantity");
            entity.Property(e => e.IwaTsQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("iwa_ts_quantity");
            entity.Property(e => e.IwaUomId).HasColumnName("iwa_uom_id");
        });

        modelBuilder.Entity<VItemWarehouseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_item_warehouse_detail", "sls");

            entity.Property(e => e.ItwdExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("itwd_expiry_date");
            entity.Property(e => e.ItwdId).HasColumnName("itwd_id");
            entity.Property(e => e.ItwdItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("itwd_it_code");
            entity.Property(e => e.ItwdItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("itwd_it_description_lan1");
            entity.Property(e => e.ItwdItId).HasColumnName("itwd_it_id");
            entity.Property(e => e.ItwdItwId).HasColumnName("itwd_itw_id");
            entity.Property(e => e.ItwdProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("itwd_production_date");
            entity.Property(e => e.ItwdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itwd_quantity");
            entity.Property(e => e.ItwdSlNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("itwd_sl_number");
        });

        modelBuilder.Entity<VItemcategoryFamilyValueVirtual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEMCATEGORY_FAMILY_VALUE_VIRTUAL", "cmn");

            entity.Property(e => e.IcfvBuId).HasColumnName("icfv_bu_id");
            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvIcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_icf_code");
            entity.Property(e => e.IcfvIcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan1");
            entity.Property(e => e.IcfvIcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan2");
            entity.Property(e => e.IcfvIcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icfv_icf_description_lan3");
            entity.Property(e => e.IcfvIcfId).HasColumnName("icfv_icf_id");
            entity.Property(e => e.IcfvId).HasColumnName("icfv_id");
        });

        modelBuilder.Entity<VItemcategoryFamilyVirtual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEMCATEGORY_FAMILY_VIRTUAL", "cmn");

            entity.Property(e => e.IcfBuId).HasColumnName("icf_bu_id");
            entity.Property(e => e.IcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icf_code");
            entity.Property(e => e.IcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan1");
            entity.Property(e => e.IcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan2");
            entity.Property(e => e.IcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan3");
            entity.Property(e => e.IcfIcfId).HasColumnName("icf_icf_id");
            entity.Property(e => e.IcfId).HasColumnName("icf_id");
            entity.Property(e => e.IcfIsLov).HasColumnName("icf_is_lov");
            entity.Property(e => e.IcfLevel).HasColumnName("icf_level");
            entity.Property(e => e.IcfRegex)
                .HasMaxLength(100)
                .HasColumnName("icf_regex");
        });

        modelBuilder.Entity<VItemcategoryValueVirtual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ITEMCATEGORY_VALUE_VIRTUAL", "cmn");

            entity.Property(e => e.IcvIcfId).HasColumnName("icv_icf_id");
            entity.Property(e => e.IcvIcfvId).HasColumnName("icv_icfv_id");
            entity.Property(e => e.IcvId).HasColumnName("icv_id");
            entity.Property(e => e.IcvItId).HasColumnName("icv_it_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(64)
                .HasColumnName("icv_value");
        });

        modelBuilder.Entity<VListpriceItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_LISTPRICE_ITEM", "sls");

            entity.Property(e => e.LpiDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_discount");
            entity.Property(e => e.LpiId).HasColumnName("lpi_id");
            entity.Property(e => e.LpiItId).HasColumnName("lpi_it_id");
            entity.Property(e => e.LpiLpId).HasColumnName("lpi_lp_id");
            entity.Property(e => e.LpiMaxDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_max_discount");
            entity.Property(e => e.LpiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("lpi_price");
            entity.Property(e => e.LpiUomId).HasColumnName("lpi_uom_id");
        });

        modelBuilder.Entity<VLlCycleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_LL_CYCLE_DETAIL", "cmn");

            entity.Property(e => e.CcdActualVisitDate)
                .HasColumnType("datetime")
                .HasColumnName("ccd_actual_visit_date");
            entity.Property(e => e.CcdPlannedVisitDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("ccd_planned_visit_date");
            entity.Property(e => e.CcdThpsId).HasColumnName("ccd_thps_id");
            entity.Property(e => e.CcdUsId).HasColumnName("ccd_us_id");
        });

        modelBuilder.Entity<VMenuItemsAccess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_MENU_ITEMS_ACCESS", "cmn");

            entity.Property(e => e.MiaCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("mia_code");
            entity.Property(e => e.MiaCodescId).HasColumnName("mia_codesc_id");
            entity.Property(e => e.MiaDescription)
                .HasMaxLength(255)
                .HasColumnName("mia_description");
            entity.Property(e => e.MiaId).HasColumnName("mia_id");
            entity.Property(e => e.MiaMenuDescription)
                .HasMaxLength(100)
                .HasColumnName("mia_menu_description");
            entity.Property(e => e.MiaMnId).HasColumnName("mia_mn_id");
        });

        modelBuilder.Entity<VMovementstatusTransition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_MOVEMENTSTATUS_TRANSITION", "sls");

            entity.Property(e => e.MssFromCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("mss_from_code");
            entity.Property(e => e.MssToCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("mss_to_code");
            entity.Property(e => e.MsstAutoCreateFromSource).HasColumnName("msst_auto_create_from_source");
            entity.Property(e => e.MsstCheckAvailabilityFrom).HasColumnName("msst_check_availability_from");
            entity.Property(e => e.MsstCheckAvailabilityTo).HasColumnName("msst_check_availability_to");
            entity.Property(e => e.MsstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("msst_extra_code");
            entity.Property(e => e.MsstFromMssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("msst_from_mss_description_lan1");
            entity.Property(e => e.MsstFromMssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("msst_from_mss_description_lan2");
            entity.Property(e => e.MsstId).HasColumnName("msst_id");
            entity.Property(e => e.MsstLxpRequired).HasColumnName("msst_lxp_required");
            entity.Property(e => e.MsstMssIdFrom).HasColumnName("msst_mss_id_from");
            entity.Property(e => e.MsstMssIdTo).HasColumnName("msst_mss_id_to");
            entity.Property(e => e.MsstMvPlFromIsOwner).HasColumnName("msst_mv_pl_from_is_owner");
            entity.Property(e => e.MsstMvPlToIsOwner).HasColumnName("msst_mv_pl_to_is_owner");
            entity.Property(e => e.MsstMvUsIsOwner).HasColumnName("msst_mv_us_is_owner");
            entity.Property(e => e.MsstMvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("msst_mvt_code");
            entity.Property(e => e.MsstMvtDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("msst_mvt_description_lan1");
            entity.Property(e => e.MsstMvtDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("msst_mvt_description_lan2");
            entity.Property(e => e.MsstMvtId).HasColumnName("msst_mvt_id");
            entity.Property(e => e.MsstMvtIdSource).HasColumnName("msst_mvt_id_source");
            entity.Property(e => e.MsstReserveQuantityFrom).HasColumnName("msst_reserve_quantity_from");
            entity.Property(e => e.MsstReserveQuantityTo).HasColumnName("msst_reserve_quantity_to");
            entity.Property(e => e.MsstToMssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("msst_to_mss_description_lan1");
            entity.Property(e => e.MsstToMssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("msst_to_mss_description_lan2");
            entity.Property(e => e.MsstUpdateQuantityFrom).HasColumnName("msst_update_quantity_from");
            entity.Property(e => e.MsstUpdateQuantityTo).HasColumnName("msst_update_quantity_to");
        });

        modelBuilder.Entity<VMtTripTransactionCountReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_mt_trip_transaction_count_Report");

            entity.Property(e => e.DvSerial)
                .HasMaxLength(512)
                .HasColumnName("dv_serial");
            entity.Property(e => e.MvNumber)
                .HasMaxLength(40)
                .HasColumnName("mv_number");
            entity.Property(e => e.NmOfTransactions).HasColumnName("nm_of_transactions");
            entity.Property(e => e.PlCode)
                .HasMaxLength(100)
                .HasColumnName("pl_code");
            entity.Property(e => e.ReturnDate)
                .HasColumnType("datetime")
                .HasColumnName("return_date");
            entity.Property(e => e.TripDate)
                .HasColumnType("datetime")
                .HasColumnName("trip_date");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
        });

        modelBuilder.Entity<VPaymentHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PAYMENT_HISTORY", "sls");

            entity.Property(e => e.PaBuId).HasColumnName("pa_bu_id");
            entity.Property(e => e.PaCdIdCur).HasColumnName("pa_cd_id_cur");
            entity.Property(e => e.PaCurSymb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pa_cur_symb");
            entity.Property(e => e.PaDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_date");
            entity.Property(e => e.PaNumber)
                .HasMaxLength(16)
                .HasColumnName("pa_number");
            entity.Property(e => e.PaTotalAmount)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pa_total_amount");
            entity.Property(e => e.PhCuId).HasColumnName("ph_cu_id");
            entity.Property(e => e.PhDatetime)
                .HasColumnType("datetime")
                .HasColumnName("ph_datetime");
            entity.Property(e => e.Pk).HasColumnName("pk");
        });

        modelBuilder.Entity<VPaymentInvoiceHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PAYMENT_INVOICE_HISTORY", "sls");

            entity.Property(e => e.PthAmount)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pth_amount");
            entity.Property(e => e.PthBeId).HasColumnName("pth_be_id");
            entity.Property(e => e.PthCdIdCur).HasColumnName("pth_cd_id_cur");
            entity.Property(e => e.PthDocno)
                .HasMaxLength(32)
                .HasColumnName("pth_docno");
            entity.Property(e => e.PthDtTransNo)
                .HasMaxLength(32)
                .HasColumnName("pth_dt_trans_no");
            entity.Property(e => e.PthId).HasColumnName("pth_id");
            entity.Property(e => e.PthPaDocno)
                .HasMaxLength(16)
                .HasColumnName("pth_pa_docno");
            entity.Property(e => e.PthPhId).HasColumnName("pth_ph_id");
        });

        modelBuilder.Entity<VPhysicalLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PHYSICAL_LOCATION", "cmn");

            entity.Property(e => e.PlCdIdPlt).HasColumnName("pl_cd_id_plt");
            entity.Property(e => e.PlCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pl_code");
            entity.Property(e => e.PlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan1");
            entity.Property(e => e.PlDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan2");
            entity.Property(e => e.PlDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan3");
            entity.Property(e => e.PlId).HasColumnName("pl_id");
            entity.Property(e => e.PlLevel).HasColumnName("pl_level");
            entity.Property(e => e.PlMdId).HasColumnName("pl_md_id");
            entity.Property(e => e.PlPlId).HasColumnName("pl_pl_id");
            entity.Property(e => e.PlPltCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pl_plt_code");
            entity.Property(e => e.PlPltDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pl_plt_description_lan1");
            entity.Property(e => e.PlPltDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pl_plt_description_lan2");
            entity.Property(e => e.PlPltDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pl_plt_description_lan3");
        });

        modelBuilder.Entity<VProfileMenuAccess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROFILE_MENU_ACCESS", "cmn");

            entity.Property(e => e.MndCdDescription)
                .HasMaxLength(255)
                .HasColumnName("mnd_cd_description");
            entity.Property(e => e.MndId).HasColumnName("mnd_id");
            entity.Property(e => e.MndMnId).HasColumnName("mnd_mn_id");
            entity.Property(e => e.MndPmaId).HasColumnName("mnd_pma_id");
            entity.Property(e => e.MndPrId).HasColumnName("mnd_pr_id");
            entity.Property(e => e.MndVisible).HasColumnName("mnd_visible");
        });

        modelBuilder.Entity<VProfileMenuItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROFILE_MENU_ITEMS", "cmn");

            entity.Property(e => e.MnActive).HasColumnName("mn_active");
            entity.Property(e => e.MnCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("mn_code");
            entity.Property(e => e.MnCommand)
                .HasMaxLength(255)
                .HasColumnName("mn_command");
            entity.Property(e => e.MnDescription)
                .HasMaxLength(100)
                .HasColumnName("mn_description");
            entity.Property(e => e.MnDescription2)
                .HasMaxLength(100)
                .HasColumnName("mn_description2");
            entity.Property(e => e.MnDescription3)
                .HasMaxLength(100)
                .HasColumnName("mn_description3");
            entity.Property(e => e.MnIcon)
                .HasMaxLength(255)
                .HasColumnName("mn_icon");
            entity.Property(e => e.MnId).HasColumnName("mn_id");
            entity.Property(e => e.MnIsAction).HasColumnName("mn_is_action");
            entity.Property(e => e.MnIsSystem).HasColumnName("mn_is_system");
            entity.Property(e => e.MnLevel).HasColumnName("mn_level");
            entity.Property(e => e.MnMnId).HasColumnName("mn_mn_id");
            entity.Property(e => e.MnOrder).HasColumnName("mn_order");
            entity.Property(e => e.MnPrId).HasColumnName("mn_pr_id");
            entity.Property(e => e.MnVisible).HasColumnName("mn_visible");
        });

        modelBuilder.Entity<VPromotionDetailMobile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_DETAIL_MOBILE", "sls");

            entity.Property(e => e.PndActive).HasColumnName("pnd_active");
            entity.Property(e => e.PndAmountIsGrossNet)
                .HasMaxLength(1)
                .HasColumnName("pnd_amount_is_gross_net");
            entity.Property(e => e.PndApplyOrder).HasColumnName("pnd_apply_order");
            entity.Property(e => e.PndBeId).HasColumnName("pnd_be_id");
            entity.Property(e => e.PndBucket).HasColumnName("pnd_bucket");
            entity.Property(e => e.PndBuyAmountQuantitySku)
                .HasMaxLength(1)
                .HasColumnName("pnd_buy_amount_quantity_sku");
            entity.Property(e => e.PndBuyAndOr)
                .HasMaxLength(1)
                .HasColumnName("pnd_buy_and_or");
            entity.Property(e => e.PndBuyAnySelection)
                .HasMaxLength(1)
                .HasColumnName("pnd_buy_any_selection");
            entity.Property(e => e.PndBuyFrom)
                .HasMaxLength(24)
                .HasColumnName("pnd_buy_from");
            entity.Property(e => e.PndBuyPerTotal).HasColumnName("pnd_buy_per_total");
            entity.Property(e => e.PndBuyTo)
                .HasMaxLength(24)
                .HasColumnName("pnd_buy_to");
            entity.Property(e => e.PndCdIdPec).HasColumnName("pnd_cd_id_pec");
            entity.Property(e => e.PndCdIdPil).HasColumnName("pnd_cd_id_pil");
            entity.Property(e => e.PndCode)
                .HasMaxLength(32)
                .HasColumnName("pnd_code");
            entity.Property(e => e.PndCyclicOrder).HasColumnName("pnd_cyclic_order");
            entity.Property(e => e.PndCyclicValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_cyclic_value");
            entity.Property(e => e.PndDeduceValue).HasColumnName("pnd_deduce_value");
            entity.Property(e => e.PndDescription)
                .HasMaxLength(255)
                .HasColumnName("pnd_description");
            entity.Property(e => e.PndDescriptionAr)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_ar");
            entity.Property(e => e.PndElligibiltyCount).HasColumnName("pnd_elligibilty_count");
            entity.Property(e => e.PndForeach)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_foreach");
            entity.Property(e => e.PndGetFromSame).HasColumnName("pnd_get_from_same");
            entity.Property(e => e.PndGetPerAmountQuantity)
                .HasMaxLength(1)
                .HasColumnName("pnd_get_per_amount_quantity");
            entity.Property(e => e.PndGetSelectTotalAny)
                .HasMaxLength(1)
                .HasColumnName("pnd_get_select_total_any");
            entity.Property(e => e.PndGetValue)
                .HasMaxLength(24)
                .HasColumnName("pnd_get_value");
            entity.Property(e => e.PndGetValueMax)
                .HasMaxLength(24)
                .HasColumnName("pnd_get_value_max");
            entity.Property(e => e.PndGetValuePerc)
                .HasMaxLength(24)
                .HasColumnName("pnd_get_value_perc");
            entity.Property(e => e.PndId).HasColumnName("pnd_id");
            entity.Property(e => e.PndLineConditional).HasColumnName("pnd_line_conditional");
            entity.Property(e => e.PndLineCountPng).HasColumnName("pnd_line_count_png");
            entity.Property(e => e.PndLineCountPnl).HasColumnName("pnd_line_count_pnl");
            entity.Property(e => e.PndMandatory).HasColumnName("pnd_mandatory");
            entity.Property(e => e.PndPnId).HasColumnName("pnd_pn_id");
            entity.Property(e => e.PndPrecedence).HasColumnName("pnd_precedence");
            entity.Property(e => e.PndRecurringCount).HasColumnName("pnd_recurring_count");
            entity.Property(e => e.PndUomIdBuy).HasColumnName("pnd_uom_id_buy");
            entity.Property(e => e.PndUomIdGet).HasColumnName("pnd_uom_id_get");
        });

        modelBuilder.Entity<VPromotionGiveGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_GIVE_GROUPS", "sls");

            entity.Property(e => e.PnggGroupDescription).HasColumnName("pngg_group_description");
            entity.Property(e => e.PnggGroupingNo).HasColumnName("pngg_grouping_no");
            entity.Property(e => e.PnggPndId).HasColumnName("pngg_pnd_id");
            entity.Property(e => e.PnggSource)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("pngg_source");
        });

        modelBuilder.Entity<VPromotionGiveInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_GIVE_INFO", "sls");

            entity.Property(e => e.GPngAQ)
                .HasMaxLength(1)
                .HasColumnName("g_png_a_q");
            entity.Property(e => e.GPngDescription)
                .HasMaxLength(255)
                .HasColumnName("g_png_description");
            entity.Property(e => e.GPngGetPerTotal)
                .HasMaxLength(1)
                .HasColumnName("g_png_get_per_total");
            entity.Property(e => e.GPngGetValue)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("g_png_get_value");
            entity.Property(e => e.GPngGroup)
                .HasMaxLength(255)
                .HasColumnName("g_png_group");
            entity.Property(e => e.GPngGrouping).HasColumnName("g_png_grouping");
            entity.Property(e => e.GPngId).HasColumnName("g_png_id");
            entity.Property(e => e.GPngIsStraightSubGive).HasColumnName("g_png_is_straight_sub_give");
            entity.Property(e => e.GPngPndId).HasColumnName("g_png_pnd_id");
            entity.Property(e => e.GPngPnlPngId).HasColumnName("g_png_pnl_png_id");
            entity.Property(e => e.GPngSelectGet).HasColumnName("g_png_select_get");
            entity.Property(e => e.GPngSource)
                .HasMaxLength(32)
                .HasColumnName("g_png_source");
        });

        modelBuilder.Entity<VPromotionGiveInfoOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_GIVE_INFO_OLD", "sls");

            entity.Property(e => e.PngxGetFrom)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("pngx_get_from");
            entity.Property(e => e.PngxPndId).HasColumnName("pngx_pnd_id");
            entity.Property(e => e.PngxPnlId).HasColumnName("pngx_pnl_id");
            entity.Property(e => e.PngxSelectGroup).HasColumnName("pngx_select_group");
            entity.Property(e => e.PngxStraightGet).HasColumnName("pngx_straight_get");
        });

        modelBuilder.Entity<VPromotionGiveMobile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_GIVE_MOBILE", "sls");

            entity.Property(e => e.PngBeId).HasColumnName("png_be_id");
            entity.Property(e => e.PngCodePcf)
                .HasMaxLength(32)
                .HasColumnName("png_code_pcf");
            entity.Property(e => e.PngGroupingNo).HasColumnName("png_grouping_no");
            entity.Property(e => e.PngId).HasColumnName("png_id");
            entity.Property(e => e.PngPcfId).HasColumnName("png_pcf_id");
            entity.Property(e => e.PngPcfRefId).HasColumnName("png_pcf_ref_id");
            entity.Property(e => e.PngPkId).HasColumnName("png_pk_id");
            entity.Property(e => e.PngPnId).HasColumnName("png_pn_id");
            entity.Property(e => e.PngPndId).HasColumnName("png_pnd_id");
            entity.Property(e => e.PngUomId).HasColumnName("png_uom_id");
            entity.Property(e => e.PngValue)
                .HasMaxLength(24)
                .HasColumnName("png_value");
            entity.Property(e => e.PngValueMax)
                .HasMaxLength(24)
                .HasColumnName("png_value_max");
            entity.Property(e => e.PngValuePerc)
                .HasMaxLength(24)
                .HasColumnName("png_value_perc");
        });

        modelBuilder.Entity<VPromotionInfoRep>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_INFO_REP", "sls");

            entity.Property(e => e.PnActive).HasColumnName("pn_active");
            entity.Property(e => e.PnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pn_code");
            entity.Property(e => e.PnDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan1");
            entity.Property(e => e.PnDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan2");
            entity.Property(e => e.PnDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pn_description_lan3");
            entity.Property(e => e.PnFromDate)
                .HasColumnType("datetime")
                .HasColumnName("pn_from_date");
            entity.Property(e => e.PnId).HasColumnName("pn_id");
            entity.Property(e => e.PnPpbDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pn_ppb_description_lan1");
            entity.Property(e => e.PnPpbDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pn_ppb_description_lan2");
            entity.Property(e => e.PnPpbDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pn_ppb_description_lan3");
            entity.Property(e => e.PnPtpDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pn_ptp_description_lan1");
            entity.Property(e => e.PnPtpDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pn_ptp_description_lan2");
            entity.Property(e => e.PnPtpDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pn_ptp_description_lan3");
            entity.Property(e => e.PnToDate)
                .HasColumnType("datetime")
                .HasColumnName("pn_to_date");
            entity.Property(e => e.PndActive).HasColumnName("pnd_active");
            entity.Property(e => e.PndAppliesOn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("pnd_applies_on");
            entity.Property(e => e.PndApplyOrder).HasColumnName("pnd_apply_order");
            entity.Property(e => e.PndCdIdPil).HasColumnName("pnd_cd_id_pil");
            entity.Property(e => e.PndCode)
                .HasMaxLength(32)
                .HasColumnName("pnd_code");
            entity.Property(e => e.PndDeduceValue).HasColumnName("pnd_deduce_value");
            entity.Property(e => e.PndDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan1");
            entity.Property(e => e.PndDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan2");
            entity.Property(e => e.PndDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pnd_description_lan3");
            entity.Property(e => e.PndId).HasColumnName("pnd_id");
            entity.Property(e => e.PndPilCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pnd_pil_code");
            entity.Property(e => e.PndPilDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pnd_pil_description_lan1");
            entity.Property(e => e.PndPilDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pnd_pil_description_lan2");
            entity.Property(e => e.PndPilDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pnd_pil_description_lan3");
            entity.Property(e => e.PndPrecedence).HasColumnName("pnd_precedence");
        });

        modelBuilder.Entity<VPromotionLineMobile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_LINE_MOBILE", "sls");

            entity.Property(e => e.PnlBeId).HasColumnName("pnl_be_id");
            entity.Property(e => e.PnlCodePcf)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pnl_code_pcf");
            entity.Property(e => e.PnlFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_from");
            entity.Property(e => e.PnlGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_get");
            entity.Property(e => e.PnlGetMax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_get_max");
            entity.Property(e => e.PnlId).HasColumnName("pnl_id");
            entity.Property(e => e.PnlPcfId).HasColumnName("pnl_pcf_id");
            entity.Property(e => e.PnlPcfRefId).HasColumnName("pnl_pcf_ref_id");
            entity.Property(e => e.PnlPkId).HasColumnName("pnl_pk_id");
            entity.Property(e => e.PnlPnId).HasColumnName("pnl_pn_id");
            entity.Property(e => e.PnlPndId).HasColumnName("pnl_pnd_id");
            entity.Property(e => e.PnlTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnl_to");
            entity.Property(e => e.PnlUomIdBuy).HasColumnName("pnl_uom_id_buy");
            entity.Property(e => e.PnlUomIdGet).HasColumnName("pnl_uom_id_get");
        });

        modelBuilder.Entity<VPromotionMasterQualifier>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_MASTER_QUALIFIER", "sls");

            entity.Property(e => e.PnBuId).HasColumnName("pn_bu_id");
            entity.Property(e => e.PndIsForeignKey).HasColumnName("pnd_is_foreign_key");
            entity.Property(e => e.PnqAttributeValueFrom).HasColumnName("pnq_attribute_value_from");
            entity.Property(e => e.PnqAttributeValueTo).HasColumnName("pnq_attribute_value_to");
            entity.Property(e => e.PnqCdCodeCop)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pnq_cd_code_cop");
            entity.Property(e => e.PnqCdDescriptionCop)
                .HasMaxLength(255)
                .HasColumnName("pnq_cd_description_cop");
            entity.Property(e => e.PnqCdDescriptionCopAr)
                .HasMaxLength(255)
                .HasColumnName("pnq_cd_description_cop_ar");
            entity.Property(e => e.PnqCdIdCop).HasColumnName("pnq_cd_id_cop");
            entity.Property(e => e.PnqCodeQl)
                .HasMaxLength(32)
                .HasColumnName("pnq_code_ql");
            entity.Property(e => e.PnqDescriptionQl)
                .HasMaxLength(255)
                .HasColumnName("pnq_description_ql");
            entity.Property(e => e.PnqDescriptionQlAr)
                .HasMaxLength(255)
                .HasColumnName("pnq_description_ql_ar");
            entity.Property(e => e.PnqGroupingNo).HasColumnName("pnq_grouping_no");
            entity.Property(e => e.PnqId).HasColumnName("pnq_id");
            entity.Property(e => e.PnqIngridEdit).HasColumnName("pnq_ingrid_edit");
            entity.Property(e => e.PnqNbValues).HasColumnName("pnq_nb_values");
            entity.Property(e => e.PnqOperator)
                .HasMaxLength(100)
                .HasColumnName("pnq_operator");
            entity.Property(e => e.PnqPnId).HasColumnName("pnq_pn_id");
            entity.Property(e => e.PnqQlvId).HasColumnName("pnq_qlv_id");
            entity.Property(e => e.PnqRefId).HasColumnName("pnq_ref_id");
        });

        modelBuilder.Entity<VPromotionPreselection>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_PRESELECTION", "sls");

            entity.Property(e => e.PpnDescription)
                .HasMaxLength(512)
                .HasColumnName("ppn_description");
            entity.Property(e => e.PpnDescriptionAr)
                .HasMaxLength(512)
                .HasColumnName("ppn_description_ar");
            entity.Property(e => e.PpnFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_from");
            entity.Property(e => e.PpnGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_get");
            entity.Property(e => e.PpnId).HasColumnName("ppn_id");
            entity.Property(e => e.PpnLineBuyCount).HasColumnName("ppn_line_buy_count");
            entity.Property(e => e.PpnPndId).HasColumnName("ppn_pnd_id");
            entity.Property(e => e.PpnPnlId).HasColumnName("ppn_pnl_id");
            entity.Property(e => e.PpnSelectGet).HasColumnName("ppn_select_get");
            entity.Property(e => e.PpnSource)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ppn_source");
            entity.Property(e => e.PpnStraightBuy).HasColumnName("ppn_straight_buy");
            entity.Property(e => e.PpnStraightGet).HasColumnName("ppn_straight_get");
            entity.Property(e => e.PpnTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_to");
            entity.Property(e => e.PpnUomIdBuy).HasColumnName("ppn_uom_id_buy");
        });

        modelBuilder.Entity<VPromotionPreselection1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_PRESELECTION--", "sls");

            entity.Property(e => e.PpnDescription)
                .HasMaxLength(512)
                .HasColumnName("ppn_description");
            entity.Property(e => e.PpnDescriptionAr)
                .HasMaxLength(512)
                .HasColumnName("ppn_description_ar");
            entity.Property(e => e.PpnFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_from");
            entity.Property(e => e.PpnGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_get");
            entity.Property(e => e.PpnId).HasColumnName("ppn_id");
            entity.Property(e => e.PpnLineBuyCount).HasColumnName("ppn_line_buy_count");
            entity.Property(e => e.PpnPndId).HasColumnName("ppn_pnd_id");
            entity.Property(e => e.PpnPnlId).HasColumnName("ppn_pnl_id");
            entity.Property(e => e.PpnSelectGet).HasColumnName("ppn_select_get");
            entity.Property(e => e.PpnSource)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ppn_source");
            entity.Property(e => e.PpnStraightBuy).HasColumnName("ppn_straight_buy");
            entity.Property(e => e.PpnStraightGet).HasColumnName("ppn_straight_get");
            entity.Property(e => e.PpnTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_to");
        });

        modelBuilder.Entity<VPromotionPreselectionAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_PRESELECTION_all", "sls");

            entity.Property(e => e.PpnDescription)
                .HasMaxLength(512)
                .HasColumnName("ppn_description");
            entity.Property(e => e.PpnDescriptionAr)
                .HasMaxLength(512)
                .HasColumnName("ppn_description_ar");
            entity.Property(e => e.PpnFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_from");
            entity.Property(e => e.PpnGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_get");
            entity.Property(e => e.PpnId).HasColumnName("ppn_id");
            entity.Property(e => e.PpnLineBuyCount).HasColumnName("ppn_line_buy_count");
            entity.Property(e => e.PpnPndId).HasColumnName("ppn_pnd_id");
            entity.Property(e => e.PpnPnlId).HasColumnName("ppn_pnl_id");
            entity.Property(e => e.PpnSelectGet).HasColumnName("ppn_select_get");
            entity.Property(e => e.PpnSource)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ppn_source");
            entity.Property(e => e.PpnStraightBuy).HasColumnName("ppn_straight_buy");
            entity.Property(e => e.PpnStraightGet).HasColumnName("ppn_straight_get");
            entity.Property(e => e.PpnTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_to");
            entity.Property(e => e.PpnUomIdBuy).HasColumnName("ppn_uom_id_buy");
        });

        modelBuilder.Entity<VPromotionPreselectionBuy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_PRESELECTION_BUY", "sls");

            entity.Property(e => e.CdCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("cd_code");
            entity.Property(e => e.PndBuyFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_buy_from");
            entity.Property(e => e.PndBuyTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_buy_to");
            entity.Property(e => e.PndCode)
                .HasMaxLength(32)
                .HasColumnName("pnd_code");
            entity.Property(e => e.PndDescription)
                .HasMaxLength(255)
                .HasColumnName("pnd_description");
            entity.Property(e => e.PndForeach)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pnd_foreach");
            entity.Property(e => e.PndGroup)
                .HasMaxLength(36)
                .HasColumnName("pnd_group");
            entity.Property(e => e.PndId).HasColumnName("pnd_id");
            entity.Property(e => e.PndItId).HasColumnName("pnd_it_id");
            entity.Property(e => e.PndScenario).HasColumnName("pnd_scenario");
            entity.Property(e => e.PndSubgroup)
                .HasMaxLength(67)
                .HasColumnName("pnd_subgroup");
            entity.Property(e => e.PndSubgroupCount).HasColumnName("pnd_subgroup_count");
            entity.Property(e => e.PnlId).HasColumnName("pnl_id");
            entity.Property(e => e.PpmDescription)
                .HasMaxLength(512)
                .HasColumnName("ppm_description");
        });

        modelBuilder.Entity<VPromotionPreselectionOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_PRESELECTION_old", "sls");

            entity.Property(e => e.PpnDescriptionLan1)
                .HasMaxLength(290)
                .HasColumnName("ppn_description_lan1");
            entity.Property(e => e.PpnDescriptionLan2)
                .HasMaxLength(290)
                .HasColumnName("ppn_description_lan2");
            entity.Property(e => e.PpnDescriptionLan3)
                .HasMaxLength(290)
                .HasColumnName("ppn_description_lan3");
            entity.Property(e => e.PpnFrom)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_from");
            entity.Property(e => e.PpnGet)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_get");
            entity.Property(e => e.PpnId).HasColumnName("ppn_id");
            entity.Property(e => e.PpnPndId).HasColumnName("ppn_pnd_id");
            entity.Property(e => e.PpnPnlId).HasColumnName("ppn_pnl_id");
            entity.Property(e => e.PpnSource)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ppn_source");
            entity.Property(e => e.PpnStraightBuy).HasColumnName("ppn_straight_buy");
            entity.Property(e => e.PpnStraightGet).HasColumnName("ppn_straight_get");
            entity.Property(e => e.PpnTo)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ppn_to");
        });

        modelBuilder.Entity<VPromotionQualifierValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_QUALIFIER_VALUES", "sls");

            entity.Property(e => e.QlvCode)
                .HasMaxLength(255)
                .HasColumnName("qlv_code");
            entity.Property(e => e.QlvDescriptionLan1)
                .HasMaxLength(579)
                .HasColumnName("qlv_description_lan1");
            entity.Property(e => e.QlvDescriptionLan2)
                .HasMaxLength(513)
                .HasColumnName("qlv_description_lan2");
            entity.Property(e => e.QlvDescriptionLan3)
                .HasMaxLength(513)
                .HasColumnName("qlv_description_lan3");
            entity.Property(e => e.QlvId).HasColumnName("qlv_id");
            entity.Property(e => e.QlvQlCode)
                .HasMaxLength(32)
                .HasColumnName("qlv_ql_code");
            entity.Property(e => e.QlvQlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan1");
            entity.Property(e => e.QlvQlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan2");
            entity.Property(e => e.QlvQlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan3");
            entity.Property(e => e.QlvQlId).HasColumnName("qlv_ql_id");
            entity.Property(e => e.QlvRefId).HasColumnName("qlv_ref_id");
        });

        modelBuilder.Entity<VPromotionToSelectItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_TO_SELECT_ITEMS", "sls");

            entity.Property(e => e.PndBuyAmountQuantitySku)
                .HasMaxLength(100)
                .HasColumnName("pnd_buy_amount_quantity_sku");
            entity.Property(e => e.PndBuyAndOr)
                .HasMaxLength(100)
                .HasColumnName("pnd_buy_and_or");
            entity.Property(e => e.PslCase)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("psl_case");
            entity.Property(e => e.PslGroup)
                .HasMaxLength(34)
                .HasColumnName("psl_group");
            entity.Property(e => e.PslIcfId).HasColumnName("psl_icf_id");
            entity.Property(e => e.PslIcfvId).HasColumnName("psl_icfv_id");
            entity.Property(e => e.PslNature)
                .HasMaxLength(16)
                .HasColumnName("psl_nature");
            entity.Property(e => e.PslPnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("psl_pn_code");
            entity.Property(e => e.PslPndCode)
                .HasMaxLength(32)
                .HasColumnName("psl_pnd_code");
            entity.Property(e => e.PslPndId).HasColumnName("psl_pnd_id");
            entity.Property(e => e.PslPngId).HasColumnName("psl_png_id");
            entity.Property(e => e.PslPnlId).HasColumnName("psl_pnl_id");
            entity.Property(e => e.PslPpb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("psl_ppb");
        });

        modelBuilder.Entity<VPromotionToSelectItemsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_PROMOTION_TO_SELECT_ITEMS_DETAILS", "sls");

            entity.Property(e => e.IcvItId).HasColumnName("icv_it_id");
            entity.Property(e => e.PndBuyAmountQuantitySku)
                .HasMaxLength(100)
                .HasColumnName("pnd_buy_amount_quantity_sku");
            entity.Property(e => e.PndBuyAndOr)
                .HasMaxLength(100)
                .HasColumnName("pnd_buy_and_or");
            entity.Property(e => e.PslCase)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("psl_case");
            entity.Property(e => e.PslGroup)
                .HasMaxLength(34)
                .HasColumnName("psl_group");
            entity.Property(e => e.PslIcfId).HasColumnName("psl_icf_id");
            entity.Property(e => e.PslIcfvId).HasColumnName("psl_icfv_id");
            entity.Property(e => e.PslNature)
                .HasMaxLength(16)
                .HasColumnName("psl_nature");
            entity.Property(e => e.PslPnCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("psl_pn_code");
            entity.Property(e => e.PslPndCode)
                .HasMaxLength(32)
                .HasColumnName("psl_pnd_code");
            entity.Property(e => e.PslPndId).HasColumnName("psl_pnd_id");
            entity.Property(e => e.PslPngId).HasColumnName("psl_png_id");
            entity.Property(e => e.PslPnlId).HasColumnName("psl_pnl_id");
            entity.Property(e => e.PslPpb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("psl_ppb");
        });

        modelBuilder.Entity<VQlkBusinessUnit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_BUSINESS_UNIT");

            entity.Property(e => e.BuBuId).HasColumnName("bu_bu_id");
            entity.Property(e => e.BuCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("bu_code");
            entity.Property(e => e.BuCpId).HasColumnName("bu_cp_id");
            entity.Property(e => e.BuDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan1");
            entity.Property(e => e.BuDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan2");
            entity.Property(e => e.BuDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("bu_description_lan3");
            entity.Property(e => e.BuId)
                .ValueGeneratedOnAdd()
                .HasColumnName("bu_id");
            entity.Property(e => e.BuPath)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bu_path");
        });

        modelBuilder.Entity<VQlkCallcycle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_CALLCYCLE");

            entity.Property(e => e.CcActive).HasColumnName("cc_active");
            entity.Property(e => e.CcAutorenew).HasColumnName("cc_autorenew");
            entity.Property(e => e.CcCycleLength).HasColumnName("cc_cycle_length");
            entity.Property(e => e.CcDescription)
                .HasMaxLength(200)
                .HasColumnName("cc_description");
            entity.Property(e => e.CcFromDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_from_date");
            entity.Property(e => e.CcFromDay).HasColumnName("cc_from_day");
            entity.Property(e => e.CcFromMonth).HasColumnName("cc_from_month");
            entity.Property(e => e.CcFromYear).HasColumnName("cc_from_year");
            entity.Property(e => e.CcId).HasColumnName("cc_id");
            entity.Property(e => e.CcToDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("cc_to_date");
            entity.Property(e => e.CcToDay).HasColumnName("cc_to_day");
            entity.Property(e => e.CcToMonth).HasColumnName("cc_to_month");
            entity.Property(e => e.CcToYear).HasColumnName("cc_to_year");
            entity.Property(e => e.CcUsId).HasColumnName("cc_us_id");
            entity.Property(e => e.CcWorkdays)
                .HasMaxLength(20)
                .HasColumnName("cc_workdays");
            entity.Property(e => e.CcdActualDay).HasColumnName("ccd_actual_day");
            entity.Property(e => e.CcdActualMonth).HasColumnName("ccd_actual_month");
            entity.Property(e => e.CcdActualVisit).HasColumnName("ccd_actual_visit");
            entity.Property(e => e.CcdActualVisitDate)
                .HasColumnType("datetime")
                .HasColumnName("ccd_actual_visit_date");
            entity.Property(e => e.CcdActualVisitDateNum).HasColumnName("ccd_actual_visit_date_num");
            entity.Property(e => e.CcdActualYear).HasColumnName("ccd_actual_year");
            entity.Property(e => e.CcdCdIdVst).HasColumnName("ccd_cd_id_vst");
            entity.Property(e => e.CcdOrder).HasColumnName("ccd_order");
            entity.Property(e => e.CcdPlannedDay).HasColumnName("ccd_planned_day");
            entity.Property(e => e.CcdPlannedMonth).HasColumnName("ccd_planned_month");
            entity.Property(e => e.CcdPlannedVisitDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("ccd_planned_visit_date");
            entity.Property(e => e.CcdPlannedVisitDateNum).HasColumnName("ccd_planned_visit_date_num");
            entity.Property(e => e.CcdPlannedYear).HasColumnName("ccd_planned_year");
            entity.Property(e => e.CcdThpsId).HasColumnName("ccd_thps_id");
            entity.Property(e => e.CytCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CYT_code");
            entity.Property(e => e.CytDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("CYT_description_lan1");
            entity.Property(e => e.CytDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("CYT_description_lan2");
            entity.Property(e => e.CytDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("CYT_description_lan3");
            entity.Property(e => e.ThpsUs)
                .HasMaxLength(61)
                .HasColumnName("thps_us");
            entity.Property(e => e.VstCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("VST_code");
            entity.Property(e => e.VstDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("VST_description_lan1");
            entity.Property(e => e.VstDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("VST_description_lan2");
            entity.Property(e => e.VstDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("VST_description_lan3");
            entity.Property(e => e.VtCcdId).HasColumnName("vt_ccd_id");
        });

        modelBuilder.Entity<VQlkDueInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_DUE_INVOICE");

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.DiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("di_create_date");
            entity.Property(e => e.DiCurCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("di_cur_code");
            entity.Property(e => e.DiCurDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("di_cur_description_lan1");
            entity.Property(e => e.DiCurDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("di_cur_description_lan2");
            entity.Property(e => e.DiCurDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("di_cur_description_lan3");
            entity.Property(e => e.DiDate)
                .HasColumnType("datetime")
                .HasColumnName("di_date");
            entity.Property(e => e.DiDateDueDateDiff).HasColumnName("di_date_due_date_diff");
            entity.Property(e => e.DiDateNum).HasColumnName("di_date_num");
            entity.Property(e => e.DiDay).HasColumnName("di_day");
            entity.Property(e => e.DiDueDate)
                .HasColumnType("datetime")
                .HasColumnName("di_due_date");
            entity.Property(e => e.DiDueDateNum).HasColumnName("di_due_date_num");
            entity.Property(e => e.DiDueDay).HasColumnName("di_due_day");
            entity.Property(e => e.DiDueMonth).HasColumnName("di_due_month");
            entity.Property(e => e.DiDueRange).HasColumnName("di_due_range");
            entity.Property(e => e.DiDueYear).HasColumnName("di_due_year");
            entity.Property(e => e.DiId).HasColumnName("di_id");
            entity.Property(e => e.DiModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("di_modified_date");
            entity.Property(e => e.DiMonth).HasColumnName("di_month");
            entity.Property(e => e.DiNumber)
                .HasMaxLength(32)
                .HasColumnName("di_number");
            entity.Property(e => e.DiOrder).HasColumnName("di_order");
            entity.Property(e => e.DiRemainAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_remain_amount");
            entity.Property(e => e.DiRemainAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_remain_amount_bc");
            entity.Property(e => e.DiThpsId).HasColumnName("di_thps_id");
            entity.Property(e => e.DiTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_total_amount");
            entity.Property(e => e.DiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("di_total_amount_bc");
            entity.Property(e => e.DiUsId).HasColumnName("di_us_id");
            entity.Property(e => e.DiVoid).HasColumnName("di_void");
            entity.Property(e => e.DiYear).HasColumnName("di_year");
            entity.Property(e => e.ThpsBu)
                .HasMaxLength(61)
                .HasColumnName("thps_bu");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
        });

        modelBuilder.Entity<VQlkGeoLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_GEO_LOCATION");

            entity.Property(e => e.GeoCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("geo_code");
            entity.Property(e => e.GeoDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("geo_description_lan1");
            entity.Property(e => e.GeoDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("geo_description_lan2");
            entity.Property(e => e.GeoDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("geo_description_lan3");
            entity.Property(e => e.GlCdIdGeo).HasColumnName("gl_cd_id_geo");
            entity.Property(e => e.GlCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan1");
            entity.Property(e => e.GlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan2");
            entity.Property(e => e.GlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan3");
            entity.Property(e => e.GlGlId).HasColumnName("gl_gl_id");
            entity.Property(e => e.GlId).HasColumnName("gl_id");
            entity.Property(e => e.GlLevel).HasColumnName("gl_level");
        });

        modelBuilder.Entity<VQlkItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_ITEM");

            entity.Property(e => e.ItActive).HasColumnName("it_active");
            entity.Property(e => e.ItCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.ItDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan2");
            entity.Property(e => e.ItDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan3");
            entity.Property(e => e.ItHasExpiryDate).HasColumnName("it_has_expiry_date");
            entity.Property(e => e.ItHasLot).HasColumnName("it_has_lot");
            entity.Property(e => e.ItHasMultipleUom).HasColumnName("it_has_multiple_uom");
            entity.Property(e => e.ItHasProductionDate).HasColumnName("it_has_production_date");
            entity.Property(e => e.ItHasSerial).HasColumnName("it_has_serial");
            entity.Property(e => e.ItId)
                .ValueGeneratedOnAdd()
                .HasColumnName("it_id");
            entity.Property(e => e.ItIsAsset).HasColumnName("it_is_asset");
            entity.Property(e => e.ItIsDescription).HasColumnName("it_is_description");
            entity.Property(e => e.ItIsSaleable).HasColumnName("it_is_saleable");
            entity.Property(e => e.ItIsService).HasColumnName("it_is_service");
            entity.Property(e => e.ItItId).HasColumnName("it_it_id");
            entity.Property(e => e.ItUomId).HasColumnName("it_uom_id");
            entity.Property(e => e.ItWeight)
                .HasColumnType("numeric(12, 5)")
                .HasColumnName("it_weight");
            entity.Property(e => e.Item).HasMaxLength(255);
        });

        modelBuilder.Entity<VQlkItemProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_ITEM_PROPERTY");

            entity.Property(e => e.IcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icf_code");
            entity.Property(e => e.IcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan1");
            entity.Property(e => e.IcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan2");
            entity.Property(e => e.IcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("icf_description_lan3");
            entity.Property(e => e.IcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("icfv_code");
            entity.Property(e => e.IcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan1");
            entity.Property(e => e.IcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan2");
            entity.Property(e => e.IcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("icfv_description_lan3");
            entity.Property(e => e.IcfvParentCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("icfv_parent_code");
            entity.Property(e => e.IcfvParentDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("icfv_parent_desc");
            entity.Property(e => e.IcvId).HasColumnName("icv_id");
            entity.Property(e => e.IcvValue)
                .HasMaxLength(64)
                .HasColumnName("icv_value");
            entity.Property(e => e.ItId).HasColumnName("it_id");
        });

        modelBuilder.Entity<VQlkItemWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_ITEM_WAREHOUSE");

            entity.Property(e => e.ItwId).HasColumnName("itw_id");
            entity.Property(e => e.ItwItId).HasColumnName("itw_it_id");
            entity.Property(e => e.ItwPlIdWhs).HasColumnName("itw_pl_id_whs");
            entity.Property(e => e.ItwQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity");
            entity.Property(e => e.ItwQuantityDamage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity_damage");
            entity.Property(e => e.ItwQuantityPreviewed)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("itw_quantity_previewed");
            entity.Property(e => e.ItwQuantityReserved)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itw_quantity_reserved");
            entity.Property(e => e.ItwUomId).HasColumnName("itw_uom_id");
            entity.Property(e => e.PlCdIdPlt).HasColumnName("pl_cd_id_plt");
            entity.Property(e => e.PlCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pl_code");
            entity.Property(e => e.PlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan1");
            entity.Property(e => e.PlDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan2");
            entity.Property(e => e.PlDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("pl_description_lan3");
            entity.Property(e => e.PlId).HasColumnName("pl_id");
            entity.Property(e => e.PlLevel).HasColumnName("pl_level");
            entity.Property(e => e.PltCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PLT_code");
            entity.Property(e => e.PltDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("PLT_description_lan1");
            entity.Property(e => e.PltDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("PLT_description_lan2");
            entity.Property(e => e.PltDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("PLT_description_lan3");
        });

        modelBuilder.Entity<VQlkItemWarehouseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_ITEM_WAREHOUSE_DETAIL");

            entity.Property(e => e.ItwId).HasColumnName("itw_id");
            entity.Property(e => e.ItwdExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("itwd_expiry_date");
            entity.Property(e => e.ItwdExpiryDateNum).HasColumnName("itwd_expiry_date_num");
            entity.Property(e => e.ItwdId).HasColumnName("itwd_id");
            entity.Property(e => e.ItwdProductionDate)
                .HasColumnType("datetime")
                .HasColumnName("itwd_production_date");
            entity.Property(e => e.ItwdProductionDateNum).HasColumnName("itwd_production_date_num");
            entity.Property(e => e.ItwdQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("itwd_quantity");
            entity.Property(e => e.ItwdSlNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("itwd_sl_number");
        });

        modelBuilder.Entity<VQlkKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_KEY");

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.DateNum).HasColumnName("date_num");
            entity.Property(e => e.DateValue).HasColumnType("datetime");
            entity.Property(e => e.Reduction).HasColumnName("REDUCTION");
            entity.Property(e => e.TargetKey).HasColumnName("TARGET_KEY");
            entity.Property(e => e.ThpsBu)
                .HasMaxLength(61)
                .HasColumnName("thps_bu");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsUs)
                .HasMaxLength(61)
                .HasColumnName("thps_us");
            entity.Property(e => e.ThpsUsVt)
                .HasMaxLength(92)
                .HasColumnName("thps_us_vt");
            entity.Property(e => e.ThpsUsVtBu)
                .HasMaxLength(123)
                .HasColumnName("thps_us_vt_bu");
            entity.Property(e => e.UsId).HasColumnName("us_id");
        });

        modelBuilder.Entity<VQlkPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_PAYMENT");

            entity.Property(e => e.MvId).HasColumnName("mv_id");
            entity.Property(e => e.PaApproved).HasColumnName("pa_approved");
            entity.Property(e => e.PaBuId).HasColumnName("pa_bu_id");
            entity.Property(e => e.PaCdIdCur).HasColumnName("pa_cd_id_cur");
            entity.Property(e => e.PaCdIdPat).HasColumnName("pa_cd_id_pat");
            entity.Property(e => e.PaCdIdSrc).HasColumnName("pa_cd_id_src");
            entity.Property(e => e.PaCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_create_date");
            entity.Property(e => e.PaDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_date");
            entity.Property(e => e.PaDateNum).HasColumnName("pa_date_num");
            entity.Property(e => e.PaDay).HasColumnName("pa_day");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.PaModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("pa_modified_date");
            entity.Property(e => e.PaMonth).HasColumnName("pa_month");
            entity.Property(e => e.PaNumber)
                .HasMaxLength(16)
                .HasColumnName("pa_number");
            entity.Property(e => e.PaRoundAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_round_amount");
            entity.Property(e => e.PaSgdId).HasColumnName("pa_sgd_id");
            entity.Property(e => e.PaThpsId).HasColumnName("pa_thps_id");
            entity.Property(e => e.PaTotalAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_total_amount");
            entity.Property(e => e.PaTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pa_total_amount_bc");
            entity.Property(e => e.PaUsId).HasColumnName("pa_us_id");
            entity.Property(e => e.PaVoid).HasColumnName("pa_void");
            entity.Property(e => e.PaVtId)
                .HasMaxLength(33)
                .HasColumnName("pa_vt_id");
            entity.Property(e => e.PaYear).HasColumnName("pa_year");
            entity.Property(e => e.PssCode)
                .HasMaxLength(32)
                .HasColumnName("pss_code");
            entity.Property(e => e.PssDescriptionLan1)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan1");
            entity.Property(e => e.PssDescriptionLan2)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan2");
            entity.Property(e => e.PssDescriptionLan3)
                .HasMaxLength(200)
                .HasColumnName("pss_description_lan3");
            entity.Property(e => e.PyCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("py_code");
            entity.Property(e => e.PyDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan1");
            entity.Property(e => e.PyDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan2");
            entity.Property(e => e.PyDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("py_description_lan3");
            entity.Property(e => e.ThpsUsVtBu)
                .HasMaxLength(126)
                .HasColumnName("thps_us_vt_bu");
        });

        modelBuilder.Entity<VQlkPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_PAYMENT_DETAIL");

            entity.Property(e => e.BnkCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("BNK_code");
            entity.Property(e => e.BnkDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("BNK_description_lan1");
            entity.Property(e => e.BnkDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("BNK_description_lan2");
            entity.Property(e => e.BnkDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("BNK_description_lan3");
            entity.Property(e => e.PaCurCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pa_cur_code");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.PadAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_amount");
            entity.Property(e => e.PadAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_amount_bc");
            entity.Property(e => e.PadCcDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("pad_cc_date");
            entity.Property(e => e.PadCcName)
                .HasMaxLength(70)
                .HasColumnName("pad_cc_name");
            entity.Property(e => e.PadCcNumber)
                .HasMaxLength(16)
                .HasColumnName("pad_cc_number");
            entity.Property(e => e.PadCdIdPam).HasColumnName("pad_cd_id_pam");
            entity.Property(e => e.PadCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("pad_create_date");
            entity.Property(e => e.PadCurDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pad_cur_description_lan1");
            entity.Property(e => e.PadCurDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pad_cur_description_lan2");
            entity.Property(e => e.PadCurDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pad_cur_description_lan3");
            entity.Property(e => e.PadCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_cur_rate");
            entity.Property(e => e.PadId).HasColumnName("pad_id");
            entity.Property(e => e.PadInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pad_inv_cur_rate");
            entity.Property(e => e.PadModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("pad_modified_date");
            entity.Property(e => e.PamCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PAM_code");
            entity.Property(e => e.PamDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("PAM_description_lan1");
            entity.Property(e => e.PamDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("PAM_description_lan2");
            entity.Property(e => e.PamDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("PAM_description_lan3");
        });

        modelBuilder.Entity<VQlkPaymentInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_PAYMENT_INVOICE");

            entity.Property(e => e.DiId).HasColumnName("di_id");
            entity.Property(e => e.PaId).HasColumnName("pa_id");
            entity.Property(e => e.PaiAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pai_amount");
            entity.Property(e => e.PaiAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("pai_amount_bc");
            entity.Property(e => e.PaiCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("pai_create_date");
            entity.Property(e => e.PaiCurCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("pai_cur_code");
            entity.Property(e => e.PaiCurDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("pai_cur_description_lan1");
            entity.Property(e => e.PaiCurDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("pai_cur_description_lan2");
            entity.Property(e => e.PaiCurDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("pai_cur_description_lan3");
            entity.Property(e => e.PaiId).HasColumnName("pai_id");
            entity.Property(e => e.PaiModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("pai_modified_date");
        });

        modelBuilder.Entity<VQlkRealUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_REAL_USER");

            entity.Property(e => e.SalesRep)
                .HasMaxLength(50)
                .HasColumnName("Sales Rep");
            entity.Property(e => e.UsActive).HasColumnName("us_active");
            entity.Property(e => e.UsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("us_code");
            entity.Property(e => e.UsDeleted).HasColumnName("us_deleted");
            entity.Property(e => e.UsExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("us_expiry_date");
            entity.Property(e => e.UsFirstName)
                .HasMaxLength(50)
                .HasColumnName("us_first_name");
            entity.Property(e => e.UsGlId).HasColumnName("us_gl_id");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.UsLastName)
                .HasMaxLength(50)
                .HasColumnName("us_last_name");
            entity.Property(e => e.UsLogin)
                .HasMaxLength(20)
                .HasColumnName("us_login");
            entity.Property(e => e.UsReceiveNotification).HasColumnName("us_receive_notification");
            entity.Property(e => e.UsShortName)
                .HasMaxLength(25)
                .HasColumnName("us_short_name");
            entity.Property(e => e.UsSupervisor)
                .HasMaxLength(50)
                .HasColumnName("us_supervisor");
            entity.Property(e => e.UsThpId).HasColumnName("us_thp_id");
        });

        modelBuilder.Entity<VQlkSectionAccess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_SECTION_ACCESS");

            entity.Property(e => e.Access)
                .HasMaxLength(50)
                .HasColumnName("ACCESS");
            entity.Property(e => e.Omit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("OMIT");
            entity.Property(e => e.Reduction)
                .HasMaxLength(30)
                .HasColumnName("REDUCTION");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VQlkSyncLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_SYNC_LOG");

            entity.Property(e => e.TsyAction)
                .HasMaxLength(50)
                .HasColumnName("tsy_action");
            entity.Property(e => e.TsyDatetime)
                .HasColumnType("datetime")
                .HasColumnName("tsy_datetime");
            entity.Property(e => e.TsyDescription)
                .HasMaxLength(255)
                .HasColumnName("tsy_description");
            entity.Property(e => e.TsyId)
                .ValueGeneratedOnAdd()
                .HasColumnName("tsy_id");
            entity.Property(e => e.TsyResult).HasColumnName("tsy_result");
            entity.Property(e => e.TsySyncVersion)
                .HasMaxLength(30)
                .HasColumnName("tsy_sync_version");
            entity.Property(e => e.TsyUsId).HasColumnName("tsy_us_id");
        });

        modelBuilder.Entity<VQlkTarget>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_TARGET");

            entity.Property(e => e.BuId).HasColumnName("bu_id");
            entity.Property(e => e.TaActive).HasColumnName("ta_active");
            entity.Property(e => e.TaCdIdCur).HasColumnName("ta_cd_id_cur");
            entity.Property(e => e.TaCode)
                .HasMaxLength(50)
                .HasColumnName("ta_code");
            entity.Property(e => e.TaCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("ta_create_date");
            entity.Property(e => e.TaDescription)
                .HasMaxLength(250)
                .HasColumnName("ta_description");
            entity.Property(e => e.TaId).HasColumnName("ta_id");
            entity.Property(e => e.TaYear).HasColumnName("ta_year");
            entity.Property(e => e.TrcCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRC_code");
            entity.Property(e => e.TrcDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TRC_description_lan1");
            entity.Property(e => e.TrcDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TRC_description_lan2");
            entity.Property(e => e.TrcDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TRC_description_lan3");
            entity.Property(e => e.Trs1Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRS1_code");
            entity.Property(e => e.Trs1DescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TRS1_description_lan1");
            entity.Property(e => e.Trs1DescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TRS1_description_lan2");
            entity.Property(e => e.Trs1DescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TRS1_description_lan3");
            entity.Property(e => e.Trs2Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRS2_code");
            entity.Property(e => e.Trs2DescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TRS2_description_lan1");
            entity.Property(e => e.Trs2DescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TRS2_description_lan2");
            entity.Property(e => e.Trs2DescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TRS2_description_lan3");
            entity.Property(e => e.Trs3Code)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRS3_code");
            entity.Property(e => e.Trs3DescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TRS3_description_lan1");
            entity.Property(e => e.Trs3DescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TRS3_description_lan2");
            entity.Property(e => e.Trs3DescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TRS3_description_lan3");
            entity.Property(e => e.TrtCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TRT_code");
            entity.Property(e => e.TrtDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TRT_description_lan1");
            entity.Property(e => e.TrtDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TRT_description_lan2");
            entity.Property(e => e.TrtDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TRT_description_lan3");
            entity.Property(e => e.UsId).HasColumnName("us_id");
        });

        modelBuilder.Entity<VQlkTargetDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_TARGET_DETAIL");

            entity.Property(e => e.GlId).HasColumnName("gl_id");
            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.TaId).HasColumnName("ta_id");
            entity.Property(e => e.TdApr)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Apr");
            entity.Property(e => e.TdAug)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Aug");
            entity.Property(e => e.TdCdIdIbd).HasColumnName("td_cd_id_ibd");
            entity.Property(e => e.TdCdIdIgp).HasColumnName("td_cd_id_igp");
            entity.Property(e => e.TdDec)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Dec");
            entity.Property(e => e.TdFeb)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Feb");
            entity.Property(e => e.TdId)
                .ValueGeneratedOnAdd()
                .HasColumnName("td_id");
            entity.Property(e => e.TdJan)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Jan");
            entity.Property(e => e.TdJul)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Jul");
            entity.Property(e => e.TdJun)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Jun");
            entity.Property(e => e.TdMai)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Mai");
            entity.Property(e => e.TdMar)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Mar");
            entity.Property(e => e.TdNov)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Nov");
            entity.Property(e => e.TdOct)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Oct");
            entity.Property(e => e.TdSep)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("td_Sep");
            entity.Property(e => e.TdTotal)
                .HasColumnType("numeric(27, 5)")
                .HasColumnName("td_total");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.UsId).HasColumnName("us_id");
        });

        modelBuilder.Entity<VQlkThirdpartyFinance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_THIRDPARTY_FINANCE");

            entity.Property(e => e.TcurCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("TCUR_code");
            entity.Property(e => e.TcurDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("TCUR_description_lan1");
            entity.Property(e => e.TcurDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("TCUR_description_lan2");
            entity.Property(e => e.TcurDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("TCUR_description_lan3");
            entity.Property(e => e.ThpfAccountNo)
                .HasMaxLength(32)
                .HasColumnName("thpf_account_no");
            entity.Property(e => e.ThpfActive).HasColumnName("thpf_active");
            entity.Property(e => e.ThpfBalance)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_balance");
            entity.Property(e => e.ThpfBalanceBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_balance_bc");
            entity.Property(e => e.ThpfBuId).HasColumnName("thpf_bu_id");
            entity.Property(e => e.ThpfCdIdCur).HasColumnName("thpf_cd_id_cur");
            entity.Property(e => e.ThpfCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("thpf_create_date");
            entity.Property(e => e.ThpfCreditLimit)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_credit_limit");
            entity.Property(e => e.ThpfCreditLimitBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_credit_limit_bc");
            entity.Property(e => e.ThpfDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("thpf_discount");
            entity.Property(e => e.ThpfId).HasColumnName("thpf_id");
            entity.Property(e => e.ThpfLpId).HasColumnName("thpf_lp_id");
            entity.Property(e => e.ThpfModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("thpf_modified_date");
            entity.Property(e => e.ThpfTaxId).HasColumnName("thpf_tax_id");
            entity.Property(e => e.ThpfThpsId).HasColumnName("thpf_thps_id");
            entity.Property(e => e.ThpsBu)
                .HasMaxLength(61)
                .HasColumnName("thps_bu");
        });

        modelBuilder.Entity<VQlkThirdpartySite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_THIRDPARTY_SITE");

            entity.Property(e => e.BstCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("bst_code");
            entity.Property(e => e.BstDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("bst_description_lan1");
            entity.Property(e => e.BstDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("bst_description_lan2");
            entity.Property(e => e.BstDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("bst_description_lan3");
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.Gl1Id).HasColumnName("gl1_id");
            entity.Property(e => e.GlId).HasColumnName("gl_id");
            entity.Property(e => e.ThpsActive).HasColumnName("thps_active");
            entity.Property(e => e.ThpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("thps_address1");
            entity.Property(e => e.ThpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("thps_address2");
            entity.Property(e => e.ThpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("thps_address3");
            entity.Property(e => e.ThpsBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_barcode");
            entity.Property(e => e.ThpsCdIdBst).HasColumnName("thps_cd_id_bst");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan1");
            entity.Property(e => e.ThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan2");
            entity.Property(e => e.ThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan3");
            entity.Property(e => e.ThpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("thps_create_date");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.ThpsOrgId).HasColumnName("thps_org_id");
            entity.Property(e => e.ThpsRemarks)
                .HasMaxLength(255)
                .HasColumnName("thps_remarks");
            entity.Property(e => e.ThpsThpId).HasColumnName("thps_thp_id");
        });

        modelBuilder.Entity<VQlkThpsProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_THPS_PROPERTY");

            entity.Property(e => e.ThcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcf_code");
            entity.Property(e => e.ThcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan1");
            entity.Property(e => e.ThcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan2");
            entity.Property(e => e.ThcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan3");
            entity.Property(e => e.ThcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_code");
            entity.Property(e => e.ThcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan1");
            entity.Property(e => e.ThcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan2");
            entity.Property(e => e.ThcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan3");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpscvId).HasColumnName("thpscv_id");
        });

        modelBuilder.Entity<VQlkTraceAppActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_TRACE_APP_ACTIVITY");

            entity.Property(e => e.TaaAction)
                .HasMaxLength(20)
                .HasColumnName("taa_action");
            entity.Property(e => e.TaaClientAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("taa_client_address");
            entity.Property(e => e.TaaDatetime)
                .HasColumnType("datetime")
                .HasColumnName("taa_datetime");
            entity.Property(e => e.TaaDescription)
                .HasMaxLength(255)
                .HasColumnName("taa_description");
            entity.Property(e => e.TaaFullPagePath)
                .HasMaxLength(4000)
                .HasColumnName("taa_full_page_path");
            entity.Property(e => e.TaaId)
                .ValueGeneratedOnAdd()
                .HasColumnName("taa_id");
            entity.Property(e => e.TaaPageId)
                .HasMaxLength(100)
                .HasColumnName("taa_page_id");
            entity.Property(e => e.TaaPageName)
                .HasMaxLength(105)
                .HasColumnName("taa_page_Name");
            entity.Property(e => e.TaaPageNoSession)
                .HasMaxLength(100)
                .HasColumnName("taa_page_no_session");
            entity.Property(e => e.TaaSessionId)
                .HasMaxLength(20)
                .HasColumnName("taa_session_id");
            entity.Property(e => e.TaaUsId).HasColumnName("taa_us_id");
            entity.Property(e => e.TaaUserPageId)
                .HasMaxLength(100)
                .HasColumnName("taa_user_page_id");
        });

        modelBuilder.Entity<VQlkTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_TRANSACTION");

            entity.Property(e => e.ThpsUsVtBu)
                .HasMaxLength(126)
                .HasColumnName("thps_us_vt_bu");
            entity.Property(e => e.TsBuDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("ts_bu_description_lan1");
            entity.Property(e => e.TsBuId).HasColumnName("ts_bu_id");
            entity.Property(e => e.TsCdIdCms).HasColumnName("ts_cd_id_cms");
            entity.Property(e => e.TsCdIdCur).HasColumnName("ts_cd_id_cur");
            entity.Property(e => e.TsCdIdSrc).HasColumnName("ts_cd_id_src");
            entity.Property(e => e.TsCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_create_date");
            entity.Property(e => e.TsCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_cur_rate");
            entity.Property(e => e.TsDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_date");
            entity.Property(e => e.TsDateNum).HasColumnName("ts_date_num");
            entity.Property(e => e.TsDay).HasColumnName("ts_day");
            entity.Property(e => e.TsDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_discount");
            entity.Property(e => e.TsDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_due_date");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsInvCurRate)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_inv_cur_rate");
            entity.Property(e => e.TsModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_modified_date");
            entity.Property(e => e.TsMonth).HasColumnName("ts_month");
            entity.Property(e => e.TsNumber)
                .HasMaxLength(40)
                .HasColumnName("ts_number");
            entity.Property(e => e.TsOrgId).HasColumnName("ts_org_id");
            entity.Property(e => e.TsOurReference)
                .HasMaxLength(10)
                .HasColumnName("ts_our_reference");
            entity.Property(e => e.TsPtId).HasColumnName("ts_pt_id");
            entity.Property(e => e.TsRemarks)
                .HasMaxLength(255)
                .HasColumnName("ts_remarks");
            entity.Property(e => e.TsSgdId).HasColumnName("ts_sgd_id");
            entity.Property(e => e.TsTheirReference)
                .HasMaxLength(10)
                .HasColumnName("ts_their_reference");
            entity.Property(e => e.TsThpsIdBill).HasColumnName("ts_thps_id_bill");
            entity.Property(e => e.TsThpsIdShip).HasColumnName("ts_thps_id_ship");
            entity.Property(e => e.TsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total");
            entity.Property(e => e.TsTotalBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_bc");
            entity.Property(e => e.TsTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount");
            entity.Property(e => e.TsTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_discount_bc");
            entity.Property(e => e.TsTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax");
            entity.Property(e => e.TsTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total_tax_bc");
            entity.Property(e => e.TsUsId).HasColumnName("ts_us_id");
            entity.Property(e => e.TsVtId)
                .HasMaxLength(33)
                .HasColumnName("ts_vt_id");
            entity.Property(e => e.TsYear).HasColumnName("ts_year");
            entity.Property(e => e.TsgCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tsg_code");
            entity.Property(e => e.TsgDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tsg_description_lan1");
            entity.Property(e => e.TsgDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tsg_description_lan2");
            entity.Property(e => e.TsgDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("tsg_description_lan3");
            entity.Property(e => e.TssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tss_code");
            entity.Property(e => e.TssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan1");
            entity.Property(e => e.TssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan2");
            entity.Property(e => e.TssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("tss_description_lan3");
            entity.Property(e => e.TstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("tst_code");
            entity.Property(e => e.TstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan1");
            entity.Property(e => e.TstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan2");
            entity.Property(e => e.TstDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan3");
        });

        modelBuilder.Entity<VQlkTransactionItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_TRANSACTION_ITEM");

            entity.Property(e => e.ItId).HasColumnName("it_id");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsiCdIdRett).HasColumnName("tsi_cd_id_rett");
            entity.Property(e => e.TsiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_amount");
            entity.Property(e => e.TsiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_discount_percentage");
            entity.Property(e => e.TsiFactor).HasColumnName("tsi_factor");
            entity.Property(e => e.TsiId).HasColumnName("tsi_id");
            entity.Property(e => e.TsiIsFree).HasColumnName("tsi_is_free");
            entity.Property(e => e.TsiLineSequence).HasColumnName("tsi_line_sequence");
            entity.Property(e => e.TsiLpiId).HasColumnName("tsi_lpi_id");
            entity.Property(e => e.TsiPlIdWhs).HasColumnName("tsi_pl_id_whs");
            entity.Property(e => e.TsiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_price");
            entity.Property(e => e.TsiPriceBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_price_bc");
            entity.Property(e => e.TsiPriceChanged).HasColumnName("tsi_price_changed");
            entity.Property(e => e.TsiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity");
            entity.Property(e => e.TsiQuantity2)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_quantity2");
            entity.Property(e => e.TsiRemarks)
                .HasMaxLength(255)
                .HasColumnName("tsi_remarks");
            entity.Property(e => e.TsiTotalAmount)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("tsi_total_amount");
            entity.Property(e => e.TsiTotalAmountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_amount_bc");
            entity.Property(e => e.TsiTotalDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount");
            entity.Property(e => e.TsiTotalDiscountBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_discount_bc");
            entity.Property(e => e.TsiTotalTax)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax");
            entity.Property(e => e.TsiTotalTaxBc)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tsi_total_tax_bc");
            entity.Property(e => e.TsiTstoId).HasColumnName("tsi_tsto_id");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
        });

        modelBuilder.Entity<VQlkUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_USER");

            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .HasColumnName("NAME");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VQlkUserAtt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_USER_ATT");

            entity.Property(e => e.Type)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Value)
                .HasMaxLength(100)
                .HasColumnName("VALUE");
        });

        modelBuilder.Entity<VQlkVisit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_VISIT");

            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsUsVt)
                .HasMaxLength(92)
                .HasColumnName("thps_us_vt");
            entity.Property(e => e.VtCcdId).HasColumnName("vt_ccd_id");
            entity.Property(e => e.VtDay).HasColumnName("vt_day");
            entity.Property(e => e.VtDistance).HasColumnName("vt_distance");
            entity.Property(e => e.VtId)
                .HasMaxLength(30)
                .HasColumnName("vt_id");
            entity.Property(e => e.VtInGeofence).HasColumnName("vt_in_geofence");
            entity.Property(e => e.VtIsScanned).HasColumnName("vt_is_scanned");
            entity.Property(e => e.VtLatitude)
                .HasMaxLength(10)
                .HasColumnName("vt_latitude");
            entity.Property(e => e.VtLongitude)
                .HasMaxLength(10)
                .HasColumnName("vt_longitude");
            entity.Property(e => e.VtMonth).HasColumnName("vt_month");
            entity.Property(e => e.VtOperation)
                .HasMaxLength(16)
                .HasColumnName("vt_operation");
            entity.Property(e => e.VtRemarks)
                .HasMaxLength(100)
                .HasColumnName("vt_remarks");
            entity.Property(e => e.VtThpsId).HasColumnName("vt_thps_id");
            entity.Property(e => e.VtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtTimeInNum).HasColumnName("vt_time_in_num");
            entity.Property(e => e.VtTimeInT).HasColumnName("vt_time_in_t");
            entity.Property(e => e.VtTimeOut)
                .HasColumnType("datetime")
                .HasColumnName("vt_time_out");
            entity.Property(e => e.VtTimeOutT).HasColumnName("vt_time_out_t");
            entity.Property(e => e.VtTimeSpent).HasColumnName("vt_time_spent");
            entity.Property(e => e.VtUsId).HasColumnName("vt_us_id");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");
            entity.Property(e => e.VtYear).HasColumnName("vt_year");
        });

        modelBuilder.Entity<VQlkVisitPaymentStat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_VISIT_PAYMENT_STATS");

            entity.Property(e => e.VtId).HasColumnName("vt_id");
            entity.Property(e => e.VtPaymentCount).HasColumnName("vt_payment_count");
        });

        modelBuilder.Entity<VQlkVisitReason>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_VISIT_REASON");

            entity.Property(e => e.VrComments)
                .HasMaxLength(200)
                .HasColumnName("vr_comments");
            entity.Property(e => e.VrDate)
                .HasColumnType("datetime")
                .HasColumnName("vr_date");
            entity.Property(e => e.VrReasonCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("vr_reason_code");
            entity.Property(e => e.VrReasonLan1)
                .HasMaxLength(255)
                .HasColumnName("vr_reason_lan1");
            entity.Property(e => e.VrReasonLan2)
                .HasMaxLength(255)
                .HasColumnName("vr_reason_lan2");
            entity.Property(e => e.VrReasonLan3)
                .HasMaxLength(255)
                .HasColumnName("vr_reason_lan3");
            entity.Property(e => e.VtId).HasColumnName("vt_id");
        });

        modelBuilder.Entity<VQlkVisitTransactionStat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_VISIT_TRANSACTION_STATS");

            entity.Property(e => e.VtId)
                .HasMaxLength(30)
                .HasColumnName("vt_id");
            entity.Property(e => e.VtTransactionCount).HasColumnName("vt_transaction_count");
        });

        modelBuilder.Entity<VQlkWebUsage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_QLK_WEB_USAGE");

            entity.Property(e => e.TaaAction)
                .HasMaxLength(20)
                .HasColumnName("taa_action");
            entity.Property(e => e.TaaClientAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("taa_client_address");
            entity.Property(e => e.TaaDatetime)
                .HasColumnType("datetime")
                .HasColumnName("taa_datetime");
            entity.Property(e => e.TaaDescription)
                .HasMaxLength(255)
                .HasColumnName("taa_description");
            entity.Property(e => e.TaaFullPagePath)
                .HasMaxLength(4000)
                .HasColumnName("taa_full_page_path");
            entity.Property(e => e.TaaId).HasColumnName("taa_id");
            entity.Property(e => e.TaaPageId)
                .HasMaxLength(100)
                .HasColumnName("taa_page_id");
            entity.Property(e => e.TaaPageName)
                .HasMaxLength(105)
                .HasColumnName("taa_page_Name");
            entity.Property(e => e.TaaPageNoSession)
                .HasMaxLength(100)
                .HasColumnName("taa_page_no_session");
            entity.Property(e => e.TaaParentCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("taa_parent_code");
            entity.Property(e => e.TaaParentDescription)
                .HasMaxLength(100)
                .HasColumnName("taa_parent_description");
            entity.Property(e => e.TaaSessionId)
                .HasMaxLength(20)
                .HasColumnName("taa_session_id");
            entity.Property(e => e.TaaUsId).HasColumnName("taa_us_id");
            entity.Property(e => e.TaaUserPageId)
                .HasMaxLength(100)
                .HasColumnName("taa_user_page_id");
        });

        modelBuilder.Entity<VSiteandcustomergroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_SITEANDCUSTOMERGROUP", "cmn");

            entity.Property(e => e.QlCode)
                .HasMaxLength(32)
                .HasColumnName("ql_code");
            entity.Property(e => e.QlvCode)
                .HasMaxLength(255)
                .HasColumnName("qlv_code");
            entity.Property(e => e.QlvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan1");
            entity.Property(e => e.QlvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan2");
            entity.Property(e => e.QlvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan3");
            entity.Property(e => e.QlvId).HasColumnName("QLV_ID");
            entity.Property(e => e.QlvQlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan1");
            entity.Property(e => e.QlvQlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan2");
            entity.Property(e => e.QlvQlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan3");
            entity.Property(e => e.QlvQlId).HasColumnName("qlv_ql_id");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
        });

        modelBuilder.Entity<VSiteandcustomergroup1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_SITEANDCUSTOMERGROUP", "sls");

            entity.Property(e => e.QlCode)
                .HasMaxLength(32)
                .HasColumnName("ql_code");
            entity.Property(e => e.QlvCode)
                .HasMaxLength(255)
                .HasColumnName("qlv_code");
            entity.Property(e => e.QlvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan1");
            entity.Property(e => e.QlvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan2");
            entity.Property(e => e.QlvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("qlv_description_lan3");
            entity.Property(e => e.QlvId).HasColumnName("QLV_ID");
            entity.Property(e => e.QlvQlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan1");
            entity.Property(e => e.QlvQlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan2");
            entity.Property(e => e.QlvQlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("qlv_ql_description_lan3");
            entity.Property(e => e.QlvQlId).HasColumnName("qlv_ql_id");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
        });

        modelBuilder.Entity<VTarget>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TARGET", "sls");

            entity.Property(e => e.Achived)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("achived");
            entity.Property(e => e.Perc)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("perc");
            entity.Property(e => e.TaDescription)
                .HasMaxLength(250)
                .HasColumnName("ta_description");
            entity.Property(e => e.Target)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("target");
            entity.Property(e => e.TsMonth).HasColumnName("ts_month");
            entity.Property(e => e.TsYear).HasColumnName("ts_year");
            entity.Property(e => e.UsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("us_code");
        });

        modelBuilder.Entity<VTermHierarchy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TermHierarchy", "svy");

            entity.Property(e => e.CntCntId).HasColumnName("cnt_cnt_id");
            entity.Property(e => e.CntDescriptionLan1)
                .HasMaxLength(1000)
                .HasColumnName("cnt_description_lan1");
            entity.Property(e => e.CntId).HasColumnName("cnt_id");
            entity.Property(e => e.Fullpath)
                .HasMaxLength(1002)
                .HasColumnName("fullpath");
        });

        modelBuilder.Entity<VThirdPartyCustomerCategoryValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_ThirdParty_Customer_Category_Values", "cmn");

            entity.Property(e => e.ThcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_code");
            entity.Property(e => e.ThcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan1");
            entity.Property(e => e.ThcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan2");
            entity.Property(e => e.ThcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan3");
            entity.Property(e => e.ThcfvId).HasColumnName("thcfv_id");
            entity.Property(e => e.ThcfvThcfId).HasColumnName("thcfv_thcf_id");
        });

        modelBuilder.Entity<VThirdpartyBillShipGet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THIRDPARTY_BILL_SHIP_GET");

            entity.Property(e => e.ThpsIdB).HasColumnName("thps_id_b");
            entity.Property(e => e.ThpsIdS).HasColumnName("thps_id_s");
        });

        modelBuilder.Entity<VThirdpartysiteCategoriesValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THIRDPARTYSITE_CATEGORIES_VALUES", "cmn");

            entity.Property(e => e.ThcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcf_code");
            entity.Property(e => e.ThcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan1");
            entity.Property(e => e.ThcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_code");
            entity.Property(e => e.ThcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan1");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
        });

        modelBuilder.Entity<VThirdpartysiteCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THIRDPARTYSITE_CUSTOMERS", "cmn");

            entity.Property(e => e.GlDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan1");
            entity.Property(e => e.GlDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan2");
            entity.Property(e => e.GlDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("gl_description_lan3");
            entity.Property(e => e.ThpsActive).HasColumnName("thps_active");
            entity.Property(e => e.ThpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("thps_address1");
            entity.Property(e => e.ThpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("thps_address2");
            entity.Property(e => e.ThpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("thps_address3");
            entity.Property(e => e.ThpsBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_barcode");
            entity.Property(e => e.ThpsCdIdBst).HasColumnName("thps_cd_id_bst");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan1");
            entity.Property(e => e.ThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan2");
            entity.Property(e => e.ThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan3");
            entity.Property(e => e.ThpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("thps_create_date");
            entity.Property(e => e.ThpsEmail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_email");
            entity.Property(e => e.ThpsFax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_fax");
            entity.Property(e => e.ThpsGlId).HasColumnName("thps_gl_id");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_imp_uid");
            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsMobile)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_mobile");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.ThpsOrgId).HasColumnName("thps_org_id");
            entity.Property(e => e.ThpsPhone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_phone");
            entity.Property(e => e.ThpsThpId).HasColumnName("thps_thp_id");
            entity.Property(e => e.ThpsWebsite)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_website");
            entity.Property(e => e.UsFirstName)
                .HasMaxLength(50)
                .HasColumnName("us_first_name");
        });

        modelBuilder.Entity<VThirdpartysiteCustomersBillTo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THIRDPARTYSITE_CUSTOMERS_BillTo", "cmn");

            entity.Property(e => e.ThpsActive).HasColumnName("thps_active");
            entity.Property(e => e.ThpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("thps_address1");
            entity.Property(e => e.ThpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("thps_address2");
            entity.Property(e => e.ThpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("thps_address3");
            entity.Property(e => e.ThpsBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_barcode");
            entity.Property(e => e.ThpsCdIdBst).HasColumnName("thps_cd_id_bst");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan1");
            entity.Property(e => e.ThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan2");
            entity.Property(e => e.ThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan3");
            entity.Property(e => e.ThpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("thps_create_date");
            entity.Property(e => e.ThpsEmail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_email");
            entity.Property(e => e.ThpsFax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_fax");
            entity.Property(e => e.ThpsGlId).HasColumnName("thps_gl_id");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_imp_uid");
            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsMobile)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_mobile");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.ThpsOrgId).HasColumnName("thps_org_id");
            entity.Property(e => e.ThpsPhone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_phone");
            entity.Property(e => e.ThpsThpId).HasColumnName("thps_thp_id");
            entity.Property(e => e.ThpsWebsite)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_website");
        });

        modelBuilder.Entity<VThirdpartysiteCustomersShipTo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THIRDPARTYSITE_CUSTOMERS_ShipTo", "cmn");

            entity.Property(e => e.ThpsActive).HasColumnName("thps_active");
            entity.Property(e => e.ThpsAddress1)
                .HasMaxLength(255)
                .HasColumnName("thps_address1");
            entity.Property(e => e.ThpsAddress2)
                .HasMaxLength(255)
                .HasColumnName("thps_address2");
            entity.Property(e => e.ThpsAddress3)
                .HasMaxLength(255)
                .HasColumnName("thps_address3");
            entity.Property(e => e.ThpsBarcode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_barcode");
            entity.Property(e => e.ThpsCdIdBst).HasColumnName("thps_cd_id_bst");
            entity.Property(e => e.ThpsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_code");
            entity.Property(e => e.ThpsContactNameLan1)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan1");
            entity.Property(e => e.ThpsContactNameLan2)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan2");
            entity.Property(e => e.ThpsContactNameLan3)
                .HasMaxLength(100)
                .HasColumnName("thps_contact_name_lan3");
            entity.Property(e => e.ThpsCreateDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("thps_create_date");
            entity.Property(e => e.ThpsEmail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_email");
            entity.Property(e => e.ThpsFax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("thps_fax");
            entity.Property(e => e.ThpsGlId).HasColumnName("thps_gl_id");
            entity.Property(e => e.ThpsId).HasColumnName("thps_id");
            entity.Property(e => e.ThpsImpUid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_imp_uid");
            entity.Property(e => e.ThpsLatitude)
                .HasMaxLength(32)
                .HasColumnName("thps_latitude");
            entity.Property(e => e.ThpsLongitude)
                .HasMaxLength(32)
                .HasColumnName("thps_longitude");
            entity.Property(e => e.ThpsMobile)
                .HasMaxLength(256)
                .HasColumnName("thps_mobile");
            entity.Property(e => e.ThpsNameLan1)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan1");
            entity.Property(e => e.ThpsNameLan2)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan2");
            entity.Property(e => e.ThpsNameLan3)
                .HasMaxLength(255)
                .HasColumnName("thps_name_lan3");
            entity.Property(e => e.ThpsOrgId).HasColumnName("thps_org_id");
            entity.Property(e => e.ThpsPhone)
                .HasMaxLength(256)
                .HasColumnName("thps_phone");
            entity.Property(e => e.ThpsThpId).HasColumnName("thps_thp_id");
            entity.Property(e => e.ThpsWebsite)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thps_website");
        });

        modelBuilder.Entity<VThpctgFamilyValuesVirtual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THPCTG_FAMILY_VALUES_VIRTUAL", "cmn");

            entity.Property(e => e.ThcfvCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_code");
            entity.Property(e => e.ThcfvDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan1");
            entity.Property(e => e.ThcfvDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan2");
            entity.Property(e => e.ThcfvDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("thcfv_description_lan3");
            entity.Property(e => e.ThcfvId).HasColumnName("thcfv_id");
            entity.Property(e => e.ThcfvThcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcfv_thcf_code");
            entity.Property(e => e.ThcfvThcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thcfv_thcf_description_lan1");
            entity.Property(e => e.ThcfvThcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("thcfv_thcf_description_lan2");
            entity.Property(e => e.ThcfvThcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("thcfv_thcf_description_lan3");
            entity.Property(e => e.ThcfvThcfId).HasColumnName("thcfv_thcf_id");
        });

        modelBuilder.Entity<VThpctgFamilyVirtual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_THPCTG_FAMILY_VIRTUAL", "cmn");

            entity.Property(e => e.ThcfBuId).HasColumnName("thcf_bu_id");
            entity.Property(e => e.ThcfCalculated).HasColumnName("thcf_calculated");
            entity.Property(e => e.ThcfCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("thcf_code");
            entity.Property(e => e.ThcfDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan1");
            entity.Property(e => e.ThcfDescriptionLan2)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan2");
            entity.Property(e => e.ThcfDescriptionLan3)
                .HasMaxLength(100)
                .HasColumnName("thcf_description_lan3");
            entity.Property(e => e.ThcfId).HasColumnName("thcf_id");
            entity.Property(e => e.ThcfLevel).HasColumnName("thcf_level");
            entity.Property(e => e.ThcfThcfId).HasColumnName("thcf_thcf_id");
        });

        modelBuilder.Entity<VTransactionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_DETAILS", "dex");

            entity.Property(e => e.Discount)
                .HasColumnType("numeric(12, 3)")
                .HasColumnName("discount");
            entity.Property(e => e.Itemid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMID");
            entity.Property(e => e.Lotid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("LOTID");
            entity.Property(e => e.ShdQty)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("Shd_qty");
            entity.Property(e => e.TransDate).HasColumnName("transDate");
            entity.Property(e => e.TsId).HasColumnName("TS_ID");
            entity.Property(e => e.Unitprice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("unitprice");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<VTransactionHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_HEADER", "dex");

            entity.Property(e => e.Currencycode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currencycode");
            entity.Property(e => e.CustAccount)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("custAccount");
            entity.Property(e => e.SalesId).HasMaxLength(40);
            entity.Property(e => e.ShDate).HasColumnName("Sh_date");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
        });

        modelBuilder.Entity<VTransactionHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_HISTORY", "sls");

            entity.Property(e => e.TsCurSymb)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ts_cur_symb");
            entity.Property(e => e.TsDate)
                .HasColumnType("datetime")
                .HasColumnName("ts_date");
            entity.Property(e => e.TsId).HasColumnName("ts_id");
            entity.Property(e => e.TsNumber)
                .HasMaxLength(40)
                .HasColumnName("ts_number");
            entity.Property(e => e.TsThpsIdBill).HasColumnName("ts_thps_id_bill");
            entity.Property(e => e.TsThpsIdShip).HasColumnName("ts_thps_id_ship");
            entity.Property(e => e.TsTotal)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("ts_total");
            entity.Property(e => e.TsType)
                .HasMaxLength(50)
                .HasColumnName("ts_type");
            entity.Property(e => e.TstId).HasColumnName("tst_id");
        });

        modelBuilder.Entity<VTransactionItemHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_ITEM_HISTORY", "sls");

            entity.Property(e => e.ItDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("it_description_lan1");
            entity.Property(e => e.Pk).HasColumnName("pk");
            entity.Property(e => e.TsiDiscountPercentage)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("tsi_discount_percentage");
            entity.Property(e => e.TsiId).HasColumnName("tsi_id");
            entity.Property(e => e.TsiPrice)
                .HasColumnType("numeric(12, 3)")
                .HasColumnName("tsi_price");
            entity.Property(e => e.TsiQuantity)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("tsi_quantity");
            entity.Property(e => e.TsiTsId).HasColumnName("tsi_ts_id");
            entity.Property(e => e.UomCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom_code");
        });

        modelBuilder.Entity<VTransactionItemTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_ITEM_TOTALS", "sls");

            entity.Property(e => e.CTsiDiscountAmount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("c_tsi_discount_amount");
            entity.Property(e => e.CTsiDiscountPercentage)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("c_tsi_discount_percentage");
            entity.Property(e => e.CTsiId).HasColumnName("c_tsi_id");
            entity.Property(e => e.CTsiPrice)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("c_tsi_price");
            entity.Property(e => e.CTsiQuantity)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("c_tsi_quantity");
            entity.Property(e => e.CTsiTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("c_tsi_total");
            entity.Property(e => e.CTsiTotalDiscount)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("c_tsi_total_discount");
            entity.Property(e => e.CTsiTotalTax)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("c_tsi_total_tax");
            entity.Property(e => e.CTsiTsId).HasColumnName("c_tsi_ts_id");
        });

        modelBuilder.Entity<VTransactionTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_TOTALS", "sls");

            entity.Property(e => e.CTsId).HasColumnName("c_ts_id");
            entity.Property(e => e.CTsTotal)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("c_ts_total");
            entity.Property(e => e.CTsTotalDiscount)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("c_ts_total_discount");
            entity.Property(e => e.CTsTotalTax)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("c_ts_total_tax");
        });

        modelBuilder.Entity<VTransactionType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTION_TYPES", "sls");

            entity.Property(e => e.TstAccountingPost).HasColumnName("tst_accounting_post");
            entity.Property(e => e.TstAllowChangeDelvQty).HasColumnName("tst_allow_change_delv_qty");
            entity.Property(e => e.TstAllowChangeOrdQty).HasColumnName("tst_allow_change_ord_qty");
            entity.Property(e => e.TstAllowDiscountAmountChange).HasColumnName("tst_allow_discount_amount_change");
            entity.Property(e => e.TstAllowDiscountChange).HasColumnName("tst_allow_discount_change");
            entity.Property(e => e.TstAllowPriceChange).HasColumnName("tst_allow_price_change");
            entity.Property(e => e.TstApplyConstraints).HasColumnName("tst_apply_constraints");
            entity.Property(e => e.TstApplyPromotion).HasColumnName("tst_apply_promotion");
            entity.Property(e => e.TstAutoCreateFromSource).HasColumnName("tst_auto_create_from_source");
            entity.Property(e => e.TstAutoSequence).HasColumnName("tst_auto_sequence");
            entity.Property(e => e.TstCdIdTsg).HasColumnName("tst_cd_id_tsg");
            entity.Property(e => e.TstCheckCreditLimit).HasColumnName("tst_check_credit_limit");
            entity.Property(e => e.TstCheckQuantity).HasColumnName("tst_check_quantity");
            entity.Property(e => e.TstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("tst_code");
            entity.Property(e => e.TstCollect).HasColumnName("tst_collect");
            entity.Property(e => e.TstDefaultItemDiscount)
                .HasColumnType("numeric(16, 5)")
                .HasColumnName("tst_default_item_discount");
            entity.Property(e => e.TstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan1");
            entity.Property(e => e.TstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan2");
            entity.Property(e => e.TstDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_description_lan3");
            entity.Property(e => e.TstDqIdWhsSelection).HasColumnName("tst_dq_id_whs_selection");
            entity.Property(e => e.TstDqItemSelection).HasColumnName("tst_dq_item_selection");
            entity.Property(e => e.TstDqUomSelection).HasColumnName("tst_dq_uom_selection");
            entity.Property(e => e.TstGenerateDueInvoice).HasColumnName("tst_generate_due_invoice");
            entity.Property(e => e.TstHoldQuantity).HasColumnName("tst_hold_quantity");
            entity.Property(e => e.TstId)
                .ValueGeneratedOnAdd()
                .HasColumnName("tst_id");
            entity.Property(e => e.TstManageExpiryDate).HasColumnName("tst_manage_expiry_date");
            entity.Property(e => e.TstManageLot).HasColumnName("tst_manage_lot");
            entity.Property(e => e.TstManageProductionDate).HasColumnName("tst_manage_production_date");
            entity.Property(e => e.TstManageSerial).HasColumnName("tst_manage_serial");
            entity.Property(e => e.TstMvtIdSource).HasColumnName("tst_mvt_id_source");
            entity.Property(e => e.TstNameLan1)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan1");
            entity.Property(e => e.TstNameLan2)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan2");
            entity.Property(e => e.TstNameLan3)
                .HasMaxLength(50)
                .HasColumnName("tst_name_lan3");
            entity.Property(e => e.TstNotes)
                .HasMaxLength(50)
                .HasColumnName("tst_notes");
            entity.Property(e => e.TstPrintCopies).HasColumnName("tst_print_copies");
            entity.Property(e => e.TstPrintingCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tst_printing_code");
            entity.Property(e => e.TstQuantityMultiplier).HasColumnName("tst_quantity_multiplier");
            entity.Property(e => e.TstReturntype)
                .HasMaxLength(255)
                .HasColumnName("tst_returntype");
            entity.Property(e => e.TstShowFreecomment).HasColumnName("tst_show_freecomment");
            entity.Property(e => e.TstShowFreereason).HasColumnName("tst_show_freereason");
            entity.Property(e => e.TstShowPrice).HasColumnName("tst_show_price");
            entity.Property(e => e.TstShowdeliveryqty).HasColumnName("tst_showdeliveryqty");
            entity.Property(e => e.TstShowreturntype).HasColumnName("tst_showreturntype");
            entity.Property(e => e.TstShowtax).HasColumnName("tst_showtax");
            entity.Property(e => e.TstStatusFcCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tst_status_fc_code");
            entity.Property(e => e.TstTstIdNew).HasColumnName("tst_tst_id_new");
            entity.Property(e => e.TstTstIdSource).HasColumnName("tst_tst_id_source");
            entity.Property(e => e.TstUpdateCost).HasColumnName("tst_update_cost");
            entity.Property(e => e.TstUpdateQuantity).HasColumnName("tst_update_quantity");
        });

        modelBuilder.Entity<VTransactionVolume>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_transaction_volume", "cmn");

            entity.Property(e => e.TsWhs)
                .HasMaxLength(100)
                .HasColumnName("ts_whs");
            entity.Property(e => e.TsvTsId).HasColumnName("tsv_ts_id");
            entity.Property(e => e.TsvVolume)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("tsv_volume");
            entity.Property(e => e.TsvWeight)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("tsv_weight");
        });

        modelBuilder.Entity<VTransactionstatusTransition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTIONSTATUS_TRANSITION", "sls");

            entity.Property(e => e.TssFromCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tss_from_code");
            entity.Property(e => e.TssToCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tss_to_code");
            entity.Property(e => e.TsstAutoAllocateLxp).HasColumnName("tsst_auto_allocate_lxp");
            entity.Property(e => e.TsstCheckAvailability).HasColumnName("tsst_check_availability");
            entity.Property(e => e.TsstDescriptionLan1)
                .HasMaxLength(371)
                .HasColumnName("tsst_description_lan1");
            entity.Property(e => e.TsstDescriptionLan2)
                .HasMaxLength(371)
                .HasColumnName("tsst_description_lan2");
            entity.Property(e => e.TsstExportData).HasColumnName("tsst_export_data");
            entity.Property(e => e.TsstExtraCode)
                .HasMaxLength(64)
                .HasColumnName("tsst_extra_code");
            entity.Property(e => e.TsstFromTssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tsst_from_tss_description_lan1");
            entity.Property(e => e.TsstFromTssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tsst_from_tss_description_lan2");
            entity.Property(e => e.TsstId).HasColumnName("tsst_id");
            entity.Property(e => e.TsstLxpRequired).HasColumnName("tsst_lxp_required");
            entity.Property(e => e.TsstManageDueInvoice).HasColumnName("tsst_manage_due_invoice");
            entity.Property(e => e.TsstSilentMode).HasColumnName("tsst_silent_mode");
            entity.Property(e => e.TsstToTssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("tsst_to_tss_description_lan1");
            entity.Property(e => e.TsstToTssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("tsst_to_tss_description_lan2");
            entity.Property(e => e.TsstTsUsIsOwner).HasColumnName("tsst_ts_us_is_owner");
            entity.Property(e => e.TsstTssIdFrom).HasColumnName("tsst_tss_id_from");
            entity.Property(e => e.TsstTssIdGenerate).HasColumnName("tsst_tss_id_generate");
            entity.Property(e => e.TsstTssIdTo).HasColumnName("tsst_tss_id_to");
            entity.Property(e => e.TsstTstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("tsst_tst_code");
            entity.Property(e => e.TsstTstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("tsst_tst_description_lan1");
            entity.Property(e => e.TsstTstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("tsst_tst_description_lan2");
            entity.Property(e => e.TsstTstId).HasColumnName("tsst_tst_id");
            entity.Property(e => e.TsstTstIdGenerate).HasColumnName("tsst_tst_id_generate");
            entity.Property(e => e.TsstUpdateQuantity).HasColumnName("tsst_update_quantity");
        });

        modelBuilder.Entity<VTransactiontypestatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TRANSACTIONTYPESTATUS", "sls");

            entity.Property(e => e.TssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("tss_code");
            entity.Property(e => e.TssDescription)
                .HasMaxLength(255)
                .HasColumnName("tss_description");
            entity.Property(e => e.TstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("tst_code");
            entity.Property(e => e.TstDescription)
                .HasMaxLength(50)
                .HasColumnName("tst_description");
            entity.Property(e => e.TtsId).HasColumnName("tts_id");
            entity.Property(e => e.TtsReserveStock).HasColumnName("tts_reserve_stock");
            entity.Property(e => e.TtsTssId).HasColumnName("tts_tss_id");
            entity.Property(e => e.TtsTstId).HasColumnName("tts_tst_id");
        });

        modelBuilder.Entity<VUiMovement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_UI_MOVEMENT", "sls");

            entity.Property(e => e.UmvBtnAddDelivery).HasColumnName("umv_btn_add_delivery");
            entity.Property(e => e.UmvBtnAddItem).HasColumnName("umv_btn_add_item");
            entity.Property(e => e.UmvBtnApprove).HasColumnName("umv_btn_approve");
            entity.Property(e => e.UmvBtnAutoAllocate).HasColumnName("umv_btn_auto_allocate");
            entity.Property(e => e.UmvBtnReject).HasColumnName("umv_btn_reject");
            entity.Property(e => e.UmvBtnVoid).HasColumnName("umv_btn_void");
            entity.Property(e => e.UmvCanEdit).HasColumnName("umv_can_edit");
            entity.Property(e => e.UmvCheckAvailability).HasColumnName("umv_check_availability");
            entity.Property(e => e.UmvId).HasColumnName("umv_id");
            entity.Property(e => e.UmvMssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("umv_mss_code");
            entity.Property(e => e.UmvMssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("umv_mss_description_lan1");
            entity.Property(e => e.UmvMssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("umv_mss_description_lan2");
            entity.Property(e => e.UmvMssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("umv_mss_description_lan3");
            entity.Property(e => e.UmvMssId).HasColumnName("umv_mss_id");
            entity.Property(e => e.UmvMvBuId).HasColumnName("umv_mv_bu_id");
            entity.Property(e => e.UmvMvCdIdCms).HasColumnName("umv_mv_cd_id_cms");
            entity.Property(e => e.UmvMvCdIdSrc).HasColumnName("umv_mv_cd_id_src");
            entity.Property(e => e.UmvMvCreateDate).HasColumnName("umv_mv_create_date");
            entity.Property(e => e.UmvMvDate).HasColumnName("umv_mv_date");
            entity.Property(e => e.UmvMvDueDate).HasColumnName("umv_mv_due_date");
            entity.Property(e => e.UmvMvId).HasColumnName("umv_mv_id");
            entity.Property(e => e.UmvMvModifiedDate).HasColumnName("umv_mv_modified_date");
            entity.Property(e => e.UmvMvMssId).HasColumnName("umv_mv_mss_id");
            entity.Property(e => e.UmvMvMvtId).HasColumnName("umv_mv_mvt_id");
            entity.Property(e => e.UmvMvNumber).HasColumnName("umv_mv_number");
            entity.Property(e => e.UmvMvOrgId).HasColumnName("umv_mv_org_id");
            entity.Property(e => e.UmvMvOurReference).HasColumnName("umv_mv_our_reference");
            entity.Property(e => e.UmvMvPlIdWhsFrom).HasColumnName("umv_mv_pl_id_whs_from");
            entity.Property(e => e.UmvMvPlIdWhsTo).HasColumnName("umv_mv_pl_id_whs_to");
            entity.Property(e => e.UmvMvRemarks).HasColumnName("umv_mv_remarks");
            entity.Property(e => e.UmvMvSgdId).HasColumnName("umv_mv_sgd_id");
            entity.Property(e => e.UmvMvTheirReference).HasColumnName("umv_mv_their_reference");
            entity.Property(e => e.UmvMvUsId).HasColumnName("umv_mv_us_id");
            entity.Property(e => e.UmvMvtCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("umv_mvt_code");
            entity.Property(e => e.UmvMvtDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("umv_mvt_description_lan1");
            entity.Property(e => e.UmvMvtDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("umv_mvt_description_lan2");
            entity.Property(e => e.UmvMvtDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("umv_mvt_description_lan3");
            entity.Property(e => e.UmvMvtId).HasColumnName("umv_mvt_id");
        });

        modelBuilder.Entity<VUiTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_UI_TRANSACTION", "sls");

            entity.Property(e => e.UtsBtnAddItem).HasColumnName("uts_btn_add_item");
            entity.Property(e => e.UtsBtnAdditemDetail).HasColumnName("uts_btn_additem_detail");
            entity.Property(e => e.UtsBtnApply).HasColumnName("uts_btn_apply");
            entity.Property(e => e.UtsBtnApprove).HasColumnName("uts_btn_approve");
            entity.Property(e => e.UtsBtnAutoAllocate).HasColumnName("uts_btn_auto_allocate");
            entity.Property(e => e.UtsBtnGetpromotion).HasColumnName("uts_btn_getpromotion");
            entity.Property(e => e.UtsBtnIngridAddsimilar).HasColumnName("uts_btn_ingrid_addsimilar");
            entity.Property(e => e.UtsBtnIngridDelete).HasColumnName("uts_btn_ingrid_delete");
            entity.Property(e => e.UtsBtnIngridShowdetail).HasColumnName("uts_btn_ingrid_showdetail");
            entity.Property(e => e.UtsBtnReject).HasColumnName("uts_btn_reject");
            entity.Property(e => e.UtsBtnSubmit).HasColumnName("uts_btn_submit");
            entity.Property(e => e.UtsBtnVoid).HasColumnName("uts_btn_void");
            entity.Property(e => e.UtsId).HasColumnName("uts_id");
            entity.Property(e => e.UtsTsBuId).HasColumnName("uts_ts_bu_id");
            entity.Property(e => e.UtsTsCdIdCms).HasColumnName("uts_ts_cd_id_cms");
            entity.Property(e => e.UtsTsCdIdCur).HasColumnName("uts_ts_cd_id_cur");
            entity.Property(e => e.UtsTsCdIdPam).HasColumnName("uts_ts_cd_id_pam");
            entity.Property(e => e.UtsTsCdIdSrc).HasColumnName("uts_ts_cd_id_src");
            entity.Property(e => e.UtsTsCreateDate).HasColumnName("uts_ts_create_date");
            entity.Property(e => e.UtsTsCurRate).HasColumnName("uts_ts_cur_rate");
            entity.Property(e => e.UtsTsDate).HasColumnName("uts_ts_date");
            entity.Property(e => e.UtsTsDiscount).HasColumnName("uts_ts_discount");
            entity.Property(e => e.UtsTsDueDate).HasColumnName("uts_ts_due_date");
            entity.Property(e => e.UtsTsId).HasColumnName("uts_ts_id");
            entity.Property(e => e.UtsTsInvCurRate).HasColumnName("uts_ts_inv_cur_rate");
            entity.Property(e => e.UtsTsModifiedDate).HasColumnName("uts_ts_modified_date");
            entity.Property(e => e.UtsTsNumber).HasColumnName("uts_ts_number");
            entity.Property(e => e.UtsTsOrgId).HasColumnName("uts_ts_org_id");
            entity.Property(e => e.UtsTsOurReference).HasColumnName("uts_ts_our_reference");
            entity.Property(e => e.UtsTsRemarks).HasColumnName("uts_ts_remarks");
            entity.Property(e => e.UtsTsSgdId).HasColumnName("uts_ts_sgd_id");
            entity.Property(e => e.UtsTsTheirReference).HasColumnName("uts_ts_their_reference");
            entity.Property(e => e.UtsTsThpsIdBill).HasColumnName("uts_ts_thps_id_bill");
            entity.Property(e => e.UtsTsThpsIdShip).HasColumnName("uts_ts_thps_id_ship");
            entity.Property(e => e.UtsTsTotal).HasColumnName("uts_ts_total");
            entity.Property(e => e.UtsTsTotalBc).HasColumnName("uts_ts_total_bc");
            entity.Property(e => e.UtsTsTotalDiscount).HasColumnName("uts_ts_total_discount");
            entity.Property(e => e.UtsTsTotalDiscountBc).HasColumnName("uts_ts_total_discount_bc");
            entity.Property(e => e.UtsTsTotalTax).HasColumnName("uts_ts_total_tax");
            entity.Property(e => e.UtsTsTotalTaxBc).HasColumnName("uts_ts_total_tax_bc");
            entity.Property(e => e.UtsTsTssId).HasColumnName("uts_ts_tss_id");
            entity.Property(e => e.UtsTsTstId).HasColumnName("uts_ts_tst_id");
            entity.Property(e => e.UtsTsUsId).HasColumnName("uts_ts_us_id");
            entity.Property(e => e.UtsTsVtId).HasColumnName("uts_ts_vt_id");
            entity.Property(e => e.UtsTssCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("uts_tss_code");
            entity.Property(e => e.UtsTssDescriptionLan1)
                .HasMaxLength(255)
                .HasColumnName("uts_tss_description_lan1");
            entity.Property(e => e.UtsTssDescriptionLan2)
                .HasMaxLength(255)
                .HasColumnName("uts_tss_description_lan2");
            entity.Property(e => e.UtsTssDescriptionLan3)
                .HasMaxLength(255)
                .HasColumnName("uts_tss_description_lan3");
            entity.Property(e => e.UtsTssId).HasColumnName("uts_tss_id");
            entity.Property(e => e.UtsTstCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("uts_tst_code");
            entity.Property(e => e.UtsTstDescriptionLan1)
                .HasMaxLength(50)
                .HasColumnName("uts_tst_description_lan1");
            entity.Property(e => e.UtsTstDescriptionLan2)
                .HasMaxLength(50)
                .HasColumnName("uts_tst_description_lan2");
            entity.Property(e => e.UtsTstDescriptionLan3)
                .HasMaxLength(50)
                .HasColumnName("uts_tst_description_lan3");
            entity.Property(e => e.UtsTstId).HasColumnName("uts_tst_id");
            entity.Property(e => e.UtsUsIdCreatedby).HasColumnName("uts_us_id_createdby");
        });

        modelBuilder.Entity<VUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER");

            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .HasColumnName("NAME");
            entity.Property(e => e.Userid)
                .ValueGeneratedOnAdd()
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VUserAtt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER_ATT");

            entity.Property(e => e.Type)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Userid)
                .ValueGeneratedOnAdd()
                .HasColumnName("userid");
            entity.Property(e => e.Value)
                .HasMaxLength(100)
                .HasColumnName("value");
        });

        modelBuilder.Entity<VUserHierarchy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_UserHierarchy", "cmn");

            entity.Property(e => e.Fullpath)
                .HasMaxLength(1002)
                .HasColumnName("fullpath");
            entity.Property(e => e.UsFirstName)
                .HasMaxLength(50)
                .HasColumnName("us_first_name");
            entity.Property(e => e.UsId).HasColumnName("us_id");
            entity.Property(e => e.UsUsId).HasColumnName("us_us_id");
        });

        modelBuilder.Entity<VUserItemWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER_ITEM_WAREHOUSE", "sls");

            entity.Property(e => e.UiwItId).HasColumnName("uiw_it_id");
            entity.Property(e => e.UiwPlId).HasColumnName("uiw_pl_id");
            entity.Property(e => e.UiwUsId).HasColumnName("uiw_us_id");
        });

        modelBuilder.Entity<VUserProfile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER_PROFILE", "cmn");

            entity.Property(e => e.UspBuCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("usp_bu_code");
            entity.Property(e => e.UspBuDescription)
                .HasMaxLength(100)
                .HasColumnName("usp_bu_description");
            entity.Property(e => e.UspPrCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usp_pr_code");
            entity.Property(e => e.UspPrDescription)
                .HasMaxLength(50)
                .HasColumnName("usp_pr_description");
            entity.Property(e => e.UspPrId).HasColumnName("usp_pr_id");
            entity.Property(e => e.UspUsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usp_us_code");
            entity.Property(e => e.UspUsId).HasColumnName("usp_us_id");
            entity.Property(e => e.UspUsShortName)
                .HasMaxLength(25)
                .HasColumnName("usp_us_short_name");
        });

        modelBuilder.Entity<VUserWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER_Warehouse");

            entity.Property(e => e.UswId).HasColumnName("usw_id");
            entity.Property(e => e.UswIsDefault).HasColumnName("usw_is_default");
            entity.Property(e => e.UswPlIdWhs).HasColumnName("usw_pl_id_whs");
            entity.Property(e => e.UswUsId).HasColumnName("usw_us_id");
            entity.Property(e => e.UswWhsCode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("usw_whs_code");
            entity.Property(e => e.UswWhsName)
                .HasMaxLength(100)
                .HasColumnName("usw_whs_name");
            entity.Property(e => e.UswWhsType)
                .HasMaxLength(255)
                .HasColumnName("usw_whs_type");
        });

        modelBuilder.Entity<VUserWarehouseRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_USER_WAREHOUSE_ROLE", "mforce");

            entity.Property(e => e.UwrIsDefault).HasColumnName("uwr_is_default");
            entity.Property(e => e.UwrPlCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uwr_pl_code");
            entity.Property(e => e.UwrPlDescriptionLan1)
                .HasMaxLength(100)
                .HasColumnName("uwr_pl_description_lan1");
            entity.Property(e => e.UwrPlId).HasColumnName("uwr_pl_id");
            entity.Property(e => e.UwrPrCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("uwr_pr_code");
            entity.Property(e => e.UwrPrDescription)
                .HasMaxLength(50)
                .HasColumnName("uwr_pr_description");
            entity.Property(e => e.UwrPrId).HasColumnName("uwr_pr_id");
            entity.Property(e => e.UwrUsCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("uwr_us_code");
            entity.Property(e => e.UwrUsId).HasColumnName("uwr_us_id");
            entity.Property(e => e.UwrUsShortName)
                .HasMaxLength(25)
                .HasColumnName("uwr_us_short_name");
        });

        modelBuilder.Entity<VWarehouseProductNolot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_WAREHOUSE_PRODUCT_NOLOT", "mforce");

            entity.Property(e => e.WpId).HasColumnName("wp_id");
            entity.Property(e => e.WpPrId).HasColumnName("wp_pr_id");
            entity.Property(e => e.WpQuantity)
                .HasColumnType("numeric(38, 5)")
                .HasColumnName("wp_quantity");
            entity.Property(e => e.WpUomId).HasColumnName("wp_uom_id");
            entity.Property(e => e.WpWhId).HasColumnName("wp_wh_id");
        });

        modelBuilder.Entity<Models.Version>(entity =>
        {
            entity.HasKey(e => e.VrId).HasFillFactor(90);

            entity.ToTable("VERSION", "cmn");

            entity.Property(e => e.VrId).HasColumnName("vr_id");
            entity.Property(e => e.VrAndroidVersion)
                .HasMaxLength(20)
                .HasColumnName("vr_android_version");
            entity.Property(e => e.VrComments)
                .HasMaxLength(100)
                .HasColumnName("vr_comments");
            entity.Property(e => e.VrDatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("vr_datetime");
            entity.Property(e => e.VrDbVersion)
                .HasMaxLength(20)
                .HasColumnName("vr_db_version");
            entity.Property(e => e.VrIosVersion)
                .HasMaxLength(20)
                .HasColumnName("vr_ios_version");
            entity.Property(e => e.VrIsLatest).HasColumnName("vr_is_latest");
            entity.Property(e => e.VrMobileVersion)
                .HasMaxLength(20)
                .HasColumnName("vr_mobile_version");
            entity.Property(e => e.VrWebWersion)
                .HasMaxLength(20)
                .HasColumnName("vr_web_wersion");
        });

        modelBuilder.Entity<Visit>(entity =>
        {
            entity.HasKey(e => e.VtId).HasFillFactor(90);

            entity.ToTable("VISIT", "cmn");

            entity.HasIndex(e => new { e.VtUsId, e.VtThpsId, e.VtTimeIn }, "idx_us_thps_time_in")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.VtId).HasColumnName("vt_id");
            entity.Property(e => e.VtAttribute1)
                .HasMaxLength(255)
                .HasColumnName("vt_attribute_1");
            entity.Property(e => e.VtCcdId).HasColumnName("vt_ccd_id");
            entity.Property(e => e.VtCdIdSrc).HasColumnName("vt_cd_id_src");
            entity.Property(e => e.VtInGeofence).HasColumnName("vt_in_geofence");
            entity.Property(e => e.VtIsScanned).HasColumnName("vt_is_scanned");
            entity.Property(e => e.VtLatitude)
                .HasMaxLength(10)
                .HasColumnName("vt_latitude");
            entity.Property(e => e.VtLongitude)
                .HasMaxLength(10)
                .HasColumnName("vt_longitude");
            entity.Property(e => e.VtOperation)
                .HasMaxLength(16)
                .HasDefaultValue("0000000000000000")
                .HasColumnName("vt_operation");
            entity.Property(e => e.VtOrgId).HasColumnName("vt_org_id");
            entity.Property(e => e.VtRemarks)
                .HasMaxLength(100)
                .HasColumnName("vt_remarks");
            entity.Property(e => e.VtThpsId).HasColumnName("vt_thps_id");
            entity.Property(e => e.VtTimeIn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vt_time_in");
            entity.Property(e => e.VtTimeOut)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("vt_time_out");
            entity.Property(e => e.VtUid)
                .HasMaxLength(128)
                .HasColumnName("vt_uid");
            entity.Property(e => e.VtUsId).HasColumnName("vt_us_id");
            entity.Property(e => e.VtVersion)
                .HasMaxLength(50)
                .HasColumnName("vt_version");

            entity.HasOne(d => d.VtCcd).WithMany(p => p.Visits)
                .HasForeignKey(d => d.VtCcdId)
                .HasConstraintName("FK_VT_REF_CC");

            entity.HasOne(d => d.VtCdIdSrcNavigation).WithMany(p => p.Visits)
                .HasForeignKey(d => d.VtCdIdSrc)
                .HasConstraintName("FK_VISIT_REFERENCE_CODESC");

            entity.HasOne(d => d.VtThps).WithMany(p => p.Visits)
                .HasForeignKey(d => d.VtThpsId)
                .HasConstraintName("FK_VT_REF_THPS");

            entity.HasOne(d => d.VtUs).WithMany(p => p.Visits)
                .HasForeignKey(d => d.VtUsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VT_REF_US");
        });

        modelBuilder.Entity<VisitReason>(entity =>
        {
            entity.HasKey(e => e.VrId).HasFillFactor(90);

            entity.ToTable("VISIT_REASON", "cmn");

            entity.Property(e => e.VrId).HasColumnName("vr_id");
            entity.Property(e => e.VrCdIdReason).HasColumnName("vr_cd_id_reason");
            entity.Property(e => e.VrComments)
                .HasMaxLength(200)
                .HasColumnName("vr_comments");
            entity.Property(e => e.VrDate)
                .HasColumnType("datetime")
                .HasColumnName("vr_date");
            entity.Property(e => e.VrFcId).HasColumnName("vr_fc_id");
            entity.Property(e => e.VrVtId).HasColumnName("vr_vt_id");

            entity.HasOne(d => d.VrCdIdReasonNavigation).WithMany(p => p.VisitReasons)
                .HasForeignKey(d => d.VrCdIdReason)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VR_REF_CD");

            entity.HasOne(d => d.VrFc).WithMany(p => p.VisitReasons)
                .HasForeignKey(d => d.VrFcId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VR_REF_FC");

            entity.HasOne(d => d.VrVt).WithMany(p => p.VisitReasons)
                .HasForeignKey(d => d.VrVtId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VR_REF_VT");
        });

        modelBuilder.Entity<VisitSnc>(entity =>
        {
            entity.HasKey(e => new { e.SVtId, e.SVtSmId, e.SVtVersion }).HasFillFactor(90);

            entity.ToTable("VISIT_SNC", "syn");

            entity.Property(e => e.SVtId).HasColumnName("s_vt_id");
            entity.Property(e => e.SVtSmId).HasColumnName("s_vt_sm_id");
            entity.Property(e => e.SVtVersion)
                .HasMaxLength(25)
                .HasColumnName("s_vt_version");
            entity.Property(e => e.SVtBatchNb)
                .HasMaxLength(50)
                .HasColumnName("s_vt_batch_nb");
            entity.Property(e => e.SVtCcdId).HasColumnName("s_vt_ccd_id");
            entity.Property(e => e.SVtCuId).HasColumnName("s_vt_cu_id");
            entity.Property(e => e.SVtCuUid)
                .HasMaxLength(128)
                .HasColumnName("s_vt_cu_uid");
            entity.Property(e => e.SVtIsCreated).HasColumnName("s_vt_is_created");
            entity.Property(e => e.SVtNoCall)
                .HasMaxLength(100)
                .HasColumnName("s_vt_no_call");
            entity.Property(e => e.SVtNoSale)
                .HasMaxLength(100)
                .HasColumnName("s_vt_no_sale");
            entity.Property(e => e.SVtNoScan)
                .HasMaxLength(100)
                .HasColumnName("s_vt_no_scan");
            entity.Property(e => e.SVtOperation)
                .HasMaxLength(16)
                .HasColumnName("s_vt_operation");
            entity.Property(e => e.SVtRemarks)
                .HasMaxLength(100)
                .HasColumnName("s_vt_remarks");
            entity.Property(e => e.SVtSynched).HasColumnName("s_vt_synched");
            entity.Property(e => e.SVtTimeIn)
                .HasColumnType("datetime")
                .HasColumnName("s_vt_time_in");
            entity.Property(e => e.SVtTimeOut)
                .HasColumnType("datetime")
                .HasColumnName("s_vt_time_out");
            entity.Property(e => e.SVtUid)
                .HasMaxLength(128)
                .HasColumnName("s_vt_uid");
        });

        modelBuilder.Entity<WarehouseProductSnc>(entity =>
        {
            entity.HasKey(e => new { e.SWpId, e.STrSmId, e.STrVersion }).HasFillFactor(90);

            entity.ToTable("WAREHOUSE_PRODUCT_SNC", "syn");

            entity.Property(e => e.SWpId).HasColumnName("s_wp_id");
            entity.Property(e => e.STrSmId).HasColumnName("s_tr_sm_id");
            entity.Property(e => e.STrVersion)
                .HasMaxLength(25)
                .HasColumnName("s_tr_version");
            entity.Property(e => e.SWpExpiryDate)
                .HasMaxLength(10)
                .HasColumnName("s_wp_expiry_date");
            entity.Property(e => e.SWpImpFlag)
                .HasDefaultValue((short)1)
                .HasColumnName("s_wp_imp_flag");
            entity.Property(e => e.SWpLotNo)
                .HasMaxLength(32)
                .HasColumnName("s_wp_lot_no");
            entity.Property(e => e.SWpPackQuantity)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_wp_pack_quantity");
            entity.Property(e => e.SWpPrId).HasColumnName("s_wp_pr_id");
            entity.Property(e => e.SWpProp1)
                .HasMaxLength(50)
                .HasColumnName("s_wp_prop1");
            entity.Property(e => e.SWpProp2)
                .HasMaxLength(50)
                .HasColumnName("s_wp_prop2");
            entity.Property(e => e.SWpQuantity)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_wp_quantity");
            entity.Property(e => e.SWpQuantityDmg)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("s_wp_quantity_dmg");
            entity.Property(e => e.SWpSmId).HasColumnName("s_wp_sm_id");
            entity.Property(e => e.SWpUnit)
                .HasMaxLength(32)
                .HasColumnName("s_wp_unit");
            entity.Property(e => e.SWpWhId).HasColumnName("s_wp_wh_id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
